// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -o sql.go -p sql sql.y. DO NOT EDIT.

//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20

import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/IMQS/pgparser/parser/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48
// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:468
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const TS_MATCH = 57361
const JSON_LEFT_CONTAINS = 57362
const JSON_RIGHT_CONTAINS = 57363
const JSON_EXTRACT = 57364
const JSON_EXTRACT_TEXT = 57365
const ERROR = 57366
const ACTION = 57367
const ADD = 57368
const ALL = 57369
const ALTER = 57370
const ANALYSE = 57371
const ANALYZE = 57372
const AND = 57373
const ANY = 57374
const ANNOTATE_TYPE = 57375
const ARRAY = 57376
const AS = 57377
const ASC = 57378
const ASYMMETRIC = 57379
const AT = 57380
const BACKUP = 57381
const BEGIN = 57382
const BETWEEN = 57383
const BIGINT = 57384
const BIGSERIAL = 57385
const BIT = 57386
const BLOB = 57387
const BOOL = 57388
const BOOLEAN = 57389
const BOTH = 57390
const BY = 57391
const BYTEA = 57392
const BYTES = 57393
const CANCEL = 57394
const CASCADE = 57395
const CASE = 57396
const CAST = 57397
const CHAR = 57398
const CHARACTER = 57399
const CHARACTERISTICS = 57400
const CHECK = 57401
const CLUSTER = 57402
const COALESCE = 57403
const COLLATE = 57404
const COLLATION = 57405
const COLUMN = 57406
const COLUMNS = 57407
const COMMIT = 57408
const COMMITTED = 57409
const CONCAT = 57410
const CONFLICT = 57411
const CONSTRAINT = 57412
const CONSTRAINTS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPLAIN = 57453
const EXTRACT = 57454
const EXTRACT_DURATION = 57455
const FALSE = 57456
const FAMILY = 57457
const FETCH = 57458
const FILTER = 57459
const FIRST = 57460
const FLOAT = 57461
const FLOAT4 = 57462
const FLOAT8 = 57463
const FLOORDIV = 57464
const FOLLOWING = 57465
const FOR = 57466
const FORCE_INDEX = 57467
const FOREIGN = 57468
const FROM = 57469
const FULL = 57470
const GRANT = 57471
const GRANTS = 57472
const GREATEST = 57473
const GROUP = 57474
const GROUPING = 57475
const HAVING = 57476
const HELP = 57477
const HIGH = 57478
const HOUR = 57479
const INCREMENTAL = 57480
const IF = 57481
const IFNULL = 57482
const ILIKE = 57483
const IN = 57484
const INTERLEAVE = 57485
const INDEX = 57486
const INDEXES = 57487
const INITIALLY = 57488
const INNER = 57489
const INSERT = 57490
const INT = 57491
const INT2VECTOR = 57492
const INT2 = 57493
const INT4 = 57494
const INT8 = 57495
const INT64 = 57496
const INTEGER = 57497
const INTERSECT = 57498
const INTERVAL = 57499
const INTO = 57500
const IS = 57501
const ISOLATION = 57502
const JOB = 57503
const JOBS = 57504
const JOIN = 57505
const KEY = 57506
const KEYS = 57507
const KV = 57508
const LATERAL = 57509
const LC_CTYPE = 57510
const LC_COLLATE = 57511
const LEADING = 57512
const LEAST = 57513
const LEFT = 57514
const LEVEL = 57515
const LIKE = 57516
const LIMIT = 57517
const LOCAL = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const LOW = 57521
const LSHIFT = 57522
const MATCH = 57523
const MINUTE = 57524
const MONTH = 57525
const NAN = 57526
const NAME = 57527
const NAMES = 57528
const NATURAL = 57529
const NEXT = 57530
const NO = 57531
const NO_INDEX_JOIN = 57532
const NORMAL = 57533
const NOT = 57534
const NOTHING = 57535
const NULL = 57536
const NULLIF = 57537
const NULLS = 57538
const NUMERIC = 57539
const OF = 57540
const OFF = 57541
const OFFSET = 57542
const OID = 57543
const ON = 57544
const ONLY = 57545
const OPTIONS = 57546
const OR = 57547
const ORDER = 57548
const ORDINALITY = 57549
const OUT = 57550
const OUTER = 57551
const OVER = 57552
const OVERLAPS = 57553
const OVERLAY = 57554
const PARENT = 57555
const PARTIAL = 57556
const PARTITION = 57557
const PASSWORD = 57558
const PAUSE = 57559
const PLACING = 57560
const PLANS = 57561
const POSITION = 57562
const PRECEDING = 57563
const PRECISION = 57564
const PREPARE = 57565
const PRIMARY = 57566
const PRIORITY = 57567
const QUERIES = 57568
const QUERY = 57569
const RANGE = 57570
const READ = 57571
const REAL = 57572
const RECURSIVE = 57573
const REF = 57574
const REFERENCES = 57575
const REGCLASS = 57576
const REGPROC = 57577
const REGPROCEDURE = 57578
const REGNAMESPACE = 57579
const REGTYPE = 57580
const RENAME = 57581
const REPEATABLE = 57582
const RELEASE = 57583
const RESET = 57584
const RESTORE = 57585
const RESTRICT = 57586
const RESUME = 57587
const RETURNING = 57588
const REVOKE = 57589
const RIGHT = 57590
const ROLLBACK = 57591
const ROLLUP = 57592
const ROW = 57593
const ROWS = 57594
const RSHIFT = 57595
const SAVEPOINT = 57596
const SCATTER = 57597
const SEARCH = 57598
const SECOND = 57599
const SELECT = 57600
const SEQUENCES = 57601
const SERIAL = 57602
const SERIALIZABLE = 57603
const SESSION = 57604
const SESSIONS = 57605
const SESSION_USER = 57606
const SET = 57607
const SETTING = 57608
const SETTINGS = 57609
const SHOW = 57610
const SIMILAR = 57611
const SIMPLE = 57612
const SMALLINT = 57613
const SMALLSERIAL = 57614
const SNAPSHOT = 57615
const SOME = 57616
const SPLIT = 57617
const SQL = 57618
const START = 57619
const STATUS = 57620
const STDIN = 57621
const STRICT = 57622
const STRING = 57623
const STORING = 57624
const SUBSTRING = 57625
const SYMMETRIC = 57626
const SYSTEM = 57627
const TABLE = 57628
const TABLES = 57629
const TEMP = 57630
const TEMPLATE = 57631
const TEMPORARY = 57632
const TESTING_RANGES = 57633
const TESTING_RELOCATE = 57634
const TEXT = 57635
const THEN = 57636
const TIME = 57637
const TIMESTAMP = 57638
const TIMESTAMPTZ = 57639
const TO = 57640
const TRAILING = 57641
const TRACE = 57642
const TRANSACTION = 57643
const TREAT = 57644
const TRIM = 57645
const TRUE = 57646
const TRUNCATE = 57647
const TYPE = 57648
const UNBOUNDED = 57649
const UNCOMMITTED = 57650
const UNION = 57651
const UNIQUE = 57652
const UNKNOWN = 57653
const UPDATE = 57654
const UPSERT = 57655
const USE = 57656
const USER = 57657
const USERS = 57658
const USING = 57659
const UUID = 57660
const VALID = 57661
const VALIDATE = 57662
const VALUE = 57663
const VALUES = 57664
const VARCHAR = 57665
const VARIADIC = 57666
const VIEW = 57667
const VARYING = 57668
const WHEN = 57669
const WHERE = 57670
const WINDOW = 57671
const WITH = 57672
const WITHIN = 57673
const WITHOUT = 57674
const WRITE = 57675
const YEAR = 57676
const ZONE = 57677
const NOT_LA = 57678
const WITH_LA = 57679
const AS_LA = 57680
const POSTFIXOP = 57681
const UMINUS = 57682

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"TS_MATCH",
	"JSON_LEFT_CONTAINS",
	"JSON_RIGHT_CONTAINS",
	"JSON_EXTRACT",
	"JSON_EXTRACT_TEXT",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5934

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 33,
	359, 33,
	-2, 506,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 66,
	1, 478,
	202, 478,
	246, 478,
	355, 478,
	357, 478,
	359, 478,
	-2, 488,
	-1, 112,
	1, 481,
	202, 481,
	246, 481,
	355, 481,
	357, 481,
	359, 481,
	-2, 487,
	-1, 130,
	1, 33,
	359, 33,
	-2, 506,
	-1, 511,
	127, 1092,
	298, 1092,
	341, 1092,
	358, 1092,
	-2, 0,
	-1, 522,
	1, 215,
	359, 215,
	-2, 1097,
	-1, 534,
	116, 516,
	175, 516,
	200, 516,
	-2, 484,
	-1, 542,
	116, 515,
	175, 515,
	200, 515,
	-2, 482,
	-1, 695,
	356, 1024,
	-2, 1017,
	-1, 696,
	356, 1025,
	-2, 1018,
	-1, 702,
	5, 686,
	356, 686,
	-2, 1222,
	-1, 727,
	5, 645,
	-2, 1192,
	-1, 728,
	5, 680,
	356, 680,
	-2, 1194,
	-1, 729,
	5, 655,
	-2, 1195,
	-1, 730,
	5, 654,
	-2, 1196,
	-1, 731,
	5, 680,
	356, 680,
	-2, 1199,
	-1, 732,
	5, 680,
	356, 680,
	-2, 1200,
	-1, 733,
	5, 681,
	-2, 1203,
	-1, 734,
	5, 637,
	-2, 1204,
	-1, 735,
	5, 637,
	-2, 1205,
	-1, 736,
	5, 662,
	-2, 1209,
	-1, 737,
	5, 647,
	-2, 1210,
	-1, 738,
	5, 648,
	-2, 1211,
	-1, 739,
	5, 638,
	-2, 1216,
	-1, 740,
	5, 639,
	-2, 1217,
	-1, 741,
	5, 640,
	-2, 1218,
	-1, 742,
	5, 641,
	-2, 1219,
	-1, 743,
	5, 642,
	-2, 1220,
	-1, 744,
	5, 643,
	-2, 1221,
	-1, 745,
	5, 637,
	-2, 1226,
	-1, 746,
	5, 646,
	-2, 1231,
	-1, 747,
	5, 644,
	-2, 1234,
	-1, 748,
	5, 678,
	356, 678,
	-2, 1236,
	-1, 749,
	5, 682,
	-2, 1239,
	-1, 750,
	5, 684,
	-2, 1240,
	-1, 751,
	5, 677,
	356, 677,
	-2, 1245,
	-1, 795,
	216, 504,
	-2, 378,
	-1, 800,
	116, 515,
	175, 515,
	200, 515,
	-2, 485,
	-1, 903,
	107, 488,
	116, 488,
	156, 488,
	175, 488,
	200, 488,
	206, 488,
	309, 488,
	-2, 572,
	-1, 985,
	107, 488,
	116, 488,
	156, 488,
	175, 488,
	200, 488,
	206, 488,
	309, 488,
	-2, 810,
	-1, 994,
	356, 1001,
	-2, 989,
	-1, 1239,
	1, 573,
	75, 573,
	107, 573,
	116, 573,
	128, 573,
	132, 573,
	134, 573,
	147, 573,
	156, 573,
	163, 573,
	172, 573,
	175, 573,
	187, 573,
	200, 573,
	202, 573,
	206, 573,
	246, 573,
	248, 573,
	309, 573,
	317, 573,
	328, 573,
	329, 573,
	338, 573,
	355, 573,
	357, 573,
	359, 573,
	360, 573,
	-2, 572,
	-1, 1288,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 721,
	-1, 1289,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 722,
	-1, 1290,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 723,
	-1, 1294,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 727,
	-1, 1295,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 728,
	-1, 1296,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 729,
	-1, 1299,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 734,
	-1, 1305,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 736,
	-1, 1307,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 740,
	-1, 1308,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 741,
	-1, 1309,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 742,
	-1, 1310,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 743,
	-1, 1311,
	19, 0,
	20, 0,
	21, 0,
	-2, 744,
	-1, 1312,
	19, 0,
	20, 0,
	21, 0,
	-2, 745,
	-1, 1313,
	19, 0,
	20, 0,
	21, 0,
	-2, 746,
	-1, 1314,
	22, 0,
	23, 0,
	-2, 747,
	-1, 1315,
	22, 0,
	23, 0,
	-2, 748,
	-1, 1341,
	211, 883,
	-2, 886,
	-1, 1378,
	127, 923,
	356, 1024,
	-2, 1017,
	-1, 1379,
	127, 924,
	-2, 1188,
	-1, 1380,
	127, 925,
	-2, 1096,
	-1, 1381,
	127, 926,
	-2, 1060,
	-1, 1382,
	127, 927,
	-2, 1077,
	-1, 1383,
	127, 928,
	-2, 1095,
	-1, 1384,
	127, 929,
	-2, 1147,
	-1, 1579,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 735,
	-1, 1580,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 737,
	-1, 1585,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 738,
	-1, 1603,
	211, 882,
	-2, 885,
	-1, 1802,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 739,
	-1, 1807,
	159, 0,
	-2, 760,
	-1, 1817,
	211, 884,
	-2, 887,
	-1, 1859,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 787,
	-1, 1860,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 788,
	-1, 1861,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 789,
	-1, 1865,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 793,
	-1, 1866,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 794,
	-1, 1867,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 795,
	-1, 1972,
	159, 0,
	-2, 761,
	-1, 1975,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 764,
	-1, 1976,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 766,
	-1, 2083,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 765,
	-1, 2084,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	141, 0,
	142, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 767,
	-1, 2091,
	159, 0,
	-2, 796,
	-1, 2157,
	159, 0,
	-2, 797,
	-1, 2229,
	41, 0,
	141, 0,
	174, 0,
	269, 0,
	336, 0,
	342, 0,
	-2, 1191,
}

const sqlPrivate = 57344

const sqlLast = 31907

var sqlAct = [...]int{

	696, 2236, 1894, 2228, 2237, 2273, 2113, 2227, 2205, 2238,
	1122, 1247, 1836, 1255, 1442, 392, 2040, 2145, 1917, 2098,
	1129, 2026, 543, 1901, 2011, 1035, 617, 1234, 1723, 639,
	65, 2065, 1669, 672, 1036, 1725, 1441, 1561, 139, 1085,
	1464, 139, 1446, 1547, 901, 686, 897, 1497, 139, 1948,
	1445, 1454, 694, 1528, 1668, 1267, 139, 1364, 1614, 394,
	1125, 139, 139, 1527, 1117, 139, 558, 1339, 139, 990,
	1256, 1534, 884, 1696, 1235, 139, 550, 110, 877, 1900,
	1241, 1766, 693, 368, 1187, 1189, 1160, 1479, 1111, 1086,
	1483, 774, 1349, 666, 1488, 1327, 915, 1324, 376, 24,
	807, 878, 1404, 773, 366, 1358, 809, 561, 1375, 981,
	562, 1449, 665, 802, 653, 621, 567, 1021, 1249, 1025,
	1222, 888, 609, 1209, 139, 139, 499, 519, 816, 815,
	139, 112, 1109, 110, 139, 139, 553, 817, 131, 113,
	688, 861, 517, 2027, 384, 548, 647, 671, 135, 631,
	919, 624, 860, 607, 503, 515, 1780, 1602, 821, 1781,
	1248, 1119, 122, 1119, 2259, 1119, 2250, 910, 2249, 1263,
	2247, 1263, 542, 2025, 2245, 1361, 547, 910, 2199, 547,
	140, 1422, 1263, 619, 2173, 521, 2162, 2025, 350, 2161,
	2159, 898, 1572, 1422, 502, 1735, 2152, 1573, 895, 910,
	496, 1211, 2128, 1143, 551, 2025, 1252, 110, 109, 2125,
	2124, 2123, 910, 2025, 910, 2190, 1606, 2111, 122, 122,
	2025, 1607, 1362, 2085, 931, 932, 1422, 2073, 2070, 24,
	910, 910, 2062, 1428, 2061, 1263, 111, 1263, 2024, 395,
	1769, 2025, 535, 55, 1242, 56, 931, 932, 1999, 1210,
	534, 1263, 934, 1977, 1974, 1961, 1263, 1422, 910, 1811,
	1800, 689, 1263, 1246, 109, 109, 1769, 1363, 1360, 58,
	1795, 570, 1776, 1246, 934, 1777, 933, 622, 611, 1495,
	1736, 1872, 948, 1639, 1640, 125, 1657, 1658, 1659, 1814,
	1605, 1706, 111, 111, 910, 1263, 568, 910, 933, 55,
	55, 56, 56, 1686, 1971, 1684, 1687, 1683, 1263, 1682,
	1263, 1603, 1263, 129, 1263, 752, 1550, 1524, 1430, 1263,
	910, 1263, 1242, 1707, 1421, 58, 58, 1422, 1262, 1245,
	1263, 1263, 1246, 1613, 1216, 927, 939, 1215, 928, 1482,
	1438, 1654, 1365, 1093, 1428, 1343, 873, 629, 657, 128,
	616, 130, 1120, 564, 1120, 139, 1120, 123, 939, 635,
	139, 902, 1115, 125, 124, 1542, 788, 2028, 567, 2251,
	2243, 125, 2226, 2212, 396, 2154, 2126, 2004, 2000, 1992,
	1991, 828, 1990, 114, 1335, 1986, 1985, 1984, 1983, 1947,
	1892, 129, 125, 1887, 949, 1645, 1490, 1966, 548, 129,
	1882, 1881, 116, 1880, 1822, 931, 932, 1705, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 1359,
	129, 1710, 1691, 1688, 1676, 1667, 954, 128, 1638, 1635,
	1572, 569, 1660, 934, 1210, 128, 970, 1634, 1632, 1619,
	1618, 1426, 636, 123, 1554, 1372, 1371, 1370, 125, 125,
	124, 828, 1176, 1655, 1239, 998, 128, 933, 116, 116,
	991, 114, 114, 948, 123, 1128, 900, 950, 1141, 1251,
	1136, 124, 1118, 899, 1838, 648, 129, 129, 654, 827,
	1639, 1640, 2202, 2189, 2188, 2181, 2175, 2171, 2149, 1336,
	114, 2108, 2093, 2082, 2031, 638, 2023, 2007, 1997, 1915,
	1913, 139, 1912, 1911, 1908, 1898, 1890, 649, 1806, 1784,
	1772, 1759, 128, 128, 1757, 139, 1711, 939, 1714, 1666,
	123, 123, 1628, 567, 1627, 139, 1656, 124, 124, 139,
	139, 139, 1624, 139, 1599, 1594, 958, 971, 139, 139,
	139, 139, 139, 931, 932, 1329, 114, 114, 568, 1552,
	1523, 1965, 1026, 1029, 969, 1414, 813, 801, 944, 942,
	943, 935, 936, 937, 938, 940, 941, 1369, 1227, 956,
	2148, 934, 1121, 567, 1033, 949, 1019, 1018, 1017, 1016,
	931, 932, 1015, 935, 936, 937, 938, 940, 941, 1014,
	1013, 1012, 1645, 800, 1011, 933, 1639, 1640, 1010, 1009,
	955, 1008, 1007, 139, 139, 139, 139, 139, 934, 139,
	1006, 784, 1651, 1652, 1653, 1005, 1004, 1650, 1648, 1649,
	1641, 1642, 1643, 1644, 1646, 1647, 139, 139, 1003, 567,
	139, 1002, 933, 1711, 995, 984, 394, 114, 139, 834,
	790, 618, 876, 882, 768, 139, 139, 139, 950, 139,
	759, 911, 805, 651, 2006, 939, 548, 139, 772, 764,
	931, 932, 833, 635, 959, 2005, 1979, 1779, 917, 1775,
	769, 637, 649, 1228, 1639, 1640, 991, 1694, 1693, 905,
	982, 900, 535, 569, 2164, 1726, 1969, 810, 934, 781,
	534, 783, 881, 565, 1478, 834, 1782, 110, 1574, 1242,
	902, 548, 1477, 568, 824, 825, 1690, 1689, 1645, 1578,
	780, 868, 933, 949, 793, 1540, 796, 765, 908, 865,
	1000, 754, 871, 804, 804, 896, 832, 1639, 1640, 864,
	1099, 957, 782, 1126, 945, 946, 947, 960, 1197, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 1697, 2066,
	862, 867, 810, 568, 649, 2001, 1248, 1839, 1195, 1031,
	648, 567, 874, 139, 1032, 1610, 1350, 1022, 139, 1568,
	1931, 856, 939, 622, 906, 1196, 2218, 904, 909, 2266,
	2265, 2151, 567, 567, 2055, 916, 950, 532, 1431, 394,
	1702, 918, 649, 920, 920, 929, 596, 921, 139, 1190,
	602, 1191, 930, 601, 1116, 597, 997, 1127, 851, 568,
	857, 356, 605, 2143, 931, 932, 395, 1641, 1642, 1643,
	1644, 1646, 1647, 1499, 2142, 994, 1455, 834, 2141, 1942,
	949, 1190, 900, 1191, 2140, 1946, 1945, 139, 569, 1645,
	1361, 139, 934, 139, 139, 139, 139, 139, 139, 1023,
	1024, 1928, 1927, 139, 1889, 1027, 1623, 139, 139, 1132,
	1100, 1622, 781, 357, 139, 1030, 933, 1135, 1465, 604,
	1138, 1621, 1140, 1620, 139, 1192, 1581, 139, 942, 943,
	935, 936, 937, 938, 940, 941, 753, 1362, 569, 1521,
	139, 1208, 1520, 1457, 1518, 1089, 1306, 1655, 1266, 394,
	2150, 1087, 139, 950, 863, 782, 628, 1192, 139, 1963,
	1088, 139, 1418, 1092, 1230, 1112, 1417, 1105, 1499, 1277,
	1185, 1104, 941, 139, 1498, 139, 939, 110, 525, 567,
	546, 1134, 1363, 1360, 394, 1643, 1644, 1646, 1647, 1184,
	1789, 568, 1229, 1219, 569, 1326, 1147, 1790, 2115, 1276,
	1558, 396, 913, 535, 1146, 1177, 535, 535, 1166, 2240,
	1326, 1156, 568, 568, 1157, 1158, 1268, 1275, 1167, 395,
	1656, 1171, 1172, 1173, 1174, 1175, 853, 1639, 1640, 545,
	767, 1170, 2196, 2193, 1181, 1182, 528, 922, 1933, 1350,
	1186, 1456, 2276, 1365, 2256, 2265, 1206, 935, 936, 937,
	938, 940, 941, 1832, 110, 1214, 2197, 1365, 1566, 848,
	533, 603, 1220, 1224, 1225, 529, 1647, 1562, 1250, 837,
	1250, 1042, 1164, 1764, 917, 530, 701, 359, 358, 547,
	540, 1701, 1264, 1480, 1481, 1201, 1761, 622, 887, 654,
	1254, 854, 1108, 1265, 1755, 2241, 849, 1190, 1204, 1191,
	606, 1200, 1562, 1203, 2271, 1240, 838, 1940, 1829, 836,
	2178, 1347, 1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647,
	1259, 1198, 1119, 1703, 2255, 526, 569, 1505, 1365, 395,
	1333, 1183, 1020, 1460, 1359, 1331, 2089, 539, 1199, 1645,
	1337, 891, 1334, 1193, 855, 1434, 2100, 569, 569, 756,
	979, 2242, 777, 1830, 396, 1626, 1436, 1223, 1238, 568,
	894, 110, 547, 1893, 395, 360, 394, 1385, 1420, 139,
	1922, 382, 139, 1192, 2239, 1193, 889, 1437, 2274, 139,
	2264, 1439, 544, 2262, 122, 892, 2039, 139, 139, 1435,
	139, 527, 139, 139, 394, 139, 139, 1655, 1425, 1462,
	890, 1934, 1496, 937, 938, 940, 941, 2116, 842, 1472,
	1474, 762, 656, 1557, 139, 1536, 1427, 778, 385, 820,
	139, 779, 2254, 1103, 1102, 1995, 564, 559, 1365, 2135,
	109, 2134, 2106, 2275, 139, 139, 139, 1027, 2168, 1030,
	390, 139, 1583, 1042, 1042, 139, 386, 1432, 1930, 1024,
	1023, 1746, 2054, 139, 2277, 755, 139, 1325, 111, 2053,
	1407, 893, 139, 394, 396, 55, 1742, 56, 139, 139,
	1656, 1525, 139, 387, 1463, 1133, 1530, 139, 1529, 538,
	139, 1123, 1828, 1500, 1440, 1322, 2284, 139, 681, 1506,
	1508, 58, 389, 1471, 569, 2272, 2206, 139, 1470, 396,
	1320, 1468, 139, 1469, 139, 110, 1180, 1544, 541, 1476,
	1188, 139, 1106, 1120, 1548, 1094, 649, 139, 537, 1152,
	1918, 1532, 1533, 1543, 1996, 1538, 136, 819, 1868, 351,
	1535, 2051, 548, 1491, 1553, 2041, 353, 1564, 1531, 810,
	810, 1493, 1570, 2107, 365, 1513, 395, 819, 1516, 495,
	136, 1539, 1503, 501, 1303, 1716, 501, 361, 2052, 1519,
	1511, 1487, 1526, 523, 1641, 1642, 1643, 1644, 1646, 1647,
	1316, 1522, 1467, 804, 395, 804, 1079, 1332, 1317, 1549,
	1318, 1492, 810, 1494, 1323, 891, 818, 2283, 1715, 1153,
	1486, 1193, 649, 1537, 505, 1107, 1218, 362, 1567, 1217,
	810, 497, 388, 649, 894, 2019, 818, 1575, 494, 622,
	548, 1577, 610, 610, 125, 622, 622, 506, 351, 622,
	1221, 1869, 136, 632, 116, 1612, 363, 1870, 364, 892,
	2050, 820, 777, 646, 645, 545, 797, 1591, 1895, 2020,
	1098, 2008, 129, 395, 1560, 1390, 1556, 505, 2104, 916,
	1584, 1582, 1589, 887, 1301, 1304, 391, 1949, 916, 641,
	385, 640, 1767, 132, 1368, 1671, 2092, 1994, 380, 32,
	506, 3, 2105, 1178, 1598, 1670, 548, 507, 128, 567,
	139, 396, 390, 1096, 1805, 1788, 123, 1300, 386, 567,
	1319, 1609, 1633, 124, 1593, 1097, 1559, 1321, 1517, 379,
	31, 139, 1514, 139, 139, 893, 891, 1692, 1429, 396,
	139, 1244, 114, 139, 859, 387, 858, 139, 852, 847,
	846, 1709, 1586, 1712, 845, 894, 844, 843, 840, 1708,
	507, 1073, 1587, 760, 389, 644, 1592, 139, 2015, 1169,
	2016, 889, 375, 28, 1001, 834, 850, 139, 139, 139,
	892, 595, 1367, 139, 1673, 1674, 1675, 139, 139, 139,
	139, 139, 931, 932, 2235, 890, 565, 560, 1698, 139,
	2018, 139, 139, 1700, 1699, 2203, 508, 1704, 396, 2021,
	378, 17, 1302, 1728, 1729, 2049, 1730, 1938, 139, 1708,
	934, 372, 13, 1936, 139, 1743, 633, 630, 634, 32,
	1929, 1722, 627, 139, 139, 1466, 1459, 1717, 374, 16,
	1720, 373, 14, 1731, 933, 698, 1205, 1785, 1202, 1733,
	1194, 1778, 1145, 139, 139, 1737, 893, 1144, 1142, 508,
	31, 1738, 1139, 1796, 371, 12, 377, 10, 370, 8,
	1137, 1774, 1588, 642, 388, 1783, 1754, 1819, 351, 1590,
	110, 1724, 504, 1793, 509, 1771, 2017, 1765, 1768, 568,
	1721, 1756, 1770, 2077, 1758, 369, 4, 1484, 822, 568,
	1808, 598, 599, 28, 939, 614, 2266, 139, 1786, 1787,
	1114, 2079, 926, 1510, 1734, 510, 1499, 1798, 1824, 1825,
	1826, 1791, 1509, 1797, 1739, 1718, 1072, 1799, 391, 1499,
	381, 1794, 2185, 1073, 1073, 1507, 2028, 509, 931, 932,
	839, 17, 2156, 1950, 826, 1268, 1843, 1515, 1512, 1763,
	1815, 2191, 13, 2037, 1268, 1848, 1461, 1818, 1485, 1831,
	1833, 1834, 949, 1424, 1042, 622, 1842, 1840, 510, 16,
	823, 1845, 14, 1458, 1253, 1847, 1207, 615, 1091, 1034,
	2269, 1875, 2282, 2072, 931, 932, 1042, 1879, 139, 1981,
	933, 139, 1639, 1640, 498, 12, 1955, 10, 1891, 8,
	1259, 622, 1888, 139, 1876, 1835, 567, 931, 932, 1914,
	830, 1899, 934, 830, 829, 1695, 394, 139, 1685, 763,
	1545, 1419, 1416, 1415, 569, 1357, 4, 988, 831, 2201,
	2099, 1925, 1827, 523, 569, 950, 933, 1907, 1896, 1719,
	1919, 998, 996, 351, 1906, 1909, 1042, 523, 795, 523,
	139, 798, 766, 139, 524, 2114, 523, 523, 351, 811,
	632, 383, 1168, 394, 139, 139, 1041, 1953, 1921, 567,
	841, 1541, 1920, 1226, 1905, 2195, 1987, 1625, 1957, 1960,
	2144, 2088, 1366, 1941, 999, 48, 1903, 675, 2009, 1897,
	1448, 1959, 1447, 397, 1101, 1937, 697, 1939, 1072, 1072,
	1952, 552, 1954, 1951, 1956, 1924, 1376, 1269, 1962, 757,
	699, 1039, 1973, 700, 1968, 1040, 1028, 687, 1037, 139,
	652, 501, 351, 351, 870, 351, 1257, 610, 943, 935,
	936, 937, 938, 940, 941, 834, 1042, 1330, 1348, 1075,
	1608, 992, 925, 667, 351, 351, 679, 678, 136, 1345,
	758, 1546, 1565, 1964, 659, 1151, 351, 1475, 1993, 1148,
	1935, 987, 531, 351, 351, 351, 1636, 923, 650, 1397,
	1389, 1386, 1042, 1042, 1967, 136, 789, 883, 980, 1258,
	787, 1042, 1042, 1571, 1423, 875, 568, 1159, 613, 139,
	612, 1443, 785, 139, 139, 1095, 395, 622, 1433, 973,
	567, 972, 600, 2032, 2170, 2029, 776, 2035, 139, 139,
	139, 775, 1124, 1745, 1042, 2270, 2184, 139, 1932, 139,
	2217, 139, 139, 139, 1907, 127, 139, 139, 126, 2163,
	2036, 1906, 2097, 1555, 2042, 73, 30, 1907, 1041, 1041,
	29, 1907, 2044, 395, 1906, 1074, 139, 92, 1906, 568,
	91, 90, 2048, 89, 88, 87, 86, 85, 2022, 1090,
	2078, 1905, 84, 83, 2069, 82, 2043, 81, 80, 79,
	78, 2034, 77, 76, 1905, 2038, 2080, 2074, 1905, 2071,
	75, 136, 520, 72, 71, 2087, 523, 70, 69, 2075,
	27, 139, 23, 394, 139, 95, 2045, 22, 20, 21,
	26, 25, 139, 2094, 18, 15, 9, 19, 2102, 394,
	53, 1075, 1075, 54, 52, 51, 1131, 50, 11, 46,
	139, 569, 45, 567, 2119, 44, 43, 42, 41, 2117,
	139, 396, 7, 94, 39, 38, 6, 917, 93, 5,
	106, 103, 105, 102, 104, 107, 99, 139, 1042, 1907,
	100, 1907, 139, 2132, 101, 523, 1906, 2130, 1906, 523,
	139, 136, 523, 523, 523, 523, 523, 98, 2058, 97,
	2137, 1179, 2133, 36, 2064, 523, 523, 35, 396, 2147,
	568, 139, 501, 2112, 569, 139, 1905, 34, 1905, 2131,
	1233, 2155, 610, 548, 33, 632, 2174, 2118, 2172, 2158,
	2120, 2138, 2139, 2, 1, 2167, 2166, 658, 351, 2179,
	761, 567, 0, 0, 0, 2180, 2127, 1074, 1074, 0,
	1237, 139, 139, 2176, 1073, 2177, 351, 0, 0, 1243,
	0, 2183, 0, 0, 0, 0, 0, 0, 0, 791,
	792, 351, 0, 1261, 2194, 0, 1073, 0, 0, 2110,
	0, 0, 139, 1639, 1640, 2208, 139, 0, 0, 139,
	2209, 2200, 0, 2214, 0, 0, 394, 2129, 0, 0,
	2210, 139, 0, 395, 139, 1340, 0, 2182, 0, 0,
	2216, 2219, 1344, 139, 2223, 2233, 1352, 2225, 2222, 395,
	0, 0, 2244, 0, 0, 2224, 0, 2234, 1377, 1377,
	1388, 0, 1399, 568, 2246, 0, 1073, 1907, 1411, 1412,
	1413, 1654, 0, 2253, 1906, 569, 139, 2252, 0, 0,
	0, 0, 0, 2263, 0, 879, 879, 2261, 2165, 0,
	0, 885, 0, 0, 2268, 2267, 0, 0, 0, 1042,
	0, 2215, 0, 0, 1905, 0, 0, 2211, 0, 2279,
	0, 2280, 2278, 2281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1645, 0, 0, 0, 0,
	0, 0, 0, 974, 975, 976, 977, 978, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 1072,
	0, 568, 2019, 993, 0, 2012, 1073, 1042, 0, 0,
	0, 0, 0, 2010, 0, 1038, 2213, 2014, 396, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 1655, 396, 0, 2020, 0, 0, 0,
	0, 0, 1073, 1073, 0, 1042, 0, 351, 569, 0,
	1444, 1073, 1073, 0, 0, 0, 395, 632, 2013, 0,
	0, 0, 0, 0, 0, 523, 523, 0, 523, 0,
	351, 351, 0, 1473, 632, 0, 0, 0, 0, 0,
	0, 1072, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 0, 676, 66, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 1656, 0, 0, 0,
	0, 0, 351, 351, 351, 0, 0, 0, 0, 1504,
	0, 0, 0, 351, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 351, 2015, 569, 2016, 0, 1041,
	351, 1149, 0, 1154, 0, 0, 351, 351, 0, 1161,
	351, 0, 66, 0, 0, 1237, 0, 0, 1237, 0,
	0, 1041, 0, 0, 0, 1551, 0, 2018, 0, 0,
	0, 1072, 0, 0, 0, 351, 2021, 0, 0, 0,
	351, 0, 1569, 0, 0, 0, 0, 1038, 1038, 351,
	0, 396, 0, 0, 0, 1489, 0, 1650, 1648, 1649,
	1641, 1642, 1643, 1644, 1646, 1647, 536, 1072, 1072, 0,
	549, 0, 1075, 0, 0, 0, 1072, 1072, 1073, 0,
	0, 1041, 0, 0, 0, 623, 66, 0, 0, 0,
	1597, 0, 0, 0, 1075, 0, 0, 1600, 0, 0,
	0, 0, 0, 1639, 1640, 0, 0, 0, 0, 1072,
	0, 0, 0, 2017, 0, 1616, 1617, 0, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	0, 1305, 0, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 0, 0, 1075, 0, 1665, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 1678, 0, 0,
	0, 1041, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1373, 1374,
	0, 0, 1387, 0, 1398, 1400, 1405, 1408, 1409, 1410,
	1074, 0, 0, 0, 0, 931, 932, 1041, 1041, 0,
	0, 961, 962, 963, 0, 1645, 1041, 1041, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 970, 0, 0, 1131,
	0, 1131, 1713, 1072, 1075, 1155, 0, 0, 523, 1041,
	0, 351, 0, 0, 0, 1727, 0, 933, 0, 0,
	1074, 0, 0, 948, 0, 0, 0, 0, 0, 1073,
	1595, 1596, 0, 1655, 0, 351, 0, 0, 0, 0,
	1075, 1075, 0, 0, 0, 351, 1740, 1741, 0, 1075,
	1075, 1504, 0, 0, 0, 1747, 1748, 1750, 1752, 1753,
	0, 0, 0, 0, 0, 0, 0, 1760, 0, 1762,
	351, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 1075, 549, 0, 0, 351, 1073, 0, 0,
	0, 0, 1237, 0, 0, 0, 958, 971, 1662, 1663,
	1664, 632, 1237, 0, 0, 0, 1656, 0, 0, 0,
	1074, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1812, 351, 351, 0, 0, 1073, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 949, 0, 0, 0, 122,
	0, 0, 0, 1041, 0, 0, 1074, 1074, 0, 0,
	0, 0, 0, 879, 0, 1074, 1074, 0, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 1873, 1074, 0,
	0, 1563, 0, 0, 1072, 1391, 0, 0, 1883, 1649,
	1641, 1642, 1643, 1644, 1646, 1647, 1576, 0, 950, 0,
	0, 0, 0, 111, 0, 0, 1075, 0, 0, 0,
	55, 0, 56, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1579, 1580, 0, 58, 0, 0, 1585,
	0, 0, 1072, 0, 0, 0, 1504, 0, 0, 1131,
	1902, 0, 0, 0, 0, 0, 536, 0, 0, 0,
	0, 1916, 0, 0, 0, 0, 0, 0, 1943, 0,
	1944, 0, 0, 0, 0, 1926, 1604, 0, 1803, 1804,
	1072, 957, 0, 1611, 0, 0, 1615, 960, 1038, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	0, 0, 1629, 0, 0, 0, 0, 0, 351, 0,
	1038, 632, 1074, 0, 0, 0, 1639, 1640, 0, 0,
	0, 0, 1237, 632, 1041, 0, 66, 0, 986, 0,
	0, 903, 0, 0, 1405, 1405, 1405, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 0, 1871, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	1038, 0, 0, 0, 983, 0, 985, 1988, 0, 0,
	0, 0, 1041, 989, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1732, 0, 0, 0, 0, 1161, 0, 0, 0, 0,
	1041, 0, 0, 128, 0, 0, 0, 0, 1645, 0,
	0, 123, 0, 0, 0, 0, 0, 1902, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 632, 0, 0,
	1902, 632, 1444, 0, 1902, 1075, 0, 367, 0, 0,
	1038, 2068, 0, 0, 0, 0, 2046, 2047, 1504, 1773,
	0, 0, 0, 0, 0, 2056, 0, 2057, 0, 351,
	2059, 2060, 0, 0, 2063, 351, 1655, 0, 0, 0,
	0, 0, 0, 1075, 0, 879, 1038, 1038, 0, 1391,
	1391, 0, 2076, 1074, 632, 1038, 1038, 885, 0, 0,
	0, 1801, 0, 0, 1802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1807, 536, 0, 0,
	536, 536, 0, 0, 0, 1816, 0, 0, 1038, 0,
	0, 0, 2122, 1820, 0, 0, 1576, 0, 0, 2101,
	0, 0, 2103, 0, 0, 0, 66, 0, 0, 1656,
	351, 1074, 1902, 0, 1902, 0, 1844, 1391, 1391, 1391,
	1846, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 623, 0, 0, 0, 1074,
	0, 0, 0, 1877, 1878, 2146, 0, 0, 0, 0,
	1237, 0, 1884, 1885, 1886, 0, 0, 0, 2153, 0,
	0, 0, 0, 0, 0, 66, 0, 66, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 351,
	0, 0, 0, 1131, 0, 0, 0, 1910, 0, 0,
	1650, 1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647, 0,
	2192, 0, 0, 0, 0, 1639, 1640, 2198, 1657, 1658,
	1659, 0, 1038, 0, 0, 0, 0, 1328, 0, 2186,
	2187, 0, 0, 0, 0, 0, 1970, 0, 0, 0,
	2091, 0, 1639, 1640, 0, 1657, 1658, 1659, 0, 2220,
	2221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2207, 0, 0, 1810, 632, 0, 2109, 351, 0, 0,
	1902, 0, 0, 1654, 0, 0, 0, 0, 0, 2146,
	0, 0, 351, 0, 0, 0, 0, 0, 1972, 0,
	66, 632, 1975, 1976, 0, 0, 0, 1978, 0, 0,
	1654, 0, 0, 0, 1980, 0, 1982, 1391, 1391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1989, 0, 2260, 0, 0, 1645, 0, 0,
	0, 1639, 1640, 0, 1657, 1658, 1659, 0, 2157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1809, 0, 1645, 1998, 1639, 1640, 0, 1657,
	1658, 1659, 0, 0, 1660, 0, 1391, 1391, 1391, 1391,
	1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
	1391, 1391, 1391, 1391, 1391, 1655, 1391, 2030, 0, 1654,
	0, 1660, 0, 0, 0, 0, 0, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 964, 965, 966,
	967, 968, 1655, 1038, 1654, 0, 0, 0, 0, 954,
	1639, 1640, 0, 1657, 1658, 1659, 934, 0, 0, 970,
	0, 0, 2067, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 1645, 0, 0, 0, 0, 0, 0,
	933, 0, 66, 2083, 2084, 66, 948, 0, 1656, 0,
	0, 0, 0, 931, 932, 0, 0, 623, 1645, 0,
	0, 1038, 0, 623, 623, 0, 0, 623, 1654, 0,
	1660, 0, 0, 0, 2096, 1656, 0, 0, 1661, 0,
	0, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1655, 0, 0, 0, 1660, 0, 549, 0, 1038,
	939, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1655, 0, 0, 958,
	971, 0, 1645, 0, 0, 0, 2136, 0, 0, 0,
	0, 0, 0, 0, 1651, 1652, 1653, 969, 0, 1650,
	1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647, 0, 0,
	1328, 0, 956, 0, 0, 885, 0, 0, 949, 1660,
	0, 1651, 1652, 1653, 1656, 939, 1650, 1648, 1649, 1641,
	1642, 1643, 1644, 1646, 1647, 985, 0, 0, 0, 0,
	1655, 2169, 0, 955, 0, 0, 0, 0, 0, 1656,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 959, 0, 0,
	1651, 1652, 1653, 1656, 0, 1650, 1648, 1649, 1641, 1642,
	1643, 1644, 1646, 1647, 0, 0, 0, 0, 0, 2232,
	2232, 0, 0, 0, 0, 1651, 1652, 1653, 0, 0,
	1650, 1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647, 0,
	0, 2248, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 2232, 0, 66, 0, 0, 66, 0, 1391,
	0, 0, 0, 0, 957, 0, 0, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 0, 0, 0, 0, 1391, 0, 0, 1681, 1651,
	1652, 1653, 2232, 0, 1650, 1648, 1649, 1641, 1642, 1643,
	1644, 1646, 1647, 0, 0, 0, 0, 0, 66, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 0, 0, 0, 944, 942, 943,
	935, 936, 937, 938, 940, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1391, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	684, 685, 682, 683, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 712, 677,
	0, 0, 0, 144, 145, 146, 295, 727, 297, 728,
	147, 729, 730, 0, 148, 301, 302, 149, 150, 680,
	711, 731, 732, 305, 0, 151, 723, 0, 703, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 704, 705, 707, 0, 706, 708,
	161, 162, 352, 163, 733, 164, 734, 735, 886, 165,
	0, 166, 0, 167, 0, 0, 726, 169, 0, 170,
	0, 0, 0, 668, 171, 172, 173, 713, 714, 691,
	0, 0, 174, 175, 736, 737, 738, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 724, 0, 317, 0,
	179, 180, 181, 182, 720, 722, 402, 0, 186, 0,
	183, 0, 401, 184, 739, 185, 740, 741, 742, 743,
	744, 0, 702, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 725, 405, 195, 406,
	0, 196, 0, 0, 197, 623, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 663, 0, 692,
	721, 207, 745, 208, 209, 0, 210, 0, 0, 211,
	0, 66, 212, 331, 408, 213, 409, 715, 214, 215,
	216, 217, 218, 0, 219, 716, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 746, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 669, 244, 0, 248,
	249, 250, 251, 125, 253, 337, 252, 254, 255, 709,
	256, 245, 246, 257, 411, 258, 747, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 748, 263, 717, 0,
	266, 129, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 749, 750, 0, 0, 274, 275, 718, 719, 690,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	710, 284, 0, 347, 285, 286, 287, 655, 751, 0,
	0, 288, 0, 0, 0, 123, 289, 290, 291, 292,
	293, 664, 124, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 660, 661, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 141, 142, 412, 143, 413,
	414, 415, 416, 294, 417, 418, 419, 420, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 421, 148,
	301, 302, 149, 150, 422, 423, 303, 304, 305, 424,
	151, 306, 425, 398, 426, 152, 153, 154, 985, 155,
	427, 156, 157, 158, 428, 399, 159, 160, 429, 430,
	432, 431, 433, 434, 435, 161, 162, 352, 163, 307,
	164, 308, 309, 436, 165, 437, 166, 438, 167, 439,
	440, 168, 169, 441, 170, 442, 0, 443, 310, 171,
	172, 173, 311, 312, 444, 445, 446, 174, 175, 313,
	314, 315, 0, 176, 447, 177, 448, 449, 400, 450,
	178, 316, 451, 317, 452, 179, 180, 181, 182, 318,
	319, 402, 453, 186, 454, 183, 455, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 456, 326, 457, 403,
	187, 188, 189, 404, 190, 191, 192, 458, 194, 193,
	459, 327, 405, 195, 406, 460, 196, 461, 462, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 463, 464, 465, 329, 207, 330, 208, 209,
	466, 210, 467, 468, 211, 469, 470, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 471, 219,
	333, 220, 334, 221, 472, 222, 223, 224, 225, 226,
	335, 227, 228, 473, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 474, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 475, 253,
	337, 252, 254, 255, 476, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 477, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 478, 266, 479, 267, 268, 269,
	270, 271, 272, 273, 480, 342, 343, 344, 481, 482,
	274, 275, 345, 346, 483, 276, 277, 278, 279, 484,
	485, 280, 281, 282, 283, 486, 284, 487, 347, 285,
	286, 287, 348, 349, 488, 489, 288, 490, 491, 492,
	493, 289, 290, 291, 292, 293, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 0, 1232, 141, 142, 412, 143, 413, 414, 415,
	416, 294, 417, 418, 419, 420, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 421, 148, 301, 302,
	149, 150, 422, 423, 303, 304, 305, 424, 151, 306,
	425, 398, 426, 152, 153, 154, 0, 155, 427, 156,
	157, 158, 428, 399, 159, 160, 429, 430, 432, 431,
	433, 434, 435, 161, 162, 352, 163, 307, 164, 308,
	309, 436, 165, 437, 166, 438, 167, 439, 440, 168,
	169, 441, 170, 442, 0, 443, 310, 171, 172, 173,
	311, 312, 444, 445, 446, 174, 175, 313, 314, 315,
	0, 176, 447, 177, 448, 449, 400, 450, 178, 316,
	451, 317, 452, 179, 180, 181, 182, 318, 319, 402,
	453, 186, 454, 183, 455, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 456, 326, 457, 403, 187, 188,
	189, 404, 190, 191, 192, 458, 194, 193, 459, 327,
	405, 195, 406, 460, 196, 461, 462, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	463, 464, 465, 329, 207, 330, 208, 209, 466, 210,
	467, 468, 211, 469, 470, 212, 331, 408, 213, 409,
	332, 214, 215, 216, 217, 218, 471, 219, 333, 220,
	334, 221, 472, 222, 223, 224, 225, 226, 335, 227,
	228, 473, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 474, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 475, 253, 337, 252,
	254, 255, 476, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 477, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 478, 266, 479, 267, 268, 269, 270, 271,
	272, 273, 480, 342, 343, 344, 481, 482, 274, 275,
	345, 346, 483, 276, 277, 278, 279, 484, 485, 280,
	281, 282, 283, 486, 284, 487, 347, 285, 286, 287,
	348, 349, 488, 489, 288, 490, 491, 492, 493, 289,
	290, 291, 292, 293, 393, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1958, 0, 0, 141, 142, 412, 143, 413,
	414, 415, 416, 294, 417, 418, 419, 420, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 421, 148,
	301, 302, 149, 150, 422, 423, 303, 304, 305, 424,
	151, 306, 425, 398, 426, 152, 153, 154, 0, 155,
	427, 156, 157, 158, 428, 399, 159, 160, 429, 430,
	432, 431, 433, 434, 435, 161, 162, 352, 163, 307,
	164, 308, 309, 436, 165, 437, 166, 438, 167, 439,
	440, 168, 169, 441, 170, 442, 0, 443, 310, 171,
	172, 173, 311, 312, 444, 445, 446, 174, 175, 313,
	314, 315, 0, 176, 447, 177, 448, 449, 400, 450,
	178, 316, 451, 317, 452, 179, 180, 181, 182, 318,
	319, 402, 453, 186, 454, 183, 455, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 456, 326, 457, 403,
	187, 188, 189, 404, 190, 191, 192, 458, 194, 193,
	459, 327, 405, 195, 406, 460, 196, 461, 462, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 463, 464, 465, 329, 207, 330, 208, 209,
	466, 210, 467, 468, 211, 469, 470, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 471, 219,
	333, 220, 334, 221, 472, 222, 223, 224, 225, 226,
	335, 227, 228, 473, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 474, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 475, 253,
	337, 252, 254, 255, 476, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 477, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 478, 266, 479, 267, 268, 269,
	270, 271, 272, 273, 480, 342, 343, 344, 481, 482,
	274, 275, 345, 346, 483, 276, 277, 278, 279, 484,
	485, 280, 281, 282, 283, 486, 284, 487, 347, 285,
	286, 287, 348, 349, 488, 489, 288, 490, 491, 492,
	493, 289, 290, 291, 292, 293, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 412,
	143, 413, 414, 415, 416, 294, 417, 418, 419, 420,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	421, 148, 301, 302, 149, 150, 422, 423, 303, 304,
	305, 424, 151, 306, 425, 398, 426, 152, 153, 154,
	0, 155, 427, 156, 157, 158, 428, 399, 159, 160,
	429, 430, 432, 431, 433, 434, 435, 161, 162, 352,
	163, 307, 164, 308, 309, 436, 165, 437, 166, 438,
	167, 439, 440, 168, 169, 441, 170, 442, 0, 443,
	310, 171, 172, 173, 311, 312, 444, 445, 446, 174,
	175, 313, 314, 315, 0, 176, 447, 177, 448, 449,
	400, 450, 178, 316, 451, 317, 452, 179, 180, 181,
	182, 318, 319, 402, 453, 186, 454, 183, 455, 401,
	184, 320, 185, 321, 322, 323, 324, 325, 456, 326,
	457, 403, 187, 188, 189, 404, 190, 191, 192, 458,
	194, 193, 459, 327, 405, 195, 406, 460, 196, 461,
	462, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 463, 464, 465, 329, 207, 330,
	208, 209, 466, 210, 467, 468, 211, 469, 470, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	471, 219, 333, 220, 334, 221, 472, 222, 223, 224,
	225, 226, 335, 227, 228, 473, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 474, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	475, 253, 337, 252, 254, 255, 476, 256, 245, 246,
	257, 411, 258, 338, 339, 259, 477, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 478, 266, 479, 267,
	268, 269, 270, 271, 272, 273, 480, 342, 343, 344,
	481, 482, 274, 275, 345, 346, 483, 276, 277, 278,
	279, 484, 485, 280, 281, 282, 283, 486, 284, 487,
	347, 285, 286, 287, 348, 349, 488, 489, 288, 490,
	491, 492, 493, 289, 290, 291, 292, 293, 695, 684,
	685, 682, 683, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 1354, 143, 0, 0, 0, 0, 712, 677, 0,
	0, 0, 144, 145, 146, 295, 727, 297, 728, 147,
	729, 730, 0, 148, 301, 302, 149, 150, 680, 711,
	731, 732, 305, 0, 151, 723, 0, 703, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 704, 705, 707, 0, 706, 708, 161,
	162, 352, 163, 733, 164, 734, 735, 0, 165, 0,
	166, 0, 167, 1355, 0, 726, 169, 0, 170, 0,
	0, 0, 668, 171, 172, 173, 713, 714, 691, 0,
	0, 174, 175, 736, 737, 738, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 724, 0, 317, 0, 179,
	180, 181, 182, 720, 722, 402, 0, 186, 0, 183,
	0, 401, 184, 739, 185, 740, 741, 742, 743, 744,
	0, 702, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 725, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 663, 0, 692, 721,
	207, 745, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 715, 214, 215, 216,
	217, 218, 0, 219, 716, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 746, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 669, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 709, 256,
	245, 246, 257, 411, 258, 747, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 748, 263, 717, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	749, 750, 0, 0, 274, 275, 718, 719, 690, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 710,
	284, 0, 347, 285, 286, 287, 348, 751, 1353, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	664, 0, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 660, 661, 1356, 695, 684, 685, 682, 683, 674,
	670, 1351, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 712, 677, 0, 0, 0, 144, 145,
	146, 295, 727, 297, 728, 147, 729, 730, 0, 148,
	301, 302, 149, 150, 680, 711, 731, 732, 305, 0,
	151, 723, 0, 703, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 704,
	705, 707, 0, 706, 708, 161, 162, 352, 163, 733,
	164, 734, 735, 0, 165, 0, 166, 0, 167, 0,
	0, 726, 169, 0, 170, 0, 0, 0, 668, 171,
	172, 173, 713, 714, 691, 0, 0, 174, 175, 736,
	737, 738, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 724, 0, 317, 0, 179, 180, 181, 182, 720,
	722, 402, 0, 186, 0, 183, 0, 401, 184, 739,
	185, 740, 741, 742, 743, 744, 0, 702, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 725, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 663, 0, 692, 721, 207, 745, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 715, 214, 215, 216, 217, 218, 0, 219,
	716, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	746, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 669, 244, 0, 248, 249, 250, 251, 125, 253,
	337, 252, 254, 255, 709, 256, 245, 246, 257, 411,
	258, 747, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 748, 263, 717, 0, 266, 129, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 749, 750, 0, 0,
	274, 275, 718, 719, 690, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 710, 284, 0, 347, 285,
	286, 287, 655, 751, 0, 0, 288, 0, 0, 0,
	123, 289, 290, 291, 292, 293, 664, 124, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 660, 661, 695,
	684, 685, 682, 683, 674, 0, 670, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 712, 677,
	0, 0, 0, 144, 145, 146, 295, 727, 297, 728,
	147, 729, 730, 1401, 148, 301, 302, 149, 150, 680,
	711, 731, 732, 305, 0, 151, 723, 0, 703, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 704, 705, 707, 0, 706, 708,
	161, 162, 352, 163, 733, 164, 734, 735, 0, 165,
	0, 166, 0, 167, 0, 0, 726, 169, 0, 170,
	0, 0, 0, 668, 171, 172, 173, 713, 714, 691,
	0, 0, 174, 175, 736, 737, 738, 0, 176, 0,
	177, 0, 1406, 400, 0, 178, 724, 0, 317, 0,
	179, 180, 181, 182, 720, 722, 402, 0, 186, 0,
	183, 0, 401, 184, 739, 185, 740, 741, 742, 743,
	744, 0, 702, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 1402, 725, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 663, 0, 692,
	721, 207, 745, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 715, 214, 215,
	216, 217, 218, 0, 219, 716, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 746, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 669, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 709,
	256, 245, 246, 257, 411, 258, 747, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 748, 263, 717, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 749, 750, 0, 1403, 274, 275, 718, 719, 690,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	710, 284, 0, 347, 285, 286, 287, 348, 751, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 664, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 660, 661, 695, 684, 685, 682, 683, 674,
	0, 670, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 712, 677, 0, 0, 0, 144, 145,
	146, 295, 727, 297, 728, 147, 729, 730, 0, 148,
	301, 302, 149, 150, 680, 711, 731, 732, 305, 0,
	151, 723, 0, 703, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 704,
	705, 707, 0, 706, 708, 161, 162, 352, 163, 733,
	164, 734, 735, 0, 165, 0, 166, 0, 167, 0,
	0, 726, 169, 0, 170, 0, 0, 0, 668, 171,
	172, 173, 713, 714, 691, 0, 0, 174, 175, 736,
	737, 738, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 724, 0, 317, 0, 179, 180, 181, 182, 720,
	722, 402, 0, 186, 0, 183, 0, 401, 184, 739,
	185, 740, 741, 742, 743, 744, 0, 702, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 725, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 663, 1792, 692, 721, 207, 745, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 715, 214, 215, 216, 217, 218, 0, 219,
	716, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	746, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 669, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 709, 256, 245, 246, 257, 411,
	258, 747, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 748, 263, 717, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 749, 750, 0, 0,
	274, 275, 718, 719, 690, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 710, 284, 0, 347, 285,
	286, 287, 348, 751, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 664, 0, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 660, 661, 880,
	695, 684, 685, 682, 683, 674, 670, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 712,
	677, 0, 0, 0, 144, 145, 146, 295, 727, 297,
	728, 147, 729, 730, 0, 148, 301, 302, 149, 150,
	680, 711, 731, 732, 305, 0, 151, 723, 0, 703,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 704, 705, 707, 0, 706,
	708, 161, 162, 352, 163, 733, 164, 734, 735, 0,
	165, 0, 166, 0, 167, 0, 0, 726, 169, 0,
	170, 0, 0, 0, 668, 171, 172, 173, 713, 714,
	691, 0, 0, 174, 175, 736, 737, 738, 0, 176,
	0, 177, 0, 0, 400, 0, 178, 724, 0, 317,
	0, 179, 180, 181, 182, 720, 722, 402, 0, 186,
	1163, 183, 0, 401, 184, 739, 185, 740, 741, 742,
	743, 744, 0, 702, 0, 403, 187, 188, 189, 404,
	190, 191, 192, 0, 194, 193, 0, 725, 405, 195,
	406, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 663, 0,
	692, 721, 207, 745, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 408, 213, 409, 715, 214,
	215, 216, 217, 218, 0, 219, 716, 220, 334, 221,
	1162, 222, 223, 224, 225, 226, 746, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 410, 242, 243, 669, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	709, 256, 245, 246, 257, 411, 258, 747, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 748, 263, 717,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 749, 750, 0, 0, 274, 275, 718, 719,
	690, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 710, 284, 0, 347, 285, 286, 287, 348, 751,
	0, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 664, 0, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 660, 661, 695, 684, 685, 682, 683,
	674, 0, 670, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 712, 677, 0, 0, 0, 144,
	145, 146, 295, 727, 297, 728, 147, 729, 730, 0,
	148, 301, 302, 149, 150, 680, 711, 731, 732, 305,
	0, 151, 723, 0, 703, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	704, 705, 707, 0, 706, 708, 161, 162, 352, 163,
	733, 164, 734, 735, 0, 165, 0, 166, 0, 167,
	0, 0, 726, 169, 0, 170, 0, 0, 0, 668,
	171, 172, 173, 713, 714, 691, 0, 0, 174, 175,
	736, 737, 738, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 724, 0, 317, 0, 179, 180, 181, 182,
	720, 722, 402, 0, 186, 0, 183, 0, 401, 184,
	739, 185, 740, 741, 742, 743, 744, 0, 702, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 725, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 663, 0, 692, 721, 207, 745, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 715, 214, 215, 216, 217, 218, 0,
	219, 716, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 746, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 669, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 709, 256, 245, 246, 257,
	411, 258, 747, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 748, 263, 717, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 749, 750, 0,
	0, 274, 275, 718, 719, 690, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 710, 284, 0, 347,
	285, 286, 287, 348, 751, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 664, 0, 0,
	0, 0, 0, 662, 0, 0, 0, 0, 660, 661,
	0, 0, 0, 0, 0, 991, 1346, 670, 0, 0,
	0, 0, 673, 695, 684, 685, 682, 683, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 712, 677, 0, 0, 0, 144, 145, 146,
	295, 727, 297, 728, 147, 729, 730, 0, 148, 301,
	302, 149, 150, 680, 711, 731, 732, 305, 0, 151,
	723, 0, 703, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 704, 705,
	707, 0, 706, 708, 161, 162, 352, 163, 733, 164,
	734, 735, 0, 165, 0, 166, 0, 167, 0, 0,
	726, 169, 0, 170, 0, 0, 0, 668, 171, 172,
	173, 713, 714, 691, 0, 0, 174, 175, 736, 737,
	738, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	724, 0, 317, 0, 179, 180, 181, 182, 720, 722,
	402, 0, 186, 0, 183, 0, 401, 184, 739, 185,
	740, 741, 742, 743, 744, 0, 702, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	725, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 663, 0, 692, 721, 207, 745, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 715, 214, 215, 216, 217, 218, 0, 219, 716,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 746,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	669, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 709, 256, 245, 246, 257, 411, 258,
	747, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	748, 263, 717, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 749, 750, 0, 0, 274,
	275, 718, 719, 690, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 710, 284, 0, 347, 285, 286,
	287, 348, 751, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 664, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 660, 661, 695, 684,
	685, 682, 683, 674, 0, 670, 1874, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 712, 677, 0,
	0, 0, 144, 145, 146, 295, 727, 297, 728, 147,
	729, 730, 0, 148, 301, 302, 149, 150, 680, 711,
	731, 732, 305, 0, 151, 723, 0, 703, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 704, 705, 707, 0, 706, 708, 161,
	162, 352, 163, 733, 164, 734, 735, 0, 165, 0,
	166, 0, 167, 0, 0, 726, 169, 0, 170, 0,
	0, 0, 668, 171, 172, 173, 713, 714, 691, 0,
	0, 174, 175, 736, 737, 738, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 724, 0, 317, 0, 179,
	180, 181, 182, 720, 722, 402, 0, 186, 0, 183,
	0, 401, 184, 739, 185, 740, 741, 742, 743, 744,
	0, 702, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 725, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 663, 0, 692, 721,
	207, 745, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 715, 214, 215, 216,
	217, 218, 0, 219, 716, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 746, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 669, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 709, 256,
	245, 246, 257, 411, 258, 747, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 748, 263, 717, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	749, 750, 0, 0, 274, 275, 718, 719, 690, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 710,
	284, 0, 347, 285, 286, 287, 348, 751, 1823, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	664, 0, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 660, 661, 695, 684, 685, 682, 683, 674, 0,
	670, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 712, 677, 0, 0, 0, 144, 145, 146,
	295, 727, 297, 728, 147, 729, 730, 0, 148, 301,
	302, 149, 150, 680, 711, 731, 732, 305, 0, 151,
	723, 0, 703, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 704, 705,
	707, 0, 706, 708, 161, 162, 352, 163, 733, 164,
	734, 735, 0, 165, 0, 166, 0, 167, 0, 0,
	726, 169, 0, 170, 0, 0, 0, 668, 171, 172,
	173, 713, 714, 691, 0, 0, 174, 175, 736, 737,
	738, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	724, 0, 317, 0, 179, 180, 181, 182, 720, 722,
	402, 0, 186, 0, 183, 0, 401, 184, 739, 185,
	740, 741, 742, 743, 744, 0, 702, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	725, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 663, 0, 692, 721, 207, 745, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 715, 214, 215, 216, 217, 218, 0, 219, 716,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 746,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	669, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 709, 256, 245, 246, 257, 411, 258,
	747, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	748, 263, 717, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 749, 750, 0, 0, 274,
	275, 718, 719, 690, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 710, 284, 0, 347, 285, 286,
	287, 348, 751, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 664, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 660, 661, 695, 684,
	685, 682, 683, 674, 0, 670, 1813, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 712, 677, 0,
	0, 0, 144, 145, 146, 295, 727, 297, 728, 147,
	729, 730, 0, 148, 301, 302, 149, 150, 680, 711,
	731, 732, 305, 0, 151, 723, 0, 703, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 704, 705, 707, 0, 706, 708, 161,
	162, 352, 163, 733, 164, 734, 735, 886, 165, 0,
	166, 0, 167, 0, 0, 726, 169, 0, 170, 0,
	0, 0, 668, 171, 172, 173, 713, 714, 691, 0,
	0, 174, 175, 736, 737, 738, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 724, 0, 317, 0, 179,
	180, 181, 182, 720, 722, 402, 0, 186, 0, 183,
	0, 401, 184, 739, 185, 740, 741, 742, 743, 744,
	0, 702, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 725, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 663, 0, 692, 721,
	207, 745, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 715, 214, 215, 216,
	217, 218, 0, 219, 716, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 746, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 669, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 709, 256,
	245, 246, 257, 411, 258, 747, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 748, 263, 717, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	749, 750, 0, 0, 274, 275, 718, 719, 690, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 710,
	284, 0, 347, 285, 286, 287, 348, 751, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	664, 0, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 660, 661, 695, 684, 685, 682, 683, 674, 0,
	670, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 712, 677, 0, 0, 0, 144, 145, 146,
	295, 727, 297, 728, 147, 729, 730, 0, 148, 301,
	302, 149, 150, 680, 711, 731, 732, 305, 0, 151,
	723, 0, 703, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 704, 705,
	707, 0, 706, 708, 161, 162, 352, 163, 733, 164,
	734, 735, 0, 165, 0, 166, 0, 167, 0, 0,
	726, 169, 0, 170, 0, 0, 0, 668, 171, 172,
	173, 713, 714, 691, 0, 0, 174, 175, 736, 737,
	738, 0, 176, 0, 177, 0, 1406, 400, 0, 178,
	724, 0, 317, 0, 179, 180, 181, 182, 720, 722,
	402, 0, 186, 0, 183, 0, 401, 184, 739, 185,
	740, 741, 742, 743, 744, 0, 702, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	725, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 663, 0, 692, 721, 207, 745, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 715, 214, 215, 216, 217, 218, 0, 219, 716,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 746,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	669, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 709, 256, 245, 246, 257, 411, 258,
	747, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	748, 263, 717, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 749, 750, 0, 0, 274,
	275, 718, 719, 690, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 710, 284, 0, 347, 285, 286,
	287, 348, 751, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 664, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 660, 661, 695, 684,
	685, 682, 683, 674, 0, 670, 0, 0, 0, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 712, 677, 0,
	0, 0, 144, 145, 146, 295, 727, 297, 728, 147,
	729, 730, 0, 148, 301, 302, 149, 150, 680, 711,
	731, 732, 305, 0, 151, 723, 0, 703, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 704, 705, 707, 0, 706, 708, 161,
	162, 352, 163, 733, 164, 734, 735, 0, 165, 0,
	166, 0, 167, 0, 0, 726, 169, 0, 170, 0,
	0, 0, 668, 171, 172, 173, 713, 714, 691, 0,
	0, 174, 175, 736, 737, 738, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 724, 0, 317, 0, 179,
	180, 181, 182, 720, 722, 402, 0, 186, 0, 183,
	0, 401, 184, 739, 185, 740, 741, 742, 743, 744,
	0, 702, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 725, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 663, 0, 692, 721,
	207, 745, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 715, 214, 215, 216,
	217, 218, 0, 219, 716, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 746, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 669, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 709, 256,
	245, 246, 257, 411, 258, 747, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 748, 263, 717, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	749, 750, 0, 0, 274, 275, 718, 719, 690, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 710,
	284, 0, 347, 285, 286, 287, 348, 751, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	664, 0, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 660, 661, 880, 695, 684, 685, 682, 683, 674,
	670, 0, 0, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 712, 677, 0, 0, 0, 144, 145,
	146, 295, 727, 297, 728, 147, 729, 730, 0, 148,
	301, 302, 149, 150, 680, 711, 731, 732, 305, 0,
	151, 723, 0, 703, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 704,
	705, 707, 0, 706, 708, 161, 162, 352, 163, 733,
	164, 734, 735, 0, 165, 0, 166, 0, 167, 0,
	0, 726, 169, 0, 170, 0, 0, 0, 668, 171,
	172, 173, 713, 714, 691, 0, 0, 174, 175, 736,
	737, 738, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 724, 0, 317, 0, 179, 180, 181, 182, 720,
	722, 402, 0, 186, 0, 183, 0, 401, 184, 739,
	185, 740, 741, 742, 743, 744, 0, 702, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 725, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 663, 0, 692, 721, 207, 745, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 715, 214, 215, 216, 217, 218, 0, 219,
	716, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	746, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 669, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 709, 256, 245, 246, 257, 411,
	258, 747, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 748, 263, 717, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 749, 750, 0, 0,
	274, 275, 718, 719, 690, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 710, 284, 0, 347, 285,
	286, 287, 348, 751, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 664, 0, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 660, 661, 695,
	684, 685, 682, 683, 674, 0, 670, 1341, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 1150, 143, 0, 0, 0, 0, 712, 677,
	0, 0, 0, 144, 145, 146, 295, 727, 297, 728,
	147, 729, 730, 0, 148, 301, 302, 149, 150, 680,
	711, 731, 732, 305, 0, 151, 723, 0, 703, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 704, 705, 707, 0, 706, 708,
	161, 162, 352, 163, 733, 164, 734, 735, 0, 165,
	0, 166, 0, 167, 0, 0, 726, 169, 0, 170,
	0, 0, 0, 668, 171, 172, 173, 713, 714, 691,
	0, 0, 174, 175, 736, 737, 738, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 724, 0, 317, 0,
	179, 180, 181, 182, 720, 722, 402, 0, 186, 0,
	183, 0, 401, 184, 739, 185, 740, 741, 742, 743,
	744, 0, 702, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 725, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 663, 0, 692,
	721, 207, 745, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 715, 214, 215,
	216, 217, 218, 0, 219, 716, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 746, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 669, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 709,
	256, 245, 246, 257, 411, 258, 747, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 748, 263, 717, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 749, 750, 0, 0, 274, 275, 718, 719, 690,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	710, 284, 0, 347, 285, 286, 287, 348, 751, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 664, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 660, 661, 695, 684, 685, 682, 683, 674,
	0, 670, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 712, 677, 0, 0, 0, 144, 145,
	146, 295, 727, 297, 728, 147, 729, 730, 0, 148,
	301, 302, 149, 150, 680, 711, 731, 732, 305, 0,
	151, 723, 0, 703, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 2231, 0, 704,
	705, 707, 0, 706, 708, 161, 162, 352, 163, 733,
	164, 734, 735, 0, 165, 0, 166, 0, 167, 0,
	0, 726, 169, 0, 170, 0, 0, 0, 668, 171,
	172, 173, 713, 714, 691, 0, 0, 174, 175, 736,
	737, 738, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 724, 0, 317, 0, 179, 180, 181, 182, 720,
	722, 402, 0, 186, 0, 183, 0, 401, 184, 739,
	185, 740, 741, 742, 743, 744, 0, 702, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 725, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 663, 0, 692, 721, 207, 745, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 715, 214, 215, 216, 217, 218, 0, 219,
	716, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	746, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 669, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 709, 256, 245, 246, 257, 411,
	258, 747, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 748, 263, 717, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 749, 750, 0, 0,
	274, 275, 718, 719, 690, 276, 277, 2230, 279, 0,
	0, 280, 281, 282, 283, 710, 284, 0, 347, 285,
	286, 287, 348, 751, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 664, 0, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 660, 661, 695,
	684, 685, 682, 683, 674, 0, 670, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 712, 677,
	0, 0, 0, 144, 145, 146, 295, 727, 297, 728,
	147, 729, 730, 0, 148, 301, 302, 149, 150, 680,
	711, 731, 732, 305, 0, 151, 723, 0, 703, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 704, 705, 707, 0, 706, 708,
	161, 162, 352, 163, 733, 164, 734, 735, 0, 165,
	0, 166, 0, 167, 0, 0, 726, 169, 0, 170,
	0, 0, 0, 668, 171, 172, 173, 713, 714, 691,
	0, 0, 174, 175, 736, 737, 738, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 724, 0, 317, 0,
	179, 180, 181, 182, 720, 722, 402, 0, 186, 0,
	183, 0, 401, 184, 739, 185, 740, 741, 742, 743,
	744, 0, 702, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 725, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 663, 0, 692,
	721, 207, 745, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 715, 214, 215,
	216, 217, 218, 0, 219, 716, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 746, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 669, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 709,
	256, 245, 246, 257, 411, 258, 747, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 748, 263, 717, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 749, 750, 0, 0, 274, 275, 718, 719, 690,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	710, 284, 0, 347, 285, 286, 287, 348, 751, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 664, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 660, 661, 695, 684, 685, 682, 683, 674,
	0, 670, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 712, 677, 0, 0, 0, 144, 145,
	146, 2229, 727, 297, 728, 147, 729, 730, 0, 148,
	301, 302, 149, 150, 680, 711, 731, 732, 305, 0,
	151, 723, 0, 703, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 2231, 0, 704,
	705, 707, 0, 706, 708, 161, 162, 352, 163, 733,
	164, 734, 735, 0, 165, 0, 166, 0, 167, 0,
	0, 726, 169, 0, 170, 0, 0, 0, 668, 171,
	172, 173, 713, 714, 691, 0, 0, 174, 175, 736,
	737, 738, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 724, 0, 317, 0, 179, 180, 181, 182, 720,
	722, 402, 0, 186, 0, 183, 0, 401, 184, 739,
	185, 740, 741, 742, 743, 744, 0, 702, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 725, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 663, 0, 692, 721, 207, 745, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 715, 214, 215, 216, 217, 218, 0, 219,
	716, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	746, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 669, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 709, 256, 245, 246, 257, 411,
	258, 747, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 748, 263, 717, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 749, 750, 0, 0,
	274, 275, 718, 719, 690, 276, 277, 2230, 279, 0,
	0, 280, 281, 282, 283, 710, 284, 0, 347, 285,
	286, 287, 348, 751, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 664, 0, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 660, 661, 1378,
	684, 685, 682, 683, 674, 0, 670, 0, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 712, 677,
	0, 0, 0, 144, 145, 146, 295, 727, 297, 728,
	147, 729, 730, 0, 148, 301, 302, 149, 150, 680,
	711, 731, 732, 305, 0, 151, 723, 0, 703, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 704, 705, 707, 0, 706, 708,
	161, 162, 352, 163, 733, 1381, 734, 735, 0, 165,
	0, 166, 0, 167, 0, 0, 726, 169, 0, 170,
	0, 0, 0, 668, 171, 172, 173, 713, 714, 691,
	0, 0, 174, 175, 736, 737, 738, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 724, 0, 317, 0,
	179, 180, 1382, 182, 720, 722, 402, 0, 186, 0,
	183, 0, 401, 184, 739, 185, 740, 741, 742, 743,
	744, 0, 702, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 725, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 1383, 1380, 202,
	328, 201, 407, 203, 204, 206, 205, 663, 0, 692,
	721, 207, 745, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 715, 214, 215,
	216, 217, 218, 0, 219, 716, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 746, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 669, 244, 0, 248,
	249, 250, 1384, 0, 253, 337, 252, 254, 255, 709,
	256, 245, 246, 257, 411, 258, 747, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 748, 263, 717, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 749, 750, 0, 0, 274, 275, 718, 719, 690,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	710, 284, 0, 347, 285, 286, 287, 348, 751, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 1379,
	293, 664, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 660, 661, 695, 684, 685, 682, 683, 674,
	0, 670, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 712, 677, 0, 0, 0, 144, 145,
	146, 295, 727, 297, 728, 147, 729, 730, 0, 148,
	301, 302, 149, 150, 680, 711, 731, 732, 305, 0,
	151, 723, 0, 703, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 704,
	705, 707, 0, 706, 708, 161, 162, 352, 163, 733,
	164, 734, 735, 0, 165, 0, 166, 0, 167, 0,
	0, 726, 169, 0, 170, 0, 0, 0, 668, 171,
	172, 173, 713, 714, 691, 0, 0, 174, 175, 736,
	737, 738, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 724, 0, 317, 0, 179, 180, 181, 182, 720,
	722, 402, 0, 186, 0, 183, 0, 401, 184, 739,
	185, 740, 741, 742, 743, 744, 0, 702, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 725, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 692, 721, 207, 745, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 715, 214, 215, 216, 217, 218, 0, 219,
	716, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	746, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 1396, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 709, 256, 245, 246, 257, 411,
	258, 747, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 748, 263, 717, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 749, 750, 0, 0,
	274, 275, 718, 719, 690, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 710, 284, 0, 347, 285,
	286, 287, 348, 751, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 695, 684, 685, 682,
	683, 674, 1394, 0, 0, 0, 0, 1392, 1393, 0,
	0, 0, 0, 0, 0, 0, 1395, 141, 142, 0,
	143, 673, 0, 0, 0, 712, 677, 0, 0, 0,
	144, 145, 146, 295, 727, 297, 728, 147, 729, 730,
	0, 148, 301, 302, 149, 150, 0, 711, 731, 732,
	305, 0, 151, 723, 0, 703, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 704, 705, 707, 0, 706, 708, 161, 162, 352,
	163, 733, 164, 734, 735, 0, 165, 0, 166, 0,
	167, 0, 0, 726, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 713, 714, 691, 0, 0, 174,
	175, 736, 737, 738, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 724, 0, 317, 0, 179, 180, 181,
	182, 720, 722, 402, 0, 186, 0, 183, 0, 401,
	184, 739, 185, 740, 741, 742, 743, 744, 0, 702,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 725, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 0, 0, 692, 721, 207, 745,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 715, 214, 215, 216, 217, 218,
	0, 219, 716, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 746, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 1396, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 709, 256, 245, 246,
	257, 411, 258, 747, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 748, 263, 717, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 749, 750,
	0, 0, 274, 275, 718, 719, 690, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 710, 284, 0,
	347, 285, 286, 287, 348, 751, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 695, 684,
	685, 682, 683, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1395, 141,
	142, 0, 143, 673, 0, 0, 0, 712, 677, 0,
	0, 0, 144, 145, 146, 0, 727, 297, 728, 147,
	729, 730, 0, 148, 301, 302, 149, 150, 680, 711,
	731, 732, 305, 0, 151, 723, 0, 703, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 2231, 0, 704, 705, 707, 0, 706, 708, 161,
	162, 352, 163, 733, 164, 734, 735, 0, 165, 0,
	166, 0, 167, 0, 0, 726, 169, 0, 170, 0,
	0, 0, 668, 171, 172, 173, 713, 714, 691, 0,
	0, 174, 175, 736, 737, 738, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 724, 0, 317, 0, 179,
	180, 181, 182, 720, 722, 0, 0, 186, 0, 183,
	0, 401, 184, 739, 185, 740, 741, 742, 743, 744,
	0, 702, 0, 0, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 725, 405, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 663, 0, 692, 721,
	207, 745, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 715, 214, 215, 216,
	217, 218, 0, 219, 716, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 746, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 669, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 709, 256,
	245, 246, 257, 0, 258, 747, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 748, 263, 717, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	749, 750, 0, 0, 274, 275, 718, 719, 690, 276,
	277, 2230, 279, 0, 0, 280, 281, 282, 283, 710,
	284, 0, 347, 285, 286, 287, 348, 751, 0, 0,
	288, 0, 695, 0, 0, 289, 290, 291, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 660, 661, 141, 142, 0, 143, 0, 0, 0,
	670, 712, 0, 0, 0, 673, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 711, 303, 304, 305, 0, 151, 723,
	0, 703, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 704, 705, 707,
	0, 706, 708, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	713, 714, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 724,
	0, 317, 0, 179, 180, 181, 182, 720, 722, 402,
	0, 186, 0, 183, 0, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 725,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 0, 721, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	715, 214, 215, 216, 217, 218, 0, 219, 716, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 709, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 717, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	718, 719, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 710, 284, 0, 347, 285, 286, 287,
	348, 349, 566, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 1904, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 398, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 402,
	0, 186, 0, 183, 0, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 327,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 125, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 129, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	655, 349, 566, 563, 288, 564, 559, 554, 123, 289,
	290, 291, 292, 293, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 114, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 398, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 1113, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 556, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 402,
	0, 186, 0, 183, 0, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 327,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	557, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 555, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 566, 563, 0, 564, 559, 554,
	0, 0, 0, 0, 0, 565, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 1110, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 556, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 557, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 555, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 566, 563, 0, 564,
	559, 554, 0, 0, 0, 0, 0, 565, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 398, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 786, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 556, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 402, 0, 186, 0, 183, 0, 401,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 327, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 557, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 411, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 555, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 348, 349, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 566, 563,
	0, 564, 559, 554, 0, 0, 0, 0, 0, 565,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 398, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 556, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 402, 0, 186, 0, 183,
	0, 401, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 327, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 557, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 411, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 555, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 138,
	284, 0, 347, 285, 286, 287, 348, 349, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 565, 560, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 626, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 125, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 129, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 655, 349, 138,
	0, 288, 0, 0, 0, 123, 289, 290, 291, 292,
	293, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 620,
	0, 625, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 125, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 129, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 655, 349, 138,
	0, 288, 0, 0, 0, 123, 289, 290, 291, 292,
	293, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 114, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 626, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 620,
	0, 625, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 914, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 1260, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 1838, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 695, 684, 685, 682, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 907, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 727,
	297, 728, 147, 729, 730, 0, 148, 301, 302, 149,
	150, 0, 0, 731, 732, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 733, 164, 734, 735,
	0, 165, 0, 166, 0, 167, 0, 0, 726, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 691, 0, 0, 174, 175, 736, 737, 738, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 739, 185, 740, 741,
	742, 743, 744, 0, 702, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 692, 329, 207, 745, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 746, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 747, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 748, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 749, 750, 0, 0, 274, 275, 345,
	346, 690, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	751, 566, 563, 288, 0, 0, 835, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	398, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 134, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 0, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 0,
	0, 186, 0, 183, 0, 0, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 0, 187, 188,
	189, 0, 190, 191, 192, 0, 194, 193, 0, 327,
	0, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 0, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 0, 213, 0,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 0, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 0, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 133, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	348, 349, 566, 563, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 137, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 398, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 402,
	0, 186, 0, 183, 0, 401, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 327,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 411, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 138, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 0, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 0, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 0, 284, 566, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 137, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 398, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 402, 0, 186, 0, 183, 0, 401,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 327, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 411, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 138, 284, 0,
	347, 285, 286, 287, 348, 349, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 1455, 151, 306, 0, 0, 0, 152, 153,
	154, 0, 155, 1453, 156, 157, 158, 0, 0, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 0, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 1452, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 1457,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 0, 0, 186, 1450, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 1456, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 1451, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 1455, 151, 306, 0, 0, 1502, 152,
	153, 154, 0, 155, 1453, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	1457, 0, 0, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 1501, 319, 0, 0, 186, 0, 183,
	0, 0, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 0, 187, 188, 189, 0, 190, 191,
	192, 0, 194, 193, 0, 327, 0, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 0, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 0, 213, 0, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 1456, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 0, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 0, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 0, 276,
	277, 278, 279, 0, 1505, 280, 281, 282, 283, 138,
	284, 0, 347, 285, 286, 287, 348, 349, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	1236, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 626,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 138, 284, 0, 347, 285, 286, 287, 348, 349,
	0, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 141, 142, 1165, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 0, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 872, 319, 0,
	0, 186, 0, 183, 0, 0, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 0, 187, 188,
	189, 0, 190, 191, 192, 0, 194, 193, 0, 327,
	0, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 0, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 626, 211, 0, 0, 212, 331, 0, 213, 0,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 0, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 0, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 138, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 0, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 0, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 866, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 626, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 643, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 138, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 141, 142, 355, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 354, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 138, 284, 0,
	347, 285, 286, 287, 348, 349, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 0, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 0, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 0, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 1751, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 0, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 1749, 319, 0, 0, 186, 0, 183,
	0, 0, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 0, 187, 188, 189, 0, 190, 191,
	192, 0, 194, 193, 0, 327, 0, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 0, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 0, 213, 0, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 0, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 0, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 0, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 138,
	284, 0, 347, 285, 286, 287, 348, 349, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 1744, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	500, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 138, 284, 0, 347, 285, 286, 287, 348, 349,
	0, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 1130, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 924, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 0, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 0,
	0, 186, 0, 183, 0, 0, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 0, 187, 188,
	189, 0, 190, 191, 192, 0, 194, 193, 0, 327,
	0, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 0, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 0, 213, 0,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 0, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 0, 245, 246, 257, 0, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 138, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 0, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 0, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 869, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 814,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 138, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	812, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 808, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 138, 284, 0,
	347, 285, 286, 287, 348, 349, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 0, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 0, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 0, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 806, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 0, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 803, 319, 0, 0, 186, 0, 183,
	0, 0, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 0, 187, 188, 189, 0, 190, 191,
	192, 0, 194, 193, 0, 327, 0, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 0, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 0, 213, 0, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 0, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 0, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 0, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 138,
	284, 0, 347, 285, 286, 287, 348, 349, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 799, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 794, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 138, 284, 0, 347, 285, 286, 287, 348, 349,
	0, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 770, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 522, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 518, 343, 344, 0, 0, 274, 771, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 0, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 0,
	0, 186, 0, 183, 0, 0, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 0, 187, 188,
	189, 0, 190, 191, 192, 0, 194, 193, 0, 327,
	0, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 0, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 0, 213, 0,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 608,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 0, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 0, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 138, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 512,
	306, 0, 0, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 0, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 511, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 522, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	513, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 514, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 518, 343, 344, 0, 0, 274,
	516, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 0, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 0, 0, 186, 0, 183, 0, 0, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 0,
	187, 188, 189, 0, 190, 191, 192, 0, 194, 193,
	0, 327, 0, 195, 0, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 0, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 0,
	213, 0, 332, 214, 215, 0, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 0, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 0, 242,
	243, 336, 0, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 0,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 964, 965, 966, 967, 968,
	0, 0, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 934, 931, 932, 970, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 933, 0,
	0, 0, 0, 934, 948, 0, 970, 0, 0, 0,
	0, 931, 932, 0, 951, 952, 953, 961, 962, 963,
	964, 965, 966, 967, 968, 0, 0, 933, 0, 0,
	0, 0, 954, 948, 0, 0, 0, 0, 0, 934,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 948,
	0, 0, 0, 0, 0, 0, 0, 958, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 971, 0, 0,
	956, 0, 0, 0, 0, 0, 949, 0, 0, 0,
	0, 0, 0, 939, 969, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 956,
	0, 955, 958, 971, 0, 949, 954, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 970, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 0, 956, 0, 933, 0, 0,
	0, 949, 0, 948, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 958, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 957, 0, 969, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 956,
	0, 0, 0, 0, 0, 949, 1680, 0, 0, 0,
	0, 957, 0, 0, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	955, 0, 0, 0, 0, 1679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 0, 0, 0, 0,
	0, 1631, 0, 0, 0, 0, 931, 932, 950, 951,
	952, 953, 961, 962, 963, 964, 965, 966, 967, 968,
	0, 0, 0, 0, 959, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 934, 931, 932, 970, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 933, 0,
	0, 0, 0, 934, 948, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	0, 957, 0, 948, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	0, 0, 2204, 0, 0, 0, 0, 0, 939, 0,
	931, 932, 0, 951, 952, 953, 961, 962, 963, 964,
	965, 966, 967, 968, 0, 0, 0, 958, 971, 0,
	0, 954, 0, 0, 0, 0, 0, 939, 934, 0,
	0, 970, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 971, 0, 0,
	956, 0, 933, 0, 0, 0, 949, 0, 948, 0,
	0, 0, 0, 0, 969, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 956,
	0, 955, 0, 0, 0, 949, 954, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 939, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 950,
	0, 958, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 959, 0, 0, 939, 0, 931,
	932, 0, 951, 952, 953, 961, 962, 963, 964, 965,
	966, 967, 968, 0, 0, 955, 958, 971, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	970, 0, 957, 0, 969, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 956,
	0, 933, 0, 2160, 0, 949, 0, 948, 0, 0,
	0, 957, 0, 950, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 959,
	955, 0, 2121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	958, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 957, 0, 969, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 956, 0, 0, 0, 2095, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 964, 965, 966,
	967, 968, 0, 0, 955, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 970,
	0, 957, 0, 0, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 0,
	933, 0, 2090, 0, 0, 0, 948, 0, 0, 0,
	931, 932, 950, 951, 952, 953, 961, 962, 963, 964,
	965, 966, 967, 968, 0, 0, 0, 0, 959, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 934, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 0, 933, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 969, 945, 946,
	947, 960, 0, 944, 942, 943, 935, 936, 937, 938,
	940, 941, 956, 0, 0, 0, 2086, 0, 949, 0,
	0, 0, 939, 0, 0, 0, 0, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 964, 965, 966, 967,
	968, 958, 971, 955, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 970, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 933,
	949, 0, 0, 0, 0, 948, 0, 0, 0, 931,
	932, 950, 951, 952, 953, 961, 962, 963, 964, 965,
	966, 967, 968, 0, 0, 955, 0, 959, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 933, 0, 0, 0, 0, 0, 948, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 958, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 957, 0, 969, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 956, 0, 0, 0, 2033, 0, 949, 0, 0,
	0, 939, 0, 0, 0, 0, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 964, 965, 966, 967, 968,
	958, 971, 955, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 0, 0, 934, 0, 957, 970, 969, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 956, 0, 0, 0, 2003, 933, 949,
	0, 0, 0, 0, 948, 0, 0, 0, 931, 932,
	950, 951, 952, 953, 961, 962, 963, 964, 965, 966,
	967, 968, 0, 0, 955, 0, 959, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	933, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 958, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 957, 0, 969, 945, 946, 947, 960,
	0, 944, 942, 943, 935, 936, 937, 938, 940, 941,
	956, 0, 0, 0, 2002, 0, 949, 0, 0, 0,
	939, 0, 0, 0, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 958,
	971, 955, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 934, 0, 957, 970, 969, 945, 946,
	947, 960, 0, 944, 942, 943, 935, 936, 937, 938,
	940, 941, 956, 0, 0, 0, 1923, 933, 949, 0,
	0, 0, 0, 948, 0, 0, 0, 931, 932, 950,
	951, 952, 953, 961, 962, 963, 964, 965, 966, 967,
	968, 0, 0, 955, 0, 959, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 933,
	0, 0, 0, 0, 0, 948, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 958, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 957, 0, 969, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 956,
	0, 0, 0, 1841, 0, 949, 0, 0, 0, 939,
	0, 0, 0, 0, 931, 932, 0, 951, 952, 953,
	961, 962, 963, 964, 965, 966, 967, 968, 958, 971,
	955, 0, 0, 0, 0, 954, 0, 0, 0, 0,
	0, 0, 934, 0, 957, 970, 969, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 956, 0, 0, 0, 1817, 933, 949, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 1639, 1640, 0, 1657, 1658, 1659, 0,
	0, 0, 955, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 2258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 1654, 0, 0, 0, 958, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 957, 0, 969, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 956, 0,
	0, 0, 1342, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 932, 1645, 951, 952, 953, 961,
	962, 963, 964, 965, 966, 967, 968, 0, 0, 955,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 0,
	0, 934, 0, 957, 970, 2257, 945, 946, 947, 960,
	0, 944, 942, 943, 935, 936, 937, 938, 940, 941,
	0, 0, 1601, 0, 0, 933, 0, 0, 0, 0,
	0, 948, 0, 1655, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 931, 932,
	0, 951, 952, 953, 961, 962, 963, 964, 965, 966,
	967, 968, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 1484, 939, 934, 1671, 0, 970,
	1670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 971, 1656, 0, 0, 0,
	933, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	957, 0, 969, 945, 946, 947, 960, 0, 944, 942,
	943, 935, 936, 937, 938, 940, 941, 956, 0, 0,
	0, 0, 0, 949, 0, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 955, 0,
	939, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	971, 0, 1651, 1652, 1653, 0, 0, 1650, 1648, 1649,
	1641, 1642, 1643, 1644, 1646, 1647, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 949, 0,
	0, 1213, 959, 0, 0, 0, 0, 931, 932, 0,
	951, 952, 953, 961, 962, 963, 964, 965, 966, 967,
	968, 0, 0, 955, 0, 0, 0, 0, 954, 0,
	0, 0, 1212, 0, 0, 934, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 948, 0, 0, 0, 957,
	0, 950, 945, 946, 947, 960, 0, 944, 942, 943,
	935, 936, 937, 938, 940, 941, 0, 959, 0, 0,
	0, 0, 931, 932, 0, 951, 952, 953, 961, 962,
	963, 964, 965, 966, 967, 968, 0, 0, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 939,
	934, 931, 932, 970, 951, 952, 953, 961, 962, 963,
	964, 965, 966, 967, 968, 0, 0, 0, 958, 971,
	0, 0, 954, 0, 933, 0, 0, 0, 0, 934,
	948, 0, 970, 0, 957, 0, 969, 945, 946, 947,
	960, 0, 944, 942, 943, 935, 936, 937, 938, 940,
	941, 956, 0, 933, 0, 0, 0, 949, 0, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 955, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 958, 971, 0, 0, 956, 0, 0, 0,
	0, 0, 949, 0, 0, 0, 959, 0, 0, 0,
	969, 931, 932, 0, 951, 952, 953, 961, 962, 963,
	964, 965, 966, 967, 968, 956, 0, 955, 547, 0,
	0, 949, 954, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 948,
	0, 0, 0, 957, 0, 950, 945, 946, 947, 960,
	0, 944, 942, 943, 935, 936, 937, 938, 940, 941,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 939, 0, 0, 931, 932, 1677, 951,
	952, 953, 961, 962, 963, 964, 965, 966, 967, 968,
	0, 0, 958, 971, 0, 1821, 0, 954, 0, 0,
	0, 1672, 0, 0, 934, 0, 0, 970, 957, 0,
	969, 945, 946, 947, 960, 0, 944, 942, 943, 935,
	936, 937, 938, 940, 941, 956, 0, 0, 933, 0,
	0, 949, 0, 0, 948, 0, 0, 957, 0, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 0, 958, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 969, 931, 932, 0, 951,
	952, 953, 961, 962, 963, 964, 965, 966, 967, 968,
	956, 0, 0, 0, 0, 0, 949, 954, 0, 0,
	0, 0, 0, 0, 934, 931, 932, 970, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 0,
	0, 955, 0, 0, 0, 0, 954, 0, 933, 0,
	1630, 0, 0, 934, 948, 0, 970, 957, 0, 0,
	945, 946, 947, 960, 0, 944, 942, 943, 935, 936,
	937, 938, 940, 941, 0, 0, 0, 933, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 939, 0,
	931, 932, 0, 951, 952, 953, 961, 962, 963, 964,
	965, 966, 967, 968, 0, 0, 0, 958, 971, 0,
	0, 954, 0, 0, 0, 0, 0, 939, 934, 0,
	0, 970, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 971, 0, 0,
	956, 0, 933, 0, 0, 0, 949, 0, 948, 0,
	0, 0, 957, 0, 969, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 956,
	0, 955, 0, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 1637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	955, 0, 939, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 958, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 959, 0, 0, 0, 0, 931,
	932, 0, 951, 952, 953, 961, 962, 963, 964, 965,
	966, 967, 968, 0, 0, 955, 0, 0, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	970, 0, 957, 0, 0, 945, 946, 947, 960, 0,
	944, 942, 943, 935, 936, 937, 938, 940, 941, 0,
	0, 933, 0, 0, 0, 0, 0, 948, 0, 0,
	0, 957, 0, 950, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 959,
	0, 0, 0, 0, 931, 932, 0, 951, 952, 953,
	961, 962, 963, 964, 965, 966, 967, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 934, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 971, 0, 0, 0, 0, 933, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 957, 0, 969, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 956, 0, 0, 0, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 971, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 117,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 108, 950, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 0, 949, 119, 0, 0, 959, 0,
	0, 40, 0, 109, 0, 931, 932, 0, 951, 952,
	953, 961, 962, 963, 964, 965, 966, 967, 968, 0,
	0, 0, 0, 47, 0, 0, 0, 49, 0, 0,
	0, 111, 0, 934, 120, 0, 970, 0, 55, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 57, 0,
	0, 0, 0, 948, 58, 957, 0, 950, 945, 946,
	947, 960, 0, 944, 942, 943, 935, 936, 937, 938,
	940, 941, 0, 959, 0, 0, 0, 0, 0, 0,
	931, 932, 0, 951, 952, 953, 961, 962, 963, 964,
	965, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 934, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 971, 0, 0,
	0, 0, 933, 0, 0, 0, 59, 0, 948, 0,
	957, 0, 60, 945, 946, 947, 960, 0, 944, 942,
	943, 935, 936, 937, 938, 940, 941, 0, 0, 956,
	67, 68, 61, 0, 62, 949, 63, 0, 121, 0,
	0, 0, 0, 64, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 116, 0, 0,
	0, 0, 939, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 958, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 950, 0,
	0, 128, 0, 0, 956, 0, 0, 0, 0, 123,
	949, 0, 0, 0, 959, 0, 124, 0, 0, 931,
	932, 0, 951, 952, 953, 961, 962, 963, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 0, 0, 948, 0, 0,
	0, 957, 0, 950, 945, 946, 947, 960, 0, 944,
	942, 943, 935, 936, 937, 938, 940, 941, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 1051, 1080, 1043, 1071, 1070,
	958, 971, 1045, 1044, 0, 0, 0, 0, 1082, 1081,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 945,
	946, 947, 960, 0, 944, 942, 943, 935, 936, 937,
	938, 940, 941, 956, 0, 0, 0, 0, 0, 949,
	0, 1076, 0, 1068, 1067, 0, 0, 0, 0, 0,
	0, 0, 0, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1063, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1054, 1053, 1055, 1056, 1057, 1058, 1059, 0, 1079,
	0, 0, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 1272, 1270, 1271, 1274,
	1273, 0, 0, 0, 0, 957, 0, 0, 945, 946,
	947, 960, 0, 944, 942, 943, 935, 936, 937, 938,
	940, 941, 1048, 1061, 1051, 1080, 1043, 1071, 1070, 0,
	0, 1045, 1044, 1060, 1049, 0, 0, 1082, 1081, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1046, 0, 0, 1077, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 1068, 1067, 0, 0, 0, 0, 0, 0,
	1050, 0, 1066, 0, 505, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 1063, 1064, 0, 0, 0, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1054, 1053, 1055, 1056, 1057, 1058, 1059, 0, 1079, 0,
	573, 0, 0, 0, 0, 575, 0, 0, 0, 0,
	581, 582, 0, 0, 591, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 507, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 585, 0, 0, 580, 587, 0, 0, 0,
	0, 0, 1060, 1049, 0, 0, 584, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 1046, 0, 0, 1077, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 0, 1083, 0, 583, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 588, 509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 593, 0, 0, 0, 510, 0, 0, 0, 0,
	586, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592,
}
var sqlPact = [...]int{

	30849, -1000, -8, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17798, -1000, -1000,
	21852, -1000, -1000, -1000, -1000, -1000, -1000, 21541, 715, 1088,
	-1000, -1000, -1000, -1000, -1000, 21852, 2801, 1094, 5422, 1197,
	21852, 17798, 1190, 1094, 23096, -1000, -1000, 23096, 1340, -1000,
	-1000, -1000, -1000, -1000, 27139, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 642, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 914, 700,
	105, 943, -1000, 823, 27, 14604, 31590, 495, 504, 495,
	495, 502, 725, 26828, 21852, 1598, -10, -1000, 285, 15555,
	30849, 608, -13, 18429, 21852, -1000, 1, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	315, 1, -1000, -1000, 21230, -1000, 1358, 1226, 1225, 19986,
	-1000, -1000, -1000, -1000, -1000, 297, -1000, 13288, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 960, -1000, -12, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10945, 294, 1356, 10945, 959, -1000,
	21852, -1000, -1000, -1000, 1393, -1000, -1000, -1000, -1000, -1000,
	382, 1770, 714, 288, 26517, -1000, 942, -1000, 375, 564,
	-1000, -1000, 14272, 8, 19986, -1000, 10945, 10945, 26206, 21852,
	21852, 1242, 25895, -1000, 823, -1000, -1000, 25584, 25273, 24962,
	24651, 24340, -1000, 1181, 1591, 1591, 1591, 1615, 122, 94,
	105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1726, -1000, -1000, -1000, -1000, 1741, -1000, -1000, -1000, -1000,
	-1000, 1393, 17487, 793, 1600, 1351, -1000, 956, 1350, 1349,
	1347, 1343, 1342, -1000, 783, -1000, 1372, 508, -1000, 1341,
	816, 485, -1000, 1339, 1337, 942, -1000, 942, -1000, -1000,
	-1000, 606, 23096, 20919, 24029, 21852, 20608, -14, 21852, -1000,
	286, -14, 9564, 9564, -1000, -1000, 285, -1000, 8874, 1328,
	191, -170, 117, 363, -1000, 14915, 16835, -1000, 17487, 18429,
	-13, -63, -1000, -1000, -1000, 5090, 673, 15875, 1, -1000,
	-1000, -1000, -1000, -1000, 19986, 21852, 21852, 722, 23718, 332,
	-1000, 10945, -22, -1000, -1000, 285, 17798, 1336, 30470, -1000,
	10945, 10945, 10945, 10945, 10945, 889, 326, -1000, 281, 279,
	6100, -1000, -1000, 1740, -1000, -1000, -1000, 106, -1000, -1000,
	10945, 1, -1000, -1000, -1000, -1000, 278, 1757, -1000, 450,
	-1000, -1000, -1000, 389, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1370, 275, 272, 260, -1000, -1000, -1000,
	-1000, 259, 254, 246, 245, 243, 242, 238, 235, 234,
	233, 226, 223, 222, 221, 220, 860, -1000, 441, -1000,
	-1000, 441, 441, -1000, 196, 196, 197, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 196, -1000, -1000, -1000, 427,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 218, 1664, 31491,
	17487, 30470, 17798, -1000, -1000, -1000, -1000, 21852, 10945, -1000,
	1663, 942, -17, -1000, -1000, -1000, -1000, 1092, 1254, 527,
	1169, 13940, 13608, 1553, -1000, -1000, -1000, 4, 5422, 112,
	-1000, 30470, 30470, 216, 1039, 403, 109, 23407, 403, 1033,
	-1000, 1181, 110, 1482, -1000, 110, 1474, 108, 1470, -1000,
	-158, -1000, 1469, -63, 1464, -1000, 969, 1161, 10255, 1151,
	10945, 105, -1000, -1000, 105, 105, 7136, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20297, -1000, -1000, 691,
	21852, 1365, 17798, 21852, 21852, 21852, 21852, 21852, -1000, -1000,
	190, 1299, 21852, 1083, -1000, -1000, 21852, 21852, 795, 634,
	-1000, -17, -1000, 23096, -1000, 1021, 1462, 483, 796, 1460,
	814, 809, 1458, 21852, -14, 1661, 21852, 74, -1000, 29827,
	-1000, 74, -1000, -23, -1000, 30470, -1000, 1186, 1183, 15555,
	1207, 898, 898, 898, -1000, 212, 318, 363, 4420, 10945,
	-1000, 19675, 901, 24, 97, 1328, -1000, 21852, 361, -1000,
	21852, -1000, -1000, -1000, 1334, -28, -1000, -1000, 428, 113,
	1659, 113, 16195, -1000, 21852, -29, 30470, 1106, 18742, 600,
	-1000, 31272, 31491, 5422, 624, 10945, 10945, 10945, 10945, 10945,
	10945, 10945, 10945, 10945, 10945, 10945, 10945, 10945, 10945, 10945,
	10945, 10945, 10945, 10945, 10945, 10945, 10945, 1263, 10945, 598,
	10945, 10945, 10945, 10945, 10945, 10945, 10945, 10945, 10945, 1136,
	923, 189, 1053, -1000, 1717, 1717, 1717, 30734, 30734, 133,
	326, -1000, 10945, -1000, 9910, 94, 29205, -15, -1000, -1000,
	-1000, 7481, 439, 30470, 1, 5754, -1000, 1738, 750, 1385,
	1282, 211, 90, 89, 88, 10945, 10945, 11635, 11635, 10945,
	11980, 10945, 10945, 6445, 10945, 10945, 10945, 10945, 10945, 10945,
	-1000, 199, -1000, -1000, -1000, -1000, 1736, -1000, -1000, 1735,
	-1000, 621, 617, 1734, 27, -33, -1000, 1649, -1000, -1000,
	-1000, -1000, 85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 197, 860, 196, 196, 196,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 427, -1000, -1000,
	441, 441, 441, -1000, -1000, -16, -1000, 1331, -1000, 391,
	-39, 487, -17, 942, 866, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1756, -20,
	-1000, -1000, -20, -1000, -1000, 5422, -1000, -1000, 19986, -1000,
	-1000, 19053, 1658, 1448, -1000, 867, -1000, 1641, 21852, 947,
	1032, -1000, 579, 1447, -1000, -1000, 21852, 21852, -1000, 21852,
	-1000, 21852, 21852, 5422, 21852, 21852, -1000, -1000, -1000, 30470,
	-1000, 346, -1000, -1000, 30470, 782, 1229, -1000, 1229, -21,
	-1000, 29648, 1176, 21852, -1000, -1000, -1000, -1000, -1000, 21852,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 134, -1000,
	-1000, -1000, -1000, 21852, 21852, 21852, -1000, -81, 854, -1000,
	19364, 1585, 1572, 1563, 19986, 1630, 27, 1325, 1629, 27,
	1321, 596, 21852, 594, 591, 19986, -1000, 194, -40, 428,
	9564, 15555, 5422, -1000, 428, 8874, -1000, 15555, 15555, 963,
	1180, 15555, -1000, -1000, -1000, -1000, 19675, 358, 363, 19675,
	-1000, 1733, 1139, -41, -1000, -1000, 21852, 193, -1000, 363,
	87, 1258, 965, -1000, 671, 1319, 21852, 771, 10945, 806,
	-1000, 15235, 447, 21852, 771, 70, -1000, -1000, -1000, 357,
	21852, -1000, -1000, 10945, -1000, -1000, 21852, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 374, 804, 804,
	570, 570, 570, 570, 1694, 1502, 650, 533, 2645, 2645,
	2645, 3603, 236, 236, 2645, 2645, 2645, 30734, 30649, 214,
	10945, 10945, 578, 908, 189, 214, 10945, 214, 214, 214,
	214, 31179, 31179, 31179, 31000, 31000, -1000, 1288, -1000, -1000,
	-1000, -1000, 1317, 179, 11980, 11980, -1000, -1000, -1000, 6100,
	12312, -1000, -1000, -1000, -1000, 178, 10945, -1000, 29267, -207,
	-46, -1000, -1000, 10945, -65, -139, -1000, -1000, 662, -1000,
	10945, -1000, -27, 10945, 10945, 10945, 83, 82, -1000, 575,
	-1000, 573, 563, 558, -1000, 176, 895, 168, 166, 10945,
	-1000, -1000, -1000, 30385, 27841, 81, 1315, -178, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 80, 72, 30356, -178, 71,
	3496, -1000, 11980, 11980, 11980, 6100, 163, 68, 29563, -178,
	30206, 9219, 9219, 9219, 67, 30091, 10945, -178, 27805, 27776,
	3538, -48, -50, -52, 1731, -54, 66, 372, 371, 65,
	-1000, -1000, 31491, 324, 323, -1000, 1728, 418, 17487, 21852,
	-1000, 1222, -1000, -1000, 723, -1000, 844, -1000, 14604, -1000,
	-1000, 50, -66, -37, 31491, -1000, -1000, -1000, -1000, -1000,
	21852, 277, 21852, 21852, -1000, 162, 1174, 1141, 27, 21852,
	1754, 27, 21852, 1443, 1497, 344, 21852, -1000, 110, 110,
	-1000, 108, -1000, -1000, -63, 782, -1000, 10945, 1723, -1000,
	-1000, -1000, 7136, -1000, -1000, -1000, 21852, -166, -80, -1000,
	-1000, -1000, -1000, -1000, 361, 773, 21852, 21852, 21852, -1000,
	-1000, 1024, 22785, 1009, 31491, 160, 21852, 21852, 22474, 22163,
	21852, 805, 27, -1000, 158, 27, -1000, 155, 21852, 797,
	21852, 21852, 784, 27, -1000, 1280, -1000, -94, 1328, -1000,
	1280, -1000, -1000, 963, -1000, 154, 10945, 15555, -1000, 314,
	-1000, -85, -1000, 19675, -1000, 312, -204, -1000, 355, -1000,
	363, 153, 21852, 19675, -1000, 418, 1308, 655, -1000, 668,
	-1000, -1000, 6790, 30470, -1000, 771, 1582, -87, -1000, -1000,
	-1000, 428, 16195, 15555, 8874, -97, 30470, -80, 10945, 214,
	214, 10945, 11980, 11980, -1000, 214, -1000, -1000, -1000, -1000,
	-1000, 1307, 152, 10945, 31491, 3471, 3382, -98, -1000, 8529,
	-71, -1000, 10945, -1000, 29088, -1000, -1000, 322, 1492, -1000,
	10945, 29941, 47, 8184, -1000, 29912, -30, -30, -1000, 1747,
	1049, 921, 821, 736, 1718, -1000, 16515, 429, 906, 29026,
	31272, 31491, -1000, 10945, -1000, -1000, 1298, 10945, -1000, 31272,
	31491, 11980, 11980, 11980, 11980, 11980, 11980, 11980, 11980, 11980,
	11980, 11980, 11980, 11980, 11980, 11980, 11980, 11980, 11980, 11980,
	1179, 11980, 1702, 1702, 1702, -79, 7839, -1000, 1291, 1298,
	10945, 10945, 31491, 46, 44, 43, -1000, 10945, -178, 10945,
	10945, 10945, -1000, -1000, -1000, 36, -1000, 1715, -1000, -1000,
	-1000, -1000, -1000, 499, 1711, 33, -1000, 909, -1000, -80,
	-1000, -1000, -1000, -1000, -1000, 1245, -1000, 19053, -1000, 149,
	21852, 12968, 148, 767, 10945, 147, 146, -1000, 144, -1000,
	-1000, 143, 21852, 1101, 344, 18118, -1000, 403, -1000, -1000,
	-1000, 917, 28909, -1000, 1581, 5422, 21852, -1000, -1000, -1000,
	554, 553, 1442, -1000, 1006, -1000, 451, 886, -1000, 1435,
	1019, 1429, 1019, -1000, -81, 759, -1000, 10945, -1000, 10945,
	-1000, 538, -1000, -1000, 537, 32, 1273, 1614, -1000, 15555,
	1273, -1000, 21852, 30470, -1000, -170, -1000, 1709, -1000, -1000,
	1139, -1000, 4758, 19675, 21852, -102, -1000, -1000, 17487, 614,
	-1000, -111, -1000, -1000, 195, 27, 771, -1000, -120, -1000,
	345, 1648, 214, 3355, 273, 10945, 31491, 30915, -103, 10945,
	10945, -1000, -104, -1000, 10945, 311, 30470, -1000, -1000, -1000,
	30470, 10945, 1704, 10945, 31, 30, 29, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28, -1000, -1000, 27450, 10945,
	25, -1000, 23, 22, 30470, 1291, 30470, -1000, -1000, 586,
	586, 664, 664, 664, 664, 1702, 2543, 967, 717, 2163,
	2163, 2163, 3006, 470, 470, 2163, 2163, 2163, 1290, 1076,
	142, 3560, 10945, -109, -1000, -1000, -1000, 30470, 30470, 21,
	-1000, -1000, -1000, -178, 395, 28847, 28730, -1000, 20, -1000,
	310, 299, -1000, 141, -1000, 1249, -1000, 2253, 12968, 140,
	-119, -1000, 305, 1594, 10945, -1000, -1000, 138, 21852, -1000,
	28668, 12968, 21852, 19053, 1638, 12968, 934, 1117, 344, 18118,
	-1000, 579, -1000, -1000, -1000, 1581, -1000, 21852, 21852, 21852,
	1427, -1000, -1000, 1188, 1116, 478, 21852, -1000, 21852, -1000,
	21852, 21852, 21852, -123, -125, 21852, 21852, -1000, 420, 10945,
	10945, 1328, 420, -129, 363, -1000, -1000, -1000, 1696, -1000,
	-130, -1000, -127, 17167, 1513, 21852, 1561, -1000, -1000, 137,
	10945, 10945, 30915, -134, -1000, 214, 214, -1000, 28489, -1000,
	30470, -1000, 29912, -1000, -1000, -1000, -1000, 871, -1000, 28375,
	-1000, -1000, -1000, -1000, 11980, 1289, 136, 31491, 28310, -1000,
	-1000, 10945, -1000, -1000, -1000, -1000, -1000, 1745, 883, -1000,
	21852, -1000, 5422, 21852, 1283, 988, -1000, -1000, 1129, 135,
	11980, 21852, -140, 12968, 875, 12968, 1581, 1, 5422, 1581,
	28225, 5754, -146, -1000, -147, -148, 19, 27, -155, 21852,
	-1000, 344, 18118, -1000, 1497, -1000, -1000, -1000, -1000, 21852,
	987, -1000, 985, 10945, -1000, 31491, 1019, 1019, -1000, 536,
	530, 526, 515, -1000, -1000, -1000, 21852, 30470, -178, -1000,
	-1000, 19675, 215, -1000, -1000, 132, 1, 588, -161, 21852,
	-1000, -1000, 3995, 214, 214, -1000, -1000, 18, 906, 1613,
	-1000, 29453, 11980, 31491, -167, -1000, 28196, -171, -1000, 343,
	21852, 1296, -1000, -1000, 21852, 996, -1000, -1000, 10945, 3560,
	131, 875, -173, 1245, 130, -1000, -1000, -1000, -1000, -1000,
	-1000, 1594, -27, -1000, -1000, 827, 1245, -1000, 875, 129,
	18118, -1000, 1101, -1000, -1000, -1000, 30470, 1590, -1000, -1000,
	21852, 21852, 128, 127, -145, -1000, 1636, -1000, -1000, 10945,
	718, -1000, 428, -1000, -1000, 754, 10945, 29453, -179, -1000,
	-1000, 1745, -1000, -1000, 1744, 126, -1000, -1000, 1417, 27955,
	1065, 21852, 1245, 875, -1000, 21852, 1581, 16, 21852, -1000,
	1245, 12968, -1000, 1117, 459, 5422, -1000, -1000, 10945, 10945,
	21852, 118, -30, 16195, -1000, 15, 11290, 11290, -178, -1000,
	-1000, -1000, 21852, 1399, -1000, 922, 831, 13, -1000, 1245,
	-183, -1000, -1000, 109, -1000, -187, -1000, -1000, 10945, -1000,
	-189, -191, -1000, -1000, 12, -168, -1000, -1000, -1000, 12644,
	951, 743, 29384, -1000, -193, 21852, -1000, 931, 928, 683,
	-1000, -1000, -1000, -1000, -1000, -1000, 1065, 875, 30470, -1000,
	-1000, 1704, -1000, 1669, -1000, -1000, -1000, -1000, -1000, 1001,
	-1000, -1000, 1530, -1000, 468, 939, 939, 922, 1245, 10600,
	-1000, -1000, -1000, -1000, 1677, -1000, -1000, 1143, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2124, 2123, 1421, 1615, 2114, 2107, 2097, 2093, 2089,
	2087, 2074, 2070, 2066, 2065, 2064, 2063, 2062, 2061, 2060,
	2059, 2058, 2056, 2055, 2054, 2053, 2052, 1588, 2048, 2047,
	2046, 2045, 2042, 2039, 1586, 2038, 1584, 2037, 2035, 2034,
	2033, 2030, 1561, 1558, 2027, 83, 104, 1541, 2026, 2025,
	1530, 2024, 2021, 2020, 2019, 2018, 2017, 98, 2015, 2012,
	2010, 2008, 2007, 2004, 2003, 142, 155, 2002, 1492, 2000,
	1993, 1992, 1990, 1989, 1988, 1987, 1985, 1983, 1982, 1977,
	1976, 1975, 1974, 1973, 1971, 1970, 1967, 154, 1960, 1956,
	1449, 1418, 1955, 1953, 19, 1952, 73, 1949, 30, 139,
	2405, 131, 1948, 1945, 1940, 1938, 90, 85, 84, 1936,
	64, 1935, 1933, 40, 28, 18, 16, 1932, 91, 1931,
	1926, 1238, 20, 1924, 1922, 126, 1921, 45, 21, 147,
	148, 150, 106, 100, 1919, 1918, 1915, 1912, 36, 1911,
	2, 1910, 1908, 10, 58, 22, 1907, 79, 14, 1905,
	1904, 123, 1903, 63, 96, 1413, 185, 113, 1210, 1900,
	78, 13, 70, 1899, 1898, 143, 29, 1897, 26, 81,
	129, 1896, 37, 158, 120, 71, 121, 108, 1891, 1890,
	1889, 102, 1888, 105, 57, 1886, 1882, 47, 1880, 128,
	137, 1879, 1877, 87, 1875, 118, 1873, 1872, 152, 141,
	103, 6, 42, 50, 11, 1411, 1409, 109, 67, 46,
	43, 1871, 1632, 1395, 1874, 33, 93, 54, 32, 95,
	49, 69, 140, 25, 1870, 1869, 112, 1867, 1866, 1863,
	1861, 1860, 92, 1858, 1857, 72, 136, 74, 27, 44,
	86, 23, 53, 151, 115, 146, 101, 1846, 80, 114,
	1840, 34, 1838, 1837, 1565, 119, 1836, 1835, 1833, 1205,
	1099, 1026, 261, 1831, 1830, 886, 721, 1829, 1827, 55,
	1826, 117, 107, 1821, 132, 127, 15, 1816, 110, 66,
	88, 1814, 89, 39, 0, 315, 180, 1813, 111, 51,
	1812, 1810, 1809, 1808, 24, 1, 9, 8, 4, 5,
	82, 52, 1807, 1806, 122, 76, 60, 1805, 153, 1804,
	1802, 1801, 31, 1800, 17, 1797, 12, 1796, 1795, 7,
	3, 1793, 1791, 138, 1790, 94, 1782, 1650, 1781, 144,
	1775, 1774, 1501, 35, 97,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 7, 8, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 108,
	108, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 105, 105, 110, 110,
	110, 112, 112, 109, 109, 104, 104, 20, 55, 282,
	282, 283, 283, 93, 93, 97, 97, 94, 95, 95,
	96, 96, 26, 26, 26, 22, 22, 23, 24, 27,
	27, 27, 27, 27, 27, 34, 35, 35, 35, 35,
	35, 36, 36, 36, 36, 36, 41, 41, 39, 39,
	38, 38, 37, 37, 40, 40, 157, 157, 156, 156,
	159, 159, 42, 42, 45, 45, 45, 45, 45, 46,
	46, 46, 46, 46, 46, 46, 46, 250, 250, 249,
	44, 224, 224, 47, 182, 182, 48, 48, 48, 48,
	49, 56, 323, 323, 323, 327, 327, 328, 328, 329,
	329, 329, 329, 329, 329, 329, 325, 325, 53, 53,
	92, 60, 60, 60, 60, 60, 60, 62, 64, 61,
	61, 61, 63, 63, 65, 65, 65, 65, 66, 66,
	66, 66, 67, 67, 137, 137, 275, 274, 274, 280,
	280, 280, 135, 135, 135, 135, 135, 136, 136, 136,
	273, 273, 273, 273, 281, 281, 281, 281, 281, 281,
	279, 279, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	80, 80, 87, 87, 87, 87, 87, 87, 69, 74,
	74, 74, 70, 75, 76, 77, 77, 77, 71, 71,
	79, 79, 79, 78, 84, 84, 84, 84, 81, 81,
	81, 82, 82, 85, 85, 85, 72, 73, 86, 83,
	83, 83, 43, 324, 324, 326, 326, 51, 30, 30,
	31, 31, 138, 138, 139, 139, 203, 203, 203, 203,
	140, 140, 111, 111, 111, 202, 292, 292, 293, 293,
	293, 293, 293, 293, 294, 294, 294, 294, 294, 294,
	294, 290, 290, 291, 288, 288, 289, 289, 289, 289,
	330, 330, 201, 201, 143, 143, 297, 297, 297, 297,
	295, 295, 295, 295, 295, 298, 296, 299, 299, 299,
	299, 299, 236, 236, 236, 89, 32, 117, 117, 33,
	29, 29, 186, 186, 147, 147, 241, 241, 241, 128,
	128, 106, 106, 106, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 187, 187, 188, 188, 52,
	54, 59, 88, 88, 88, 21, 21, 25, 25, 58,
	332, 332, 124, 124, 124, 124, 125, 125, 198, 198,
	199, 199, 200, 200, 200, 119, 118, 120, 120, 28,
	28, 113, 113, 114, 114, 115, 115, 116, 116, 333,
	333, 50, 50, 91, 131, 131, 195, 195, 195, 197,
	197, 196, 196, 196, 172, 172, 172, 90, 152, 152,
	161, 161, 162, 162, 247, 163, 163, 57, 57, 100,
	100, 98, 98, 98, 98, 98, 98, 99, 99, 101,
	101, 101, 101, 101, 101, 101, 103, 305, 305, 305,
	308, 308, 304, 306, 306, 307, 307, 331, 331, 173,
	173, 173, 142, 141, 141, 145, 145, 144, 146, 146,
	240, 240, 240, 170, 170, 170, 170, 189, 189, 190,
	190, 191, 191, 192, 192, 192, 193, 193, 194, 194,
	169, 169, 220, 220, 102, 102, 151, 151, 153, 153,
	210, 210, 210, 211, 211, 209, 209, 209, 209, 242,
	242, 242, 242, 242, 242, 242, 321, 321, 321, 322,
	322, 239, 239, 243, 243, 243, 243, 243, 243, 237,
	237, 237, 237, 238, 238, 248, 248, 176, 176, 176,
	176, 174, 174, 175, 175, 244, 244, 244, 244, 171,
	171, 245, 245, 245, 204, 204, 251, 251, 251, 269,
	269, 150, 150, 150, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 253, 253, 253, 253, 255, 255, 255, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 268, 268, 268, 268,
	268, 256, 256, 263, 263, 264, 264, 265, 266, 257,
	257, 258, 258, 259, 260, 267, 267, 267, 267, 271,
	271, 261, 261, 261, 261, 261, 262, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 184, 184, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	214, 214, 214, 214, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 300, 300, 300, 300, 300,
	300, 300, 302, 302, 303, 303, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 309, 309, 310, 310, 312,
	312, 313, 313, 314, 315, 315, 315, 316, 317, 317,
	311, 311, 318, 318, 318, 319, 319, 320, 320, 320,
	320, 320, 226, 226, 226, 227, 227, 228, 234, 234,
	234, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 126, 126, 126,
	126, 126, 158, 158, 223, 223, 221, 221, 221, 225,
	225, 177, 177, 270, 270, 270, 270, 270, 270, 270,
	178, 178, 178, 185, 179, 179, 180, 180, 180, 180,
	180, 180, 217, 218, 181, 181, 181, 219, 219, 229,
	233, 233, 232, 231, 231, 230, 230, 207, 207, 208,
	208, 206, 205, 166, 166, 165, 165, 164, 164, 334,
	334, 235, 235, 167, 167, 168, 160, 160, 246, 246,
	246, 246, 154, 154, 133, 133, 155, 155, 129, 129,
	132, 132, 130, 130, 130, 130, 148, 148, 149, 149,
	127, 127, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 272, 272, 272, 222, 121, 121, 121,
	122, 122, 123, 123, 277, 277, 277, 278, 278, 278,
	278, 276, 276, 276, 276, 276, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 6, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 4, 6, 4, 6,
	4, 6, 3, 5, 3, 5, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 3, 3, 0, 2, 3, 2, 3,
	6, 6, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 1, 1, 1, 1, 1, 3, 4, 5, 3,
	2, 6, 3, 4, 3, 3, 3, 3, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 1, 1, 1, 1, 1, 2, 3, 4,
	4, 4, 4, 2, 4, 4, 4, 4, 4, 4,
	2, 3, 3, 2, 4, 5, 4, 5, 2, 3,
	3, 4, 2, 4, 3, 3, 4, 4, 2, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 4, 3, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	3, 2, 1, 1, 1, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 1, 4, 4, 4, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -44,
	-55, -54, -56, -59, -57, -52, -53, -60, -68, -88,
	-89, -90, -91, -5, -6, -7, -8, 39, -23, -24,
	72, -28, -29, -30, -31, -32, -33, 94, -307, 98,
	-37, -38, -39, -41, -40, 109, 111, 129, 135, 217,
	223, 243, 245, 247, 254, -98, -100, 241, 242, -61,
	-62, -63, -64, -92, 265, -69, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -86, -21, -25, -58, 305, -9, -10, -13,
	-12, -11, -16, -18, -15, -17, -19, -14, 52, 74,
	-305, 102, -101, -99, 356, 314, 268, 40, 277, 66,
	105, 249, 28, 330, 337, 258, -102, -103, 322, 286,
	359, -323, -155, 286, 87, -130, -121, 349, 4, -284,
	-286, 25, 26, 28, 38, 39, 40, 45, 49, 52,
	53, 60, 65, 66, 67, 69, 71, 72, 73, 76,
	77, 85, 86, 88, 90, 94, 96, 98, 101, 102,
	104, 109, 110, 111, 117, 118, 123, 125, 130, 135,
	136, 137, 138, 145, 148, 150, 143, 160, 161, 162,
	164, 165, 166, 169, 168, 173, 176, 179, 181, 182,
	183, 186, 184, 188, 189, 191, 190, 196, 198, 199,
	201, 204, 207, 210, 213, 214, 215, 216, 217, 219,
	221, 223, 225, 226, 227, 228, 229, 231, 232, 234,
	235, 236, 237, 238, 241, 239, 240, 242, 243, 244,
	245, 247, 249, 250, 252, 266, 267, 278, 254, 255,
	256, 257, 261, 259, 262, 263, 265, 268, 270, 273,
	276, 277, 279, 282, 280, 275, 285, 287, 288, 289,
	290, 291, 292, 293, 300, 301, 305, 306, 307, 308,
	311, 312, 313, 314, 316, 319, 320, 321, 326, 331,
	332, 333, 334, 335, 33, 41, 42, 43, 44, 46,
	47, 50, 51, 56, 57, 58, 61, 89, 91, 92,
	108, 112, 113, 119, 120, 121, 131, 133, 139, 140,
	149, 151, 152, 153, 154, 155, 157, 171, 185, 195,
	197, 208, 212, 220, 222, 230, 251, 260, 271, 272,
	281, 283, 295, 296, 297, 302, 303, 318, 322, 323,
	-129, -121, 87, -121, 223, 27, 96, 148, 313, 312,
	27, 219, 259, 288, 290, -121, -46, 356, -45, -4,
	-27, -36, -47, -42, -43, -68, -57, -34, -50, -90,
	-91, -327, 27, -328, -329, 74, 102, 129, 258, 148,
	96, 312, -276, 4, -284, -286, -285, -287, 63, 75,
	128, 147, 141, 159, 163, 172, 174, 187, 209, 211,
	248, 269, 27, 29, 30, 31, 32, 34, 35, 36,
	37, 48, 54, 55, 59, 62, 64, 70, 74, 78,
	79, 81, 80, 82, 83, 84, 93, 95, 97, 99,
	100, 103, 105, 107, 114, 115, 116, 124, 126, 127,
	129, 132, 134, 142, 144, 146, 156, 158, 167, 170,
	175, 177, 178, 192, 193, 194, 200, 202, 203, 205,
	206, 218, 224, 233, 246, 258, 264, 274, 284, 286,
	294, 298, 299, 304, 309, 310, 315, 317, 324, 325,
	327, 328, 329, 330, 161, -121, -323, 161, -327, -125,
	254, -121, -125, -87, 262, 4, 27, 87, 186, 264,
	295, 176, 60, 251, 262, -66, 301, -65, 295, -275,
	-67, -156, 186, -121, -331, 286, 161, 227, 286, 315,
	325, -186, 87, 310, -99, -101, -100, 325, 286, 144,
	87, 315, -144, -145, 309, 156, 107, 206, -98, -100,
	-305, -280, -273, -236, 9, 304, 114, 202, -279, 8,
	348, -272, -278, 5, 7, 347, 4, -284, -286, -285,
	-87, 262, 39, 60, 27, 65, 88, 130, 144, 145,
	165, 70, 71, 226, 176, 162, 300, 166, 263, 287,
	301, 74, 316, 291, 110, -332, 301, 301, -332, -332,
	-124, 301, 298, 286, 144, 87, 325, -308, 231, -304,
	-121, -308, -141, -142, 27, 99, 360, -168, 356, -242,
	354, -244, -129, -100, -243, 356, 203, -3, 298, 360,
	-155, -148, -121, -206, -205, 358, 127, 356, -165, -166,
	-205, -206, -121, 27, 127, 158, 158, -245, -244, -129,
	-182, 356, -250, -249, -278, 322, 202, 360, -212, -214,
	347, 348, 342, 192, 336, -226, -216, -229, 108, 251,
	356, -129, -215, 361, 9, -302, -100, 34, -227, -228,
	54, -121, 7, 8, 5, 6, -127, -253, -222, -262,
	304, 114, 194, -300, -301, 4, -284, -277, -254, -264,
	-258, -261, 157, 63, 79, 80, 83, 81, 84, 264,
	315, 55, 33, 112, 113, 212, 220, 283, 302, 303,
	139, 195, 140, 61, 131, 171, 101, 42, 44, 46,
	47, 56, 57, 89, 91, 92, 119, 120, 121, 149,
	151, 152, 153, 154, 155, 197, 230, 271, 281, 296,
	297, 323, -285, -265, -266, -259, -260, -267, -224, 356,
	127, -212, 202, -121, -87, 335, 2, 266, 356, -66,
	58, 301, -199, -200, -118, -119, -120, 160, 225, 229,
	335, 298, 341, 127, -280, -137, 93, -159, 358, -171,
	-244, -212, -212, -156, 139, -121, -156, 144, -121, 139,
	-144, -145, -157, 139, -156, -157, 139, -133, 139, -132,
	-129, -121, 139, -148, 139, -170, -189, -190, 175, 116,
	200, -173, 27, 99, -173, -173, 49, 357, 357, 8,
	7, 7, -87, -282, -279, 9, 266, 226, 263, 60,
	127, -324, 202, 127, 127, 127, 127, 127, 226, 263,
	124, 300, 127, 160, 225, 278, 286, 325, 127, 127,
	-198, -199, -198, 298, -125, -244, 139, -129, -132, 139,
	-121, -244, 139, 360, -308, -149, 356, -160, -246, -212,
	349, -160, -168, -167, -235, -212, 93, 75, -176, 163,
	187, 128, 172, 248, 147, 7, -46, -209, 361, 356,
	349, -239, 337, -100, -243, -242, -129, 356, -282, -130,
	360, -276, 349, 279, 357, -154, -129, -166, -245, -131,
	-129, -131, 265, -121, 35, -158, -212, 357, 360, -323,
	-329, 10, 11, 62, 38, 347, 348, 349, 350, 122,
	351, 352, 345, 346, 344, 339, 340, 341, 68, 180,
	253, 13, 14, 15, 31, 205, 174, 336, 141, 269,
	342, 16, 17, 18, 19, 20, 21, 22, 23, 159,
	41, 142, -126, -134, -212, -212, -212, -212, -212, 211,
	-164, -207, 354, -100, 356, -100, -212, -158, 7, -100,
	-221, 354, -230, -212, -165, 356, 5, 356, 5, -309,
	331, 124, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	222, -271, 326, -271, -271, -255, 356, -255, -256, 356,
	-255, 332, 337, 356, 35, -223, -251, -252, -254, -263,
	-257, -261, -262, 45, 51, 50, 293, 185, 260, 272,
	318, 43, 201, 150, 149, 151, 152, 153, 154, 155,
	271, 42, 230, 120, 121, 119, 101, 92, 91, 197,
	47, 46, -265, -266, -259, -260, 89, 296, 297, 157,
	44, 57, 56, 323, 281, -283, -282, -323, -65, -275,
	-158, 35, -199, 360, 173, -136, 179, 191, 136, 203,
	333, -281, 5, 4, -222, -236, 93, 176, -262, -274,
	93, -280, -274, 93, 77, 358, -276, -110, 360, 53,
	244, 356, -143, 192, -117, -306, 330, -143, 356, -122,
	139, -121, -306, 192, -170, -110, 360, 108, -110, 108,
	-110, 360, 108, 361, 108, 108, -190, -189, -191, -212,
	27, -194, 118, 188, -212, -214, -99, -99, -99, -146,
	-240, -212, 224, 144, -156, 27, 267, -275, -326, 124,
	-323, -275, -275, -275, -275, -275, 262, -46, 124, -121,
	173, -275, -275, 286, 144, 286, -125, -108, 239, -107,
	26, 28, 102, 320, 108, 275, 292, 255, 275, 292,
	255, 239, 108, 239, 239, 108, -304, 35, -148, -151,
	360, 127, 35, 4, -151, 360, 357, 163, 163, -242,
	-176, 163, -174, 209, -174, -174, -321, 356, 355, -239,
	-276, 354, 362, -158, -238, -237, 35, -121, 207, 357,
	-129, -248, 338, -121, 127, 357, 360, -204, 328, -195,
	-57, 356, 93, 35, -195, -161, -162, -247, -163, -129,
	356, -121, 357, 360, -46, -249, 298, -269, -251, -268,
	235, 236, 234, 238, 237, -251, -276, 295, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
	174, 141, 269, 41, 142, -212, 298, -212, -212, -212,
	-212, -212, -212, -212, -212, -212, 184, 192, 194, 304,
	114, 311, 99, 198, -334, 284, 37, -219, -100, 356,
	-234, 32, 274, 27, -226, 251, 356, -207, -212, -208,
	-158, 357, 357, 360, -158, -225, 355, -221, -233, -232,
	327, 357, -158, 324, 27, 99, 349, 7, -183, 334,
	183, 90, 137, 182, -184, 257, -310, 117, 132, 356,
	357, 357, 357, -212, -212, -177, -270, -158, 4, 334,
	183, 90, 137, 182, 257, -177, -178, -212, -158, -179,
	-213, -214, 347, 348, 342, 356, 251, -180, -212, -158,
	-212, 48, 170, 299, -181, -212, 127, -158, -212, -212,
	-212, -158, -158, -158, 356, 7, 7, 295, 295, 7,
	-45, 357, 360, -150, 34, -183, 356, -248, 360, 127,
	357, 301, -200, -135, 229, 273, 240, 261, 360, -276,
	-244, -138, -148, -139, -121, -203, -202, -290, -291, -288,
	144, 310, 115, 70, -289, 59, 224, 126, 35, 108,
	216, 35, 202, 192, -113, 289, 108, -156, -157, -157,
	-132, -133, -276, -121, -148, -192, -272, 356, 348, -193,
	251, 252, 360, -106, 36, 97, 164, -129, -325, -121,
	262, -46, -129, -132, -129, 360, 298, -187, 70, 64,
	-202, 139, 64, -288, -121, 310, -187, 70, -187, 70,
	70, -244, 38, -57, 127, 38, -57, 127, 298, -132,
	298, 298, -244, 356, 357, -204, -246, -153, -242, -276,
	-204, -235, -242, -242, -175, 317, 202, 163, -242, -237,
	357, -322, 7, -239, -238, 7, -211, -210, 125, 190,
	357, -121, 356, -239, 357, -93, 138, 198, 279, 127,
	-129, -172, 246, -212, -172, -197, 202, -154, 322, -121,
	-172, -152, 360, 127, 341, -154, -212, -325, 335, -212,
	-212, 298, -334, 284, -219, -212, 184, 194, 304, 114,
	311, 99, 198, 127, 356, -213, -213, -158, -216, 356,
	-158, 355, 364, 357, -212, 355, 355, 360, -231, -232,
	103, -212, -145, 360, -144, -212, -158, -158, 357, 357,
	298, 298, 298, 298, 356, -315, 210, 356, 356, -212,
	35, 360, 357, 127, 357, 357, -185, 218, 357, 10,
	11, 347, 348, 349, 350, 122, 351, 352, 345, 346,
	344, 339, 340, 341, 68, 180, 253, 13, 14, 15,
	159, 142, -213, -213, -213, -158, 356, 357, -217, -218,
	127, 124, 35, -181, -181, -181, 357, 127, -158, 360,
	360, 360, 357, 357, 357, 7, 357, 360, 357, 335,
	335, 357, -251, 354, 354, 7, -96, 330, -282, -325,
	-118, 308, 67, 229, -280, 357, 357, 360, -251, -122,
	144, 356, -122, -121, 356, 164, 164, -57, -156, 5,
	-57, -129, 108, -114, 104, -333, 341, -121, -110, -110,
	-110, -193, -212, -240, -129, 361, 360, -248, -107, -129,
	-121, -121, 192, -202, 139, -112, 192, -121, -121, 139,
	-121, 139, -121, -121, -108, 239, -57, 356, -57, 356,
	-121, 239, -121, -129, 239, -45, -169, 132, -248, 360,
	-169, -175, 356, -212, -242, 355, 357, 360, -238, 355,
	360, 363, 341, -239, 356, -148, -237, -96, 127, 285,
	279, -160, 193, -172, 69, 357, -204, -162, -153, -235,
	357, -212, -212, -213, -213, 127, 356, -212, -223, 31,
	31, 357, -158, 357, 360, -208, -212, 357, -221, 105,
	-212, 294, 357, 324, -145, -145, -145, 5, 183, 137,
	182, -184, 182, -184, -184, 7, -316, -121, 356, 328,
	-144, 357, -269, -251, -212, -217, -212, -269, -251, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, 99, 192,
	198, -213, 360, -158, 357, -218, -217, -212, -212, -251,
	357, 357, 357, -158, -212, -212, -212, 357, 7, 355,
	7, 7, 357, 204, -140, 143, -203, -292, 356, -122,
	-147, -241, -121, -303, 356, -300, -301, -127, 356, -289,
	-212, 356, 356, 356, -143, 356, -121, -115, 169, -333,
	-279, -306, 203, 357, -106, -276, -121, 298, 298, 108,
	192, 319, -105, 102, 265, -188, 108, -110, 108, -110,
	298, -187, 70, -158, -158, 298, 298, 357, -220, 134,
	49, -242, -220, -148, -209, 7, -210, -276, 354, -238,
	-148, 357, -283, 295, -196, 356, 202, -57, -172, 341,
	31, 31, -212, -223, 357, -212, -212, 357, -212, 355,
	-212, 5, -212, 357, 357, 357, 357, -317, -121, -212,
	357, 357, 357, -218, 127, 99, 198, 356, -212, 357,
	357, 360, 357, 357, 357, 355, 355, 356, 142, -293,
	70, -294, 62, 115, 74, 192, 194, 310, 224, 59,
	93, 233, -147, 356, 357, 360, -128, -165, 62, -128,
	-212, 356, -148, 357, -147, -148, -138, 35, -147, 202,
	-116, 168, -333, -279, -113, -106, -121, -121, -202, 108,
	192, 93, 192, 93, 86, 306, -121, -121, -129, -121,
	-121, 357, 357, -121, -129, -312, 329, -212, -158, -312,
	357, -239, 7, 357, -215, -127, -121, 100, -148, 70,
	-168, -100, 356, -212, -212, 357, 357, -145, -311, 215,
	357, -213, 127, 356, -223, 357, -212, -95, -94, 5,
	213, -121, -276, -121, 115, 139, 194, 164, 356, -213,
	-129, 357, -147, -201, -330, 73, 282, -241, -106, -276,
	-106, 357, -158, 357, 357, 357, 357, -57, 357, -129,
	-333, -279, -114, -202, 194, 194, -212, -251, -110, -110,
	298, 298, 298, 298, -313, -314, -121, -238, 355, 356,
	312, 193, 357, -121, 357, -145, 49, -213, -223, 357,
	357, 360, 357, -97, 341, -129, -294, -122, 192, -212,
	-123, 356, -201, 357, -140, 356, -128, -145, 233, -140,
	-201, 356, -279, -115, -109, 62, -121, -121, 356, 356,
	360, 35, -158, 265, -204, -318, 228, 252, -158, 357,
	-94, 5, 356, 108, 357, -297, 181, -121, -140, -201,
	-148, -106, 357, -129, -140, -147, -116, -104, 317, -276,
	-158, -158, -314, -316, -145, -161, 357, -319, -320, 41,
	307, 77, -212, -319, -148, 115, -295, -298, -296, 202,
	128, 214, 270, 357, -140, 357, -143, 357, -212, 357,
	357, 357, -204, -320, 221, 123, 251, 221, 123, 357,
	-121, -296, 202, -298, 202, 312, 96, -297, -201, 31,
	-111, 53, 244, -299, 189, 244, 53, 265, -299, -295,
	-140, -320, 25, 194, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 34, 35, 36, 37, 0, 105, 106,
	0, 109, 110, 111, 112, 113, 114, 0, 0, 0,
	121, 122, 123, 124, 125, 0, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 477, -2, 0, 0, 191,
	192, 193, 194, 195, 0, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 412, 413, 414, 508, 38, 39, 40,
	41, 42, 45, 46, 47, 48, 43, 44, 0, 383,
	505, 0, -2, 516, 0, 0, 0, 421, 0, 421,
	421, 425, 0, 0, 0, 514, 491, 492, 0, 0,
	-2, 0, 172, 0, 1058, 986, 992, 993, 1017, 1018,
	1019, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	0, 988, 1058, 166, 1117, 168, 0, 0, 0, 0,
	116, 117, 118, 119, 120, 165, 142, 0, 149, 150,
	151, 152, 153, 154, 155, 156, 144, 145, 146, 147,
	148, 0, 175, 176, 177, 179, 180, 181, 182, 183,
	184, 185, 302, 1031, 1032, 1033, 1034, 1035, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 0, 162, 0, 0, 0, 411,
	1144, 427, 409, 188, 0, 262, 263, 264, 265, 266,
	0, -2, 1046, 1232, 1150, 200, 1171, 208, 1238, 0,
	211, 216, -2, 138, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 382, -2, 487, 488, 0, 0, 0,
	0, 0, -2, 0, 511, 511, 511, 0, 0, 488,
	0, 190, 219, 220, 221, 230, 231, 232, 233, 372,
	0, 374, 240, 241, 1013, 0, 1027, 1028, 1029, 1030,
	260, 0, 0, 0, 263, 0, 273, 304, 0, 0,
	0, 0, 0, 280, 0, 283, 0, 0, 288, 292,
	0, 0, 298, 0, 0, 429, 420, 429, 417, 418,
	419, 422, 0, 0, 0, 0, 0, 497, 1123, 500,
	999, 498, 0, 0, 513, 512, 0, 544, 0, 496,
	506, 558, 595, 572, 563, 0, 0, 2, 0, 0,
	173, 174, 996, 994, 995, 0, 0, 0, 989, 965,
	963, 964, 167, 169, 0, 0, 0, 0, 601, 595,
	163, 0, 0, 157, 159, 1244, 0, 0, 307, 703,
	0, 0, 0, 0, 0, 0, 800, 802, 1206, 1232,
	0, 804, 805, 0, 807, 809, 810, 0, 813, 814,
	956, 988, 1002, 1003, 1004, 1005, 0, 0, 1008, 0,
	1010, 1011, 1012, 856, 823, -2, -2, 1000, 631, 632,
	633, 634, -2, 1246, 827, 829, 831, 833, 834, 835,
	836, 0, 1190, 1207, 1208, 1228, 1229, 1237, 1241, 1242,
	1214, 1225, 1215, 1202, 1212, 1223, 1064, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1026, 665, 666, 671, 672, 674, 0, 0,
	0, 410, 0, 426, 189, 267, 196, 0, 0, 199,
	1201, 1171, 202, 430, 432, 433, 434, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 139, 0, 80,
	599, 107, 108, 355, 1214, -2, 355, 1021, 504, 1214,
	-2, 0, 80, 1214, 136, 80, 1214, 80, 1214, 984,
	991, 132, 1214, 134, 1214, 483, 525, 526, 0, 0,
	0, 0, 509, 510, 0, 0, 0, 479, 480, 373,
	1015, 1014, 261, 268, 89, 90, 0, 281, 289, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 282, 290,
	506, 0, 0, 0, 294, 295, 0, 0, 0, 0,
	415, 428, 416, 0, 424, 0, 1214, 595, 0, 1214,
	0, 0, 1214, 0, 499, 0, 0, 547, 976, 980,
	981, 547, 545, 0, 973, 971, 972, 0, 0, 0,
	0, 592, 592, 592, 590, 566, 0, 572, 0, 0,
	596, 584, 0, -2, 563, 0, 597, 0, 586, 987,
	0, 961, 962, 102, 0, 0, 982, 966, 605, 0,
	454, 0, 0, 602, 0, 0, 912, 506, 0, 0,
	178, 0, 0, 0, 0, 891, 892, 893, 894, 895,
	896, 899, 900, 897, 898, 901, 902, 903, 0, 0,
	0, 904, 905, 906, 0, 0, 908, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 907, 708, 709, 710, 732, 733, 0,
	801, 967, 960, 803, 0, -2, 912, 0, 806, 811,
	812, 0, 0, 955, -2, 0, 1007, 0, 700, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	650, 668, 679, 676, 675, 652, 0, 651, 649, 0,
	653, 0, 0, 0, 506, 0, 914, 613, 614, 615,
	616, 617, 700, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 662, 0, 637, 637, 637,
	654, 655, 663, 664, 669, 670, 681, 682, 684, 686,
	680, 680, 680, 677, 678, 586, 91, 0, 197, 0,
	0, 0, 203, 0, 0, 435, 227, 228, 229, 437,
	438, 209, 234, 235, 236, 237, 238, 239, 0, 204,
	206, 217, 205, 207, 210, 0, 140, 375, 0, 78,
	79, 313, 0, 0, 376, 0, 503, 0, 0, 0,
	1214, 1020, 442, 0, 486, 126, 0, 0, 128, 0,
	130, 0, 0, 0, 0, 0, 523, 524, 527, 531,
	532, 535, 538, 539, 529, 703, 493, 494, 495, 517,
	518, 393, 0, 0, 269, 270, 271, 272, 274, 0,
	303, 275, 276, 277, 278, 279, 284, 286, 506, 291,
	293, 296, 297, 0, 0, 0, 423, 49, 406, 59,
	0, 406, 406, 0, 0, 0, 0, 55, 0, 0,
	57, 0, 0, 0, 0, 0, 501, 0, 0, 605,
	0, 0, 0, 979, 605, 0, 975, 0, 0, 0,
	0, 0, 587, 591, 588, 589, 0, 0, 572, 584,
	555, 0, 0, 0, 562, 583, 0, 582, 571, -2,
	0, 94, 0, 997, 0, 0, 0, 466, 0, 466,
	456, 0, 0, 0, 466, 469, 470, 472, 473, 0,
	0, 603, 164, 0, 143, 158, 0, 704, 609, 610,
	656, 657, 658, 659, 660, 705, 706, 0, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, -2, -2,
	-2, 724, 725, 726, -2, -2, -2, 730, 731, -2,
	909, 911, 0, 970, 0, -2, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 749, 0, 751, 754,
	756, 758, 0, 0, 0, 0, 969, 768, 947, 0,
	0, 888, 889, 890, 753, 0, 0, 968, 959, 0,
	0, -2, 808, 0, 0, 0, 918, 919, 954, 950,
	0, 815, 516, 0, 0, 0, 0, 0, 1016, 687,
	688, 689, 690, 691, 692, 701, 866, 0, 0, 0,
	828, 830, 832, 0, 0, 0, 0, 922, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 912, 932, 0,
	0, 771, 0, 0, 0, 0, 1232, 0, 912, 940,
	0, 0, 0, 0, 0, 912, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 161, 0, 606, 608, 618, 0, 101, 0, 0,
	198, 0, 431, 436, 0, 224, 0, 226, 0, 141,
	600, 0, 0, 312, 996, 314, 316, 317, 318, 319,
	1021, 0, 1021, 0, 345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 450, 0, 137, 80, 80,
	985, 80, 990, 133, 135, 0, 533, 0, 0, 530,
	536, 537, 0, 520, 391, 392, 0, 0, 305, 186,
	285, 287, 299, 300, 586, 0, 0, 0, 0, 405,
	61, 1214, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 54, 0, 0, 0,
	0, 0, 0, 506, 998, 541, 977, 586, 548, 978,
	541, 974, 574, 0, 576, 0, 0, 0, 578, 0,
	567, 0, 569, 584, 560, 0, 0, 553, 0, 552,
	572, 580, 0, 0, 598, 101, 0, 0, 103, 0,
	983, 115, 0, 604, 451, 466, 0, 0, 458, 455,
	453, 605, 0, 0, 0, 0, 913, 170, 0, -2,
	-2, 0, 0, 0, 769, -2, 750, 752, 755, 757,
	759, 0, 0, 0, 0, 0, 0, 0, 770, 0,
	0, 957, 960, -2, 913, 916, 917, 0, 0, 951,
	0, 0, 0, 0, 515, 516, 516, 516, 821, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	0, 0, 839, 0, 840, 841, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 774, 775, 776, 0, 0, 843, 938, 939,
	0, 0, 0, 0, 0, 0, 848, 0, 945, 0,
	0, 0, 852, 853, 854, 0, 635, 0, 661, 683,
	685, 673, 915, 0, 0, 0, 88, 0, 92, 171,
	201, 222, 223, 225, 218, 321, 354, 0, 327, 0,
	1021, 0, 0, 0, 0, 0, 0, 310, 355, 377,
	379, 0, 0, 446, 450, 0, 449, 504, 127, 129,
	131, 0, 0, 519, 393, 0, 0, 301, 60, 395,
	0, 0, 0, 63, 1214, 71, 0, 408, 72, 1214,
	80, 1214, 80, 73, 50, 406, 51, 0, 52, 0,
	403, 0, 394, 401, 0, 0, 543, 0, 546, 0,
	543, 575, 0, 594, 577, 558, 568, 0, 565, 556,
	0, 557, 0, 584, 0, 0, 564, 87, 0, 0,
	104, 464, 465, 452, 463, 0, 466, 471, 468, 474,
	0, 707, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 948, 0, 883, 0, 0, 959, -2, 920, 949,
	953, 0, 816, 0, 0, 0, 0, 1009, 693, 694,
	695, 696, 697, 698, 699, 0, 864, 865, 869, 0,
	0, 826, 0, 0, 921, 931, 933, 772, 773, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, -2,
	-2, -2, 790, 791, 792, -2, -2, -2, 0, 0,
	0, 934, 0, 0, 886, 936, 937, 942, 943, 0,
	845, 846, 847, 944, 0, 0, 0, 667, 0, 611,
	0, 0, 619, 0, 308, 0, 315, 325, 0, 0,
	0, 384, 390, 390, 0, 824, 825, 0, 0, 344,
	0, 0, 0, 313, 0, 0, 0, 448, 450, 0,
	441, 442, 528, 534, 521, 393, 187, 0, 0, 0,
	0, 81, 65, 0, 0, 0, 0, 69, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 502, 860, 0,
	0, 549, 860, 0, 572, 570, 554, 550, 0, 561,
	0, 581, 93, 0, 0, 0, 0, 457, 467, 0,
	0, 0, -2, 0, 762, -2, -2, 882, 913, 958,
	952, 1006, 516, 817, 819, 820, 702, 871, 868, 0,
	855, 837, 838, 930, 0, 0, 0, 0, 913, 885,
	844, 0, 850, 851, 636, 612, 607, 0, 0, 326,
	0, 329, 0, 0, 0, 0, 335, 336, 0, 0,
	0, 0, 0, 0, 353, 0, 393, 1001, 0, 393,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	439, 450, 0, 443, 444, 522, 397, 399, 62, 0,
	0, 77, 0, 0, 407, 0, 80, 80, 396, 0,
	0, 0, 0, 404, 402, 489, 0, 542, 540, 490,
	593, 584, 0, 579, 585, 0, 0, 0, 0, 0,
	475, 476, 0, -2, -2, 763, 884, 0, 516, 0,
	857, -2, 0, 0, 0, 887, 0, 0, 98, 96,
	0, 0, 330, 331, 1021, 0, 334, 337, 0, 339,
	1023, 353, 0, 321, 0, 350, 351, 385, 386, 389,
	387, 390, 516, 343, 348, 0, 321, 311, 353, 0,
	0, 445, 446, 64, 66, 67, 76, 84, 68, 74,
	0, 0, 0, 0, 859, 861, 0, 559, 551, 0,
	0, 460, 605, 462, 818, 874, 0, -2, 0, 798,
	849, 0, 100, 97, 0, 0, 328, 332, 0, 0,
	359, 0, 321, 353, 347, 0, 393, 0, 0, 309,
	321, 0, 447, 448, 86, 0, 398, 400, 0, 0,
	0, 0, 516, 0, 461, 0, 0, 0, 870, 799,
	99, 95, 0, 0, 338, 364, 0, 0, 341, 321,
	0, 388, 816, 355, 380, 0, 440, 70, 0, 83,
	0, 0, 862, 863, 0, 605, 867, 872, 875, -2,
	1174, 1055, 0, 873, 0, 0, 340, 360, 361, 0,
	356, 357, 358, 1022, 342, 352, 359, 353, 85, 56,
	58, 0, 459, 0, 877, 878, 879, 880, 881, 324,
	333, 362, 0, 363, 0, 0, 0, 364, 321, 0,
	320, 322, 323, 365, 0, 368, 369, 0, 366, 349,
	381, 876, 367, 370, 371,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 345, 3, 351, 346, 3,
	356, 357, 349, 347, 360, 348, 358, 350, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 364, 359,
	339, 341, 340, 3, 361, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 354, 3, 355, 352, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 362, 344, 363, 342,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 343, 57682, 353, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:866
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:872
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:878
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:908
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:920
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:951
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:955
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:961
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:968
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:989
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql.y:1006
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1013
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1024
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1029
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1034
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1039
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1044
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1049
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1053
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1056
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1066
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:1076
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1079
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1086
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1096
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1105
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1115
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1119
		{
			sqlVAL.union.val = nil
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1125
		{
			sqlVAL.union.val = DropCascade
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1129
		{
			sqlVAL.union.val = DropRestrict
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1133
		{
			sqlVAL.union.val = DropDefault
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1139
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1143
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1148
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1149
		{
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1152
		{
			return unimplemented(sqllex, "alter using")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1153
		{
		}
	case 87:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:1157
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1163
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1169
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1173
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1179
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1189
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1193
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1199
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1203
		{
			sqlVAL.str = ""
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1209
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1215
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1225
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1228
		{
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1232
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1236
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:1240
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1251
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1258
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1275
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1282
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1285
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1286
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1287
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1288
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1300
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1304
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1310
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1314
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1320
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1328
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1338
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1342
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1348
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1352
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1358
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1362
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1368
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1372
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1378
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1389
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1393
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1413
		{ /* SKIP DOC */
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1419
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1433
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1443
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1447
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1454
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1465
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1469
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1476
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1482
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1488
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1492
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1499
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1506
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1513
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1517
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1521
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1528
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1531
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1535
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1539
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1546
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1550
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1554
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1558
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1562
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1566
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1570
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1578
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1589
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1593
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1600
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1612
		{ /* SKIP DOC */
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1613
		{ /* SKIP DOC */
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1614
		{
			return unimplemented(sqllex, "set local")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1618
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1627
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1633
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1637
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1642
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1648
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1652
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1658
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1662
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1666
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1670
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1679
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1683
		{
			return unimplemented(sqllex, "set from current")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1690
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1695
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1702
		{
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1704
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1711
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1723
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1729
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1733
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1737
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1741
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1745
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1751
		{
			sqlVAL.union.val = Low
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1755
		{
			sqlVAL.union.val = Normal
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1759
		{
			sqlVAL.union.val = High
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1765
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1769
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1773
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1780
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1791
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1795
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1804
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1808
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1837
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1838
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1849
		{
			sqlVAL.str = "client_encoding"
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1852
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1856
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1862
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1866
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1870
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1876
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1882
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1888
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1894
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1898
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1902
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1908
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1912
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1918
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1922
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1926
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1932
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1938
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1942
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1946
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1950
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1956
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1960
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1964
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1970
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1974
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1985
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1997
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2003
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2009
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2015
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2025
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2032
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2038
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2043
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2049
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2053
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2060
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:2068
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2072
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2078
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql.y:2082
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2089
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2095
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2105
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2117
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2125
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2132
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2137
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2142
		{
			sqlVAL.union.val = DropDefault
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2148
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2163
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2169
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2173
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2177
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2181
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2185
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2189
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2207
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2211
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2215
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2219
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2223
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2227
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2231
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:2240
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2249
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2262
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2274
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2279
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2285
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2291
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2301
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2311
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2334
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2338
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2344
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2348
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2353
		{
			return unimplemented(sqllex, "match full")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2354
		{
			return unimplemented(sqllex, "match partial")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2355
		{
			return unimplemented(sqllex, "match simple")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2356
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2362
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2363
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2364
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2365
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2366
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2369
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2372
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2375
		{
			return unimplemented(sqllex, "no action")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2378
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2379
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2380
		{
			return unimplemented(sqllex, "action set null")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2381
		{
			return unimplemented(sqllex, "action set default")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2385
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2389
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2393
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2400
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2407
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2413
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2417
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2424
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql.y:2437
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql.y:2448
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2462
		{
			sqlVAL.union.val = true
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2466
		{
			sqlVAL.union.val = false
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2472
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2476
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2485
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2488
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2489
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2492
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2493
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2497
		{
			sqlVAL.union.val = Ascending
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2501
		{
			sqlVAL.union.val = Descending
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2505
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2511
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2517
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2521
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2525
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2529
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2533
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2535
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2539
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2543
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2549
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2553
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2559
		{
			sqlVAL.union.val = true
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2563
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2568
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2569
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2573
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2580
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2587
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2599
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2603
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2609
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2613
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2619
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2628
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2629
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2633
		{
			sqlVAL.str = ""
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2637
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2641
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2645
		{
			sqlVAL.str = ""
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2651
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2655
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2661
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2665
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2671
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2675
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2685
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2689
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2693
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2699
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2705
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2711
		{
			sqlVAL.union.val = ReadOnly
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2715
		{
			sqlVAL.union.val = ReadWrite
		}
	case 439:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2721
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql.y:2731
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2744
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2748
		{
			sqlVAL.str = ""
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2754
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2758
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2764
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2768
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2774
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2778
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2783
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2784
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2788
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:2794
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2803
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2816
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2820
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2826
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2830
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2834
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2840
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2844
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2850
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2854
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2856
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2862
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2867
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2871
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2878
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2884
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2885
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2889
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2903
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2915
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2919
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2963
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2969
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2973
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2988
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2992
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2996
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3000
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3004
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3008
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:3042
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:3055
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3069
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3078
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3087
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3098
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3115
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3116
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3117
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3120
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3121
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:3124
		{
			return unimplemented(sqllex, "cte")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3127
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3128
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3131
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3132
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3135
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3136
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3140
		{
			sqlVAL.union.val = true
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3144
		{
			sqlVAL.union.val = false
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3148
		{
			sqlVAL.union.val = false
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3154
		{
			sqlVAL.union.val = true
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3159
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3160
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3164
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3168
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3174
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3180
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3190
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3194
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3198
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3207
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3216
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3227
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3236
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3242
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3249
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3256
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3273
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3279
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3280
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3283
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3284
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3306
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3310
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3320
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3334
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3338
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3350
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3354
		{
			sqlVAL.union.val = &From{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3360
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3370
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3374
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3382
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3388
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3393
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3416
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3420
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3426
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3430
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:3437
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3456
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:3460
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3464
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3468
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3472
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3492
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3497
		{
			sqlVAL.union.val = nil
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3498
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3499
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3503
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3509
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3517
		{
			sqlVAL.union.val = true
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3521
		{
			sqlVAL.union.val = false
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3541
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3545
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3549
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3553
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3557
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3561
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3567
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3571
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3575
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3579
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3586
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3592
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3596
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3602
		{
			sqlVAL.str = astFullJoin
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3606
		{
			sqlVAL.str = astLeftJoin
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3610
		{
			sqlVAL.str = astRightJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3614
		{
			sqlVAL.str = astInnerJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3620
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3621
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3632
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3636
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3654
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3660
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3681
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3685
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3691
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3695
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3707
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3720
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3721
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3725
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3729
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3734
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3735
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3736
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3744
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3746
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3750
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3754
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3758
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3762
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3766
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3770
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3774
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3778
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3782
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3786
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3807
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3816
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3830
		{
			sqlVAL.union.val = nil
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3837
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3841
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3845
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3849
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3853
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3857
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3861
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3865
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3869
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3873
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3877
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3881
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3891
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3895
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3904
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3913
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3922
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3926
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3933
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3937
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3941
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3945
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3949
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3959
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3977
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3993
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4009
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4031
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4035
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4039
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4043
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4048
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4049
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4054
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4058
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4062
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4066
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4070
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4075
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4081
		{
			sqlVAL.union.val = year
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4085
		{
			sqlVAL.union.val = month
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4089
		{
			sqlVAL.union.val = day
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4093
		{
			sqlVAL.union.val = hour
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4097
		{
			sqlVAL.union.val = minute
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4107
		{
			sqlVAL.union.val = month
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4111
		{
			sqlVAL.union.val = hour
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4115
		{
			sqlVAL.union.val = minute
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4119
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4123
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4127
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4131
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4135
		{
			sqlVAL.union.val = nil
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4141
		{
			sqlVAL.union.val = second
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4144
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4168
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4172
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4176
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4179
		{
			return unimplemented(sqllex, "at tz")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4188
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4192
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4196
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4208
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4212
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4216
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4236
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4252
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4256
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4276
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4280
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4284
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4288
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: TSMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONLeftContains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONRightContains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONExtract, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONExtractText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4352
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4356
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4367
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4401
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4405
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4409
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4413
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4417
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4421
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4433
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4461
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4465
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4469
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4473
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4477
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4481
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4485
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4489
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4493
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4497
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4501
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4505
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4509
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4513
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4517
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4521
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4525
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4529
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4533
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4537
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4541
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4545
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4549
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4553
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4557
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4561
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4565
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4569
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4582
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4590
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4601
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4606
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4620
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4624
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4629
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4633
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4637
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4653
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4657
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4660
		{
			return unimplemented(sqllex, "variadic")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:4661
		{
			return unimplemented(sqllex, "variadic")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4663
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4667
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4671
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4684
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4691
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4700
		{
			return unimplemented(sqllex, "func_application")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4701
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4705
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4707
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4711
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4715
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4723
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4727
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4730
		{
			return unimplemented(sqllex, "current role")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4731
		{
			return unimplemented(sqllex, "current user")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4732
		{
			return unimplemented(sqllex, "session user")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4733
		{
			return unimplemented(sqllex, "user")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4735
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4739
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4743
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs(), Separator: " FROM "}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4747
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4751
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4755
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4759
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4762
		{
			return unimplemented(sqllex, "treat")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4764
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4776
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:4780
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4784
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4788
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4792
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4806
		{
			return unimplemented(sqllex, "within group")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4807
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4811
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4815
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4822
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4826
		{
			sqlVAL.union.val = Window(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4832
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4842
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4850
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4854
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4858
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4865
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4884
		{
			sqlVAL.str = ""
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4890
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4894
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4904
		{
			return unimplemented(sqllex, "frame range")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4905
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4906
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4909
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4910
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4916
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4917
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4918
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4919
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4920
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4931
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4935
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4939
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4945
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4949
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4955
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4961
		{
			sqlVAL.union.val = Any
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4965
		{
			sqlVAL.union.val = Some
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4969
		{
			sqlVAL.union.val = All
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4974
		{
			sqlVAL.union.val = Plus
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4975
		{
			sqlVAL.union.val = Minus
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4976
		{
			sqlVAL.union.val = Mult
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4977
		{
			sqlVAL.union.val = Div
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4978
		{
			sqlVAL.union.val = FloorDiv
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4979
		{
			sqlVAL.union.val = Mod
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4980
		{
			sqlVAL.union.val = Bitand
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4981
		{
			sqlVAL.union.val = Bitor
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4982
		{
			sqlVAL.union.val = Pow
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4983
		{
			sqlVAL.union.val = Bitxor
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4984
		{
			sqlVAL.union.val = LT
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4985
		{
			sqlVAL.union.val = GT
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4986
		{
			sqlVAL.union.val = EQ
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4987
		{
			sqlVAL.union.val = LE
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4988
		{
			sqlVAL.union.val = GE
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4989
		{
			sqlVAL.union.val = NE
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4993
		{
			sqlVAL.union.val = Like
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4994
		{
			sqlVAL.union.val = NotLike
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4995
		{
			sqlVAL.union.val = ILike
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4996
		{
			sqlVAL.union.val = NotILike
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5007
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5017
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5027
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5031
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5035
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5041
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5051
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5055
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:5077
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5081
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5085
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5091
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5098
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5102
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5119
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5123
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5127
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5131
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5135
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5139
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5145
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5151
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5157
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5161
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5165
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5171
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5175
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:5186
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5193
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:5203
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5209
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5213
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5220
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5226
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:5230
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5237
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5243
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5249
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5255
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5259
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5265
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5275
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5284
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5285
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5294
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5300
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5313
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5319
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5329
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5338
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5342
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5346
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5354
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5364
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5374
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5389
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5393
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5399
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5403
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5416
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5420
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5424
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5428
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5434
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5444
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5447
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5457
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5461
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5468
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5472
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5476
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5480
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:5483
		{
			return unimplemented(sqllex, "func const")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5485
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5489
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:5492
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5494
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5498
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5502
		{
			sqlVAL.union.val = DNull
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5509
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5513
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5519
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5554
		{
			sqlVAL.str = ""
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5560
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5564
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
