// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -o sql.go -p sql sql.y. DO NOT EDIT.

//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20

import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/IMQS/pgparser/parser/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48
// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:469
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const TS_MATCH = 57361
const JSON_LEFT_CONTAINS = 57362
const JSON_RIGHT_CONTAINS = 57363
const JSON_EXTRACT = 57364
const JSON_EXTRACT_TEXT = 57365
const ERROR = 57366
const ACTION = 57367
const ADD = 57368
const ALL = 57369
const ALTER = 57370
const ANALYSE = 57371
const ANALYZE = 57372
const AND = 57373
const ANY = 57374
const ANNOTATE_TYPE = 57375
const ARRAY = 57376
const AS = 57377
const ASC = 57378
const ASYMMETRIC = 57379
const AT = 57380
const BACKUP = 57381
const BEGIN = 57382
const BETWEEN = 57383
const BIGINT = 57384
const BIGSERIAL = 57385
const BIT = 57386
const BLOB = 57387
const BOOL = 57388
const BOOLEAN = 57389
const BOTH = 57390
const BY = 57391
const BYTEA = 57392
const BYTES = 57393
const CANCEL = 57394
const CASCADE = 57395
const CASE = 57396
const CAST = 57397
const CHAR = 57398
const CHARACTER = 57399
const CHARACTERISTICS = 57400
const CHECK = 57401
const CLUSTER = 57402
const COALESCE = 57403
const COLLATE = 57404
const COLLATION = 57405
const COLUMN = 57406
const COLUMNS = 57407
const COMMIT = 57408
const COMMITTED = 57409
const CONCAT = 57410
const CONFLICT = 57411
const CONSTRAINT = 57412
const CONSTRAINTS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPLAIN = 57453
const EXTRACT = 57454
const EXTRACT_DURATION = 57455
const EPOCH = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FILTER = 57460
const FIRST = 57461
const FLOAT = 57462
const FLOAT4 = 57463
const FLOAT8 = 57464
const FLOORDIV = 57465
const FOLLOWING = 57466
const FOR = 57467
const FORCE_INDEX = 57468
const FOREIGN = 57469
const FROM = 57470
const FULL = 57471
const GRANT = 57472
const GRANTS = 57473
const GREATEST = 57474
const GROUP = 57475
const GROUPING = 57476
const HAVING = 57477
const HELP = 57478
const HIGH = 57479
const HOUR = 57480
const INCREMENTAL = 57481
const IF = 57482
const IFNULL = 57483
const ILIKE = 57484
const IN = 57485
const INTERLEAVE = 57486
const INDEX = 57487
const INDEXES = 57488
const INITIALLY = 57489
const INNER = 57490
const INSERT = 57491
const INT = 57492
const INT2VECTOR = 57493
const INT2 = 57494
const INT4 = 57495
const INT8 = 57496
const INT64 = 57497
const INTEGER = 57498
const INTERSECT = 57499
const INTERVAL = 57500
const INTO = 57501
const IS = 57502
const ISOLATION = 57503
const JOB = 57504
const JOBS = 57505
const JOIN = 57506
const KEY = 57507
const KEYS = 57508
const KV = 57509
const LATERAL = 57510
const LC_CTYPE = 57511
const LC_COLLATE = 57512
const LEADING = 57513
const LEAST = 57514
const LEFT = 57515
const LEVEL = 57516
const LIKE = 57517
const LIMIT = 57518
const LOCAL = 57519
const LOCALTIME = 57520
const LOCALTIMESTAMP = 57521
const LOW = 57522
const LSHIFT = 57523
const MATCH = 57524
const MINUTE = 57525
const MONTH = 57526
const NAN = 57527
const NAME = 57528
const NAMES = 57529
const NATURAL = 57530
const NEXT = 57531
const NO = 57532
const NO_INDEX_JOIN = 57533
const NORMAL = 57534
const NOT = 57535
const NOTHING = 57536
const NULL = 57537
const NULLIF = 57538
const NULLS = 57539
const NUMERIC = 57540
const OF = 57541
const OFF = 57542
const OFFSET = 57543
const OID = 57544
const ON = 57545
const ONLY = 57546
const OPTIONS = 57547
const OR = 57548
const ORDER = 57549
const ORDINALITY = 57550
const OUT = 57551
const OUTER = 57552
const OVER = 57553
const OVERLAPS = 57554
const OVERLAY = 57555
const PARENT = 57556
const PARTIAL = 57557
const PARTITION = 57558
const PASSWORD = 57559
const PAUSE = 57560
const PLACING = 57561
const PLANS = 57562
const POSITION = 57563
const PRECEDING = 57564
const PRECISION = 57565
const PREPARE = 57566
const PRIMARY = 57567
const PRIORITY = 57568
const QUERIES = 57569
const QUERY = 57570
const RANGE = 57571
const READ = 57572
const REAL = 57573
const RECURSIVE = 57574
const REF = 57575
const REFERENCES = 57576
const REGCLASS = 57577
const REGPROC = 57578
const REGPROCEDURE = 57579
const REGNAMESPACE = 57580
const REGTYPE = 57581
const RENAME = 57582
const REPEATABLE = 57583
const RELEASE = 57584
const RESET = 57585
const RESTORE = 57586
const RESTRICT = 57587
const RESUME = 57588
const RETURNING = 57589
const REVOKE = 57590
const RIGHT = 57591
const ROLLBACK = 57592
const ROLLUP = 57593
const ROW = 57594
const ROWS = 57595
const RSHIFT = 57596
const SAVEPOINT = 57597
const SCATTER = 57598
const SEARCH = 57599
const SECOND = 57600
const SELECT = 57601
const SEQUENCES = 57602
const SERIAL = 57603
const SERIALIZABLE = 57604
const SESSION = 57605
const SESSIONS = 57606
const SESSION_USER = 57607
const SET = 57608
const SETTING = 57609
const SETTINGS = 57610
const SHOW = 57611
const SIMILAR = 57612
const SIMPLE = 57613
const SMALLINT = 57614
const SMALLSERIAL = 57615
const SNAPSHOT = 57616
const SOME = 57617
const SPLIT = 57618
const SQL = 57619
const START = 57620
const STATUS = 57621
const STDIN = 57622
const STRICT = 57623
const STRING = 57624
const STORING = 57625
const SUBSTRING = 57626
const SYMMETRIC = 57627
const SYSTEM = 57628
const TABLE = 57629
const TABLES = 57630
const TEMP = 57631
const TEMPLATE = 57632
const TEMPORARY = 57633
const TESTING_RANGES = 57634
const TESTING_RELOCATE = 57635
const TEXT = 57636
const THEN = 57637
const TIME = 57638
const TIMESTAMP = 57639
const TIMESTAMPTZ = 57640
const TO = 57641
const TRAILING = 57642
const TRACE = 57643
const TRANSACTION = 57644
const TREAT = 57645
const TRIM = 57646
const TRUE = 57647
const TRUNCATE = 57648
const TYPE = 57649
const UNBOUNDED = 57650
const UNCOMMITTED = 57651
const UNION = 57652
const UNIQUE = 57653
const UNKNOWN = 57654
const UPDATE = 57655
const UPSERT = 57656
const USE = 57657
const USER = 57658
const USERS = 57659
const USING = 57660
const UUID = 57661
const VALID = 57662
const VALIDATE = 57663
const VALUE = 57664
const VALUES = 57665
const VARCHAR = 57666
const VARIADIC = 57667
const VIEW = 57668
const VARYING = 57669
const WHEN = 57670
const WHERE = 57671
const WINDOW = 57672
const WITH = 57673
const WITHIN = 57674
const WITHOUT = 57675
const WRITE = 57676
const YEAR = 57677
const ZONE = 57678
const NOT_LA = 57679
const WITH_LA = 57680
const AS_LA = 57681
const POSTFIXOP = 57682
const UMINUS = 57683

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"TS_MATCH",
	"JSON_LEFT_CONTAINS",
	"JSON_RIGHT_CONTAINS",
	"JSON_EXTRACT",
	"JSON_EXTRACT_TEXT",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"EPOCH",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5965

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 33,
	360, 33,
	-2, 507,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 66,
	1, 478,
	203, 478,
	247, 478,
	356, 478,
	358, 478,
	360, 478,
	-2, 488,
	-1, 112,
	1, 481,
	203, 481,
	247, 481,
	356, 481,
	358, 481,
	360, 481,
	-2, 487,
	-1, 130,
	1, 33,
	360, 33,
	-2, 507,
	-1, 511,
	128, 1097,
	299, 1097,
	342, 1097,
	359, 1097,
	-2, 0,
	-1, 522,
	1, 215,
	360, 215,
	-2, 1102,
	-1, 534,
	117, 518,
	176, 518,
	201, 518,
	-2, 484,
	-1, 542,
	117, 517,
	176, 517,
	201, 517,
	-2, 482,
	-1, 696,
	357, 1029,
	-2, 1022,
	-1, 697,
	357, 1030,
	-2, 1023,
	-1, 703,
	5, 688,
	357, 688,
	-2, 1227,
	-1, 728,
	5, 647,
	-2, 1197,
	-1, 729,
	5, 682,
	357, 682,
	-2, 1199,
	-1, 730,
	5, 657,
	-2, 1200,
	-1, 731,
	5, 656,
	-2, 1201,
	-1, 732,
	5, 682,
	357, 682,
	-2, 1204,
	-1, 733,
	5, 682,
	357, 682,
	-2, 1205,
	-1, 734,
	5, 683,
	-2, 1208,
	-1, 735,
	5, 639,
	-2, 1209,
	-1, 736,
	5, 639,
	-2, 1210,
	-1, 737,
	5, 664,
	-2, 1214,
	-1, 738,
	5, 649,
	-2, 1215,
	-1, 739,
	5, 650,
	-2, 1216,
	-1, 740,
	5, 640,
	-2, 1221,
	-1, 741,
	5, 641,
	-2, 1222,
	-1, 742,
	5, 642,
	-2, 1223,
	-1, 743,
	5, 643,
	-2, 1224,
	-1, 744,
	5, 644,
	-2, 1225,
	-1, 745,
	5, 645,
	-2, 1226,
	-1, 746,
	5, 639,
	-2, 1231,
	-1, 747,
	5, 648,
	-2, 1236,
	-1, 748,
	5, 646,
	-2, 1239,
	-1, 749,
	5, 680,
	357, 680,
	-2, 1241,
	-1, 750,
	5, 684,
	-2, 1244,
	-1, 751,
	5, 686,
	-2, 1245,
	-1, 752,
	5, 679,
	357, 679,
	-2, 1250,
	-1, 796,
	217, 505,
	-2, 378,
	-1, 801,
	117, 517,
	176, 517,
	201, 517,
	-2, 485,
	-1, 906,
	107, 488,
	117, 488,
	157, 488,
	176, 488,
	201, 488,
	207, 488,
	310, 488,
	-2, 574,
	-1, 988,
	107, 488,
	117, 488,
	157, 488,
	176, 488,
	201, 488,
	207, 488,
	310, 488,
	-2, 814,
	-1, 997,
	357, 1006,
	-2, 994,
	-1, 1244,
	1, 575,
	75, 575,
	107, 575,
	117, 575,
	129, 575,
	133, 575,
	135, 575,
	148, 575,
	157, 575,
	164, 575,
	173, 575,
	176, 575,
	188, 575,
	201, 575,
	203, 575,
	207, 575,
	247, 575,
	249, 575,
	310, 575,
	318, 575,
	329, 575,
	330, 575,
	339, 575,
	356, 575,
	358, 575,
	360, 575,
	361, 575,
	-2, 574,
	-1, 1293,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 723,
	-1, 1294,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 724,
	-1, 1295,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 725,
	-1, 1299,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 729,
	-1, 1300,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 730,
	-1, 1301,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 731,
	-1, 1304,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 736,
	-1, 1310,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 738,
	-1, 1312,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 742,
	-1, 1313,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 743,
	-1, 1314,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 744,
	-1, 1315,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 745,
	-1, 1316,
	19, 0,
	20, 0,
	21, 0,
	-2, 746,
	-1, 1317,
	19, 0,
	20, 0,
	21, 0,
	-2, 747,
	-1, 1318,
	19, 0,
	20, 0,
	21, 0,
	-2, 748,
	-1, 1319,
	22, 0,
	23, 0,
	-2, 749,
	-1, 1320,
	22, 0,
	23, 0,
	-2, 750,
	-1, 1346,
	212, 887,
	-2, 890,
	-1, 1579,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 737,
	-1, 1580,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 739,
	-1, 1585,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 740,
	-1, 1603,
	212, 886,
	-2, 889,
	-1, 1806,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 741,
	-1, 1811,
	160, 0,
	-2, 762,
	-1, 1821,
	212, 888,
	-2, 891,
	-1, 1863,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 789,
	-1, 1864,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 790,
	-1, 1865,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 791,
	-1, 1869,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 795,
	-1, 1870,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 796,
	-1, 1871,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 797,
	-1, 1875,
	22, 0,
	23, 0,
	-2, 802,
	-1, 1876,
	22, 0,
	23, 0,
	-2, 803,
	-1, 1979,
	160, 0,
	-2, 763,
	-1, 1982,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 766,
	-1, 1983,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 768,
	-1, 2091,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 767,
	-1, 2092,
	16, 0,
	17, 0,
	18, 0,
	41, 0,
	142, 0,
	143, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 769,
	-1, 2099,
	160, 0,
	-2, 798,
	-1, 2165,
	160, 0,
	-2, 799,
	-1, 2237,
	41, 0,
	142, 0,
	175, 0,
	270, 0,
	337, 0,
	343, 0,
	-2, 1196,
}

const sqlPrivate = 57344

const sqlLast = 32494

var sqlAct = [...]int{

	697, 1900, 2281, 2244, 2236, 2213, 2245, 2235, 2246, 2121,
	1125, 2153, 1252, 1260, 2047, 1239, 2106, 1840, 1923, 1132,
	2018, 640, 2033, 1725, 618, 543, 1038, 1444, 1906, 1727,
	1907, 673, 2072, 392, 1088, 1128, 1481, 1462, 139, 1439,
	65, 139, 900, 1561, 1495, 1671, 904, 1547, 139, 1443,
	1452, 1526, 1440, 993, 1272, 1670, 139, 1954, 1369, 394,
	1614, 139, 139, 1344, 887, 139, 1534, 1698, 139, 1768,
	1525, 368, 1240, 878, 1192, 139, 376, 24, 1261, 1163,
	775, 1190, 1477, 1332, 1089, 1114, 1246, 1486, 1402, 550,
	110, 1354, 1329, 667, 687, 808, 918, 879, 140, 1120,
	1447, 561, 774, 690, 695, 1039, 1024, 1363, 1380, 666,
	803, 622, 558, 984, 562, 654, 567, 810, 1254, 366,
	1212, 1227, 609, 131, 139, 139, 499, 817, 891, 1028,
	139, 519, 818, 112, 139, 139, 694, 816, 1112, 553,
	517, 689, 862, 2034, 384, 922, 110, 135, 625, 607,
	648, 861, 1602, 1122, 515, 548, 822, 395, 503, 113,
	1784, 1122, 1257, 1785, 122, 1122, 1253, 682, 547, 1366,
	2267, 1639, 1640, 913, 542, 2258, 2257, 2255, 1268, 1268,
	2032, 620, 547, 2253, 901, 496, 913, 632, 2207, 2181,
	2170, 1420, 2032, 2169, 502, 521, 2167, 2160, 1572, 1420,
	913, 551, 1737, 2136, 1247, 136, 2032, 24, 351, 125,
	109, 1146, 1573, 2133, 568, 353, 913, 1367, 2132, 2131,
	110, 2032, 913, 365, 2119, 1214, 1771, 2032, 495, 136,
	2093, 2081, 501, 1420, 913, 501, 2078, 129, 111, 913,
	2069, 1606, 523, 1268, 535, 55, 1607, 56, 934, 935,
	1268, 954, 955, 956, 964, 965, 966, 967, 968, 969,
	970, 971, 1368, 1365, 2068, 2031, 1605, 1268, 2032, 957,
	534, 1268, 58, 128, 611, 570, 937, 2006, 2198, 973,
	1268, 123, 1984, 1981, 1645, 1268, 1420, 1968, 124, 1426,
	913, 610, 610, 1815, 1771, 1804, 1268, 351, 1251, 1213,
	936, 136, 633, 1247, 1493, 1799, 951, 114, 1251, 1780,
	1774, 1708, 1781, 1213, 913, 1688, 1686, 1685, 1689, 1268,
	1268, 1684, 1268, 122, 1268, 1426, 1603, 1550, 125, 1268,
	1268, 1738, 1878, 1818, 934, 935, 1613, 1370, 1522, 913,
	1428, 913, 1655, 1268, 1419, 1123, 1267, 1420, 1250, 1268,
	1709, 1251, 1480, 1123, 1436, 139, 129, 1123, 1096, 1348,
	139, 942, 937, 1221, 930, 874, 1220, 931, 567, 109,
	630, 658, 617, 130, 125, 564, 636, 1118, 789, 2259,
	961, 974, 2035, 905, 2251, 1542, 936, 2234, 2220, 2162,
	2134, 2011, 128, 2007, 1999, 125, 1998, 111, 972, 1488,
	123, 1997, 129, 829, 55, 116, 56, 124, 548, 1993,
	1992, 934, 935, 959, 1364, 1656, 1991, 1990, 1973, 952,
	1953, 1898, 1893, 129, 1888, 1887, 1256, 1340, 1886, 1826,
	1707, 58, 1712, 1693, 1690, 1678, 1424, 1001, 128, 937,
	1669, 1638, 1896, 1635, 958, 1572, 1634, 942, 1632, 1619,
	1618, 1554, 1377, 1376, 1375, 1247, 829, 1244, 1213, 128,
	994, 1144, 114, 936, 828, 637, 568, 123, 903, 1139,
	1131, 649, 114, 1121, 124, 902, 1842, 2210, 2197, 2196,
	2189, 2183, 655, 2179, 2157, 2116, 2101, 2090, 2038, 1639,
	1640, 2030, 953, 114, 2014, 639, 2004, 1921, 1919, 1918,
	1917, 139, 1914, 1904, 1810, 1788, 1776, 1761, 962, 1641,
	1642, 1643, 1644, 1646, 1647, 139, 1759, 1713, 903, 1716,
	1668, 1628, 643, 567, 942, 139, 1627, 351, 1624, 139,
	139, 139, 1341, 139, 1599, 1594, 1334, 1552, 139, 139,
	139, 139, 139, 1521, 1029, 1032, 1412, 1374, 1232, 1639,
	1640, 1219, 1124, 1036, 125, 1022, 1021, 1020, 1179, 1019,
	802, 1018, 1017, 1016, 116, 1015, 1014, 1013, 1012, 1011,
	934, 935, 1972, 567, 1010, 960, 1009, 1008, 948, 949,
	950, 963, 129, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 1007, 1006, 814, 801, 1005, 998, 937, 2008,
	987, 114, 1645, 139, 139, 139, 139, 139, 785, 139,
	619, 877, 769, 760, 652, 2156, 2013, 2012, 128, 1986,
	1783, 568, 936, 1779, 1233, 994, 123, 139, 139, 1696,
	567, 139, 1695, 124, 1405, 985, 791, 394, 784, 139,
	1639, 1640, 885, 782, 1713, 2172, 139, 139, 139, 806,
	139, 1728, 114, 1976, 1786, 1574, 905, 834, 139, 773,
	1034, 920, 1645, 765, 1692, 1035, 1691, 548, 764, 770,
	914, 568, 938, 939, 940, 941, 943, 944, 908, 636,
	1102, 1578, 523, 781, 535, 835, 783, 882, 883, 766,
	1003, 1129, 351, 1699, 638, 2073, 523, 796, 523, 1253,
	799, 1843, 825, 826, 1610, 523, 523, 351, 812, 633,
	534, 110, 548, 1355, 911, 866, 565, 1476, 872, 1025,
	857, 1568, 869, 1937, 794, 1475, 797, 2226, 568, 865,
	833, 2274, 2159, 805, 805, 395, 1540, 2273, 2062, 1704,
	1200, 899, 835, 602, 1106, 1105, 601, 564, 559, 863,
	1429, 940, 941, 943, 944, 596, 597, 649, 875, 858,
	1198, 1497, 567, 852, 139, 2151, 2150, 1948, 2149, 139,
	501, 351, 351, 871, 351, 907, 610, 1199, 912, 2148,
	1952, 932, 1951, 567, 567, 1934, 1933, 1623, 1622, 1000,
	394, 1895, 1621, 924, 351, 351, 921, 1620, 136, 139,
	1581, 1519, 1518, 933, 1516, 1311, 351, 546, 1130, 782,
	1103, 1271, 864, 351, 351, 351, 629, 926, 1497, 1970,
	1416, 1639, 1640, 1119, 1496, 136, 997, 1641, 1642, 1643,
	1644, 1646, 1647, 1109, 903, 1135, 1415, 540, 139, 1026,
	1027, 1282, 139, 1463, 139, 139, 139, 139, 139, 139,
	1188, 2158, 783, 1187, 139, 532, 525, 545, 139, 139,
	568, 605, 1793, 1331, 1045, 139, 1030, 2123, 1331, 1794,
	1558, 916, 1169, 768, 835, 139, 1033, 755, 139, 754,
	854, 568, 568, 2201, 925, 1111, 1836, 1090, 395, 1643,
	1644, 1646, 1647, 139, 1366, 539, 849, 1370, 1082, 1939,
	1092, 2264, 394, 1138, 1833, 139, 1141, 547, 1143, 1091,
	1562, 139, 2279, 944, 139, 1095, 356, 1110, 1193, 604,
	1194, 1108, 1115, 1107, 1766, 1453, 139, 1763, 139, 1355,
	1211, 136, 567, 850, 1645, 1235, 523, 394, 1478, 1479,
	1137, 110, 1367, 2186, 1224, 855, 1150, 1234, 2273, 1834,
	1149, 1193, 1193, 1194, 1194, 1207, 535, 1338, 702, 535,
	535, 1370, 1336, 2248, 1206, 757, 1134, 1173, 1591, 357,
	1281, 1180, 756, 1170, 1705, 1023, 1174, 1175, 1176, 1177,
	1178, 1703, 1159, 1647, 1589, 1160, 1161, 1368, 1365, 1184,
	1185, 1189, 1655, 1455, 1195, 1186, 1946, 1209, 856, 1255,
	395, 1255, 1458, 1217, 1218, 523, 2097, 2204, 898, 523,
	544, 136, 523, 523, 523, 523, 523, 1229, 1230, 920,
	110, 1182, 1225, 2263, 1370, 523, 523, 1195, 1195, 122,
	568, 2205, 501, 1167, 1122, 395, 2108, 538, 1045, 1045,
	1273, 1280, 610, 1259, 982, 633, 655, 1270, 1352, 2249,
	1269, 1626, 526, 1494, 1586, 528, 1228, 1566, 1243, 778,
	351, 603, 1370, 1940, 1587, 1656, 541, 660, 1592, 547,
	1204, 2284, 1242, 1639, 1640, 109, 537, 2124, 351, 533,
	385, 1248, 1899, 1928, 529, 1432, 1203, 2247, 565, 560,
	1872, 1454, 1339, 351, 530, 1266, 1434, 1342, 2272, 2270,
	606, 1562, 390, 111, 2280, 2250, 1201, 2046, 386, 1418,
	55, 1583, 56, 699, 838, 1460, 1330, 1435, 527, 394,
	1383, 2262, 139, 1202, 779, 139, 820, 110, 780, 1433,
	884, 843, 139, 359, 358, 1308, 387, 58, 763, 1364,
	139, 139, 657, 139, 360, 139, 139, 394, 139, 139,
	821, 839, 1437, 1423, 837, 389, 1650, 1648, 1649, 1641,
	1642, 1643, 1644, 1646, 1647, 1757, 1191, 139, 2002, 1557,
	2143, 2292, 2142, 139, 1588, 1425, 894, 1503, 2114, 2176,
	1470, 1590, 2058, 1936, 1873, 819, 1645, 139, 139, 139,
	1874, 1027, 1026, 1748, 139, 897, 1744, 1461, 139, 1430,
	1030, 1472, 1033, 1136, 1126, 1337, 139, 1155, 2282, 139,
	821, 1226, 1101, 1196, 2026, 139, 394, 395, 1548, 1832,
	895, 1498, 2061, 139, 139, 1523, 1123, 139, 2214, 2060,
	1528, 1529, 139, 1438, 1183, 139, 1306, 1309, 505, 1504,
	1506, 1469, 139, 820, 1655, 395, 1196, 1196, 2027, 1527,
	1544, 1466, 139, 1467, 1097, 1099, 1474, 139, 2115, 139,
	125, 506, 1468, 2283, 2048, 388, 139, 1100, 2003, 1305,
	116, 110, 139, 2291, 1532, 1533, 1511, 1156, 1538, 1514,
	1543, 1924, 2057, 1549, 2285, 1531, 1718, 928, 129, 351,
	1717, 1553, 1442, 1530, 1501, 1484, 896, 548, 1564, 633,
	497, 1489, 819, 1570, 1539, 1491, 990, 523, 523, 1509,
	523, 1524, 351, 351, 395, 1471, 633, 1656, 1537, 391,
	1520, 507, 1223, 1517, 128, 1222, 494, 778, 647, 2059,
	646, 545, 123, 798, 351, 1465, 805, 361, 805, 124,
	1487, 1901, 2015, 2112, 1388, 1556, 642, 1955, 2022, 890,
	2023, 1769, 132, 1567, 351, 351, 351, 672, 114, 1577,
	3, 1502, 1575, 641, 1307, 351, 1373, 2113, 2100, 2001,
	1672, 890, 1809, 351, 1792, 548, 351, 362, 1593, 1559,
	2025, 1515, 351, 1612, 1512, 380, 32, 379, 31, 2028,
	351, 351, 1427, 1584, 351, 1249, 375, 28, 350, 1242,
	860, 1582, 1242, 894, 1093, 859, 363, 853, 364, 1551,
	1649, 1641, 1642, 1643, 1644, 1646, 1647, 848, 847, 351,
	846, 508, 897, 845, 351, 894, 1569, 567, 139, 1598,
	378, 17, 844, 351, 548, 841, 761, 567, 892, 1487,
	372, 13, 645, 1673, 897, 1609, 1181, 895, 1172, 139,
	1004, 139, 139, 851, 374, 16, 1372, 2243, 139, 2211,
	892, 139, 893, 373, 14, 139, 2024, 2056, 1711, 895,
	1714, 371, 12, 1944, 382, 1942, 1935, 1536, 1724, 929,
	1464, 1457, 1208, 634, 893, 139, 631, 623, 1675, 1676,
	1677, 628, 1205, 377, 10, 139, 139, 139, 1197, 509,
	635, 139, 1148, 370, 8, 139, 139, 139, 139, 139,
	1702, 1700, 1147, 1145, 1142, 1701, 32, 139, 31, 139,
	139, 385, 1706, 896, 1045, 568, 1694, 28, 1745, 1140,
	510, 1823, 1726, 1719, 2085, 568, 1722, 1238, 139, 835,
	369, 4, 823, 390, 139, 896, 1045, 2274, 1710, 386,
	1117, 2087, 1482, 139, 139, 1508, 1733, 595, 615, 1782,
	1735, 17, 1798, 2193, 1497, 2035, 1730, 1731, 1740, 1732,
	1507, 13, 1497, 139, 139, 2164, 1956, 387, 1505, 1739,
	840, 827, 1513, 1510, 1800, 16, 381, 1758, 2199, 1778,
	1760, 1756, 1535, 1767, 14, 1487, 389, 1787, 1772, 1773,
	1775, 2044, 12, 1459, 1456, 1789, 1045, 1258, 1710, 1797,
	1210, 110, 1770, 1483, 824, 1094, 1134, 1037, 1134, 1715,
	1422, 1812, 1345, 1791, 10, 523, 1790, 139, 351, 1349,
	616, 2277, 1729, 1357, 8, 2290, 1795, 2080, 1076, 1803,
	1075, 1828, 1829, 1830, 1802, 1382, 1382, 1386, 1962, 1397,
	498, 1801, 351, 1720, 1897, 1409, 1410, 1411, 1639, 1640,
	1894, 1822, 351, 1742, 1743, 1839, 1819, 831, 1502, 934,
	935, 4, 1749, 1750, 1752, 1754, 1755, 598, 599, 1697,
	1835, 1837, 1838, 1687, 1762, 1846, 1764, 351, 1545, 1844,
	934, 935, 1849, 753, 1851, 1417, 1327, 1414, 1045, 934,
	935, 831, 830, 1413, 1362, 351, 388, 991, 832, 1988,
	139, 1242, 1325, 139, 2209, 2107, 1881, 650, 937, 1044,
	633, 1242, 1831, 1721, 1001, 139, 1078, 1882, 567, 999,
	767, 1920, 1905, 1077, 1045, 1045, 1273, 1847, 394, 139,
	351, 351, 936, 1045, 1045, 1273, 1852, 524, 2122, 383,
	1171, 936, 396, 842, 1541, 1231, 1925, 2203, 1994, 1902,
	391, 1625, 2152, 2096, 1371, 1927, 1915, 1002, 48, 1909,
	676, 1931, 139, 1930, 505, 2016, 1903, 139, 1045, 1446,
	1885, 1445, 1321, 397, 1104, 698, 552, 394, 139, 139,
	1322, 1274, 1323, 567, 1841, 758, 1328, 506, 700, 1042,
	701, 1043, 1947, 1966, 1031, 688, 1040, 653, 1913, 569,
	1262, 1335, 1076, 1076, 1075, 1075, 1353, 1608, 1912, 995,
	1964, 668, 1961, 1957, 680, 679, 568, 1969, 1350, 1960,
	1958, 1959, 1963, 759, 1546, 1565, 395, 1980, 1971, 1154,
	1926, 1967, 1473, 139, 1975, 1151, 1941, 531, 1636, 651,
	1911, 1395, 1943, 1387, 1945, 1384, 790, 507, 886, 983,
	1263, 788, 1571, 1421, 876, 1162, 613, 614, 612, 1441,
	786, 1098, 1431, 976, 1041, 975, 1974, 1502, 600, 2178,
	1134, 1908, 650, 777, 776, 395, 1127, 1747, 2278, 1158,
	2192, 568, 1922, 1044, 1044, 2000, 1938, 811, 2225, 127,
	1078, 1078, 1324, 126, 2171, 835, 1932, 1077, 1077, 1326,
	2105, 1555, 73, 30, 1045, 139, 29, 92, 91, 139,
	139, 90, 89, 88, 87, 86, 567, 85, 84, 83,
	82, 81, 2036, 2029, 139, 139, 139, 80, 79, 351,
	78, 77, 76, 139, 633, 139, 2041, 139, 139, 139,
	2045, 75, 139, 139, 2049, 1242, 633, 508, 520, 2043,
	72, 868, 811, 2055, 650, 2051, 71, 2039, 2052, 1597,
	70, 2042, 69, 139, 659, 27, 1600, 762, 23, 95,
	22, 20, 21, 26, 623, 909, 25, 18, 15, 9,
	19, 2076, 2077, 53, 1616, 1617, 919, 54, 52, 1913,
	51, 2088, 2082, 650, 923, 923, 792, 793, 2079, 1912,
	1995, 50, 1913, 11, 46, 2095, 1913, 45, 139, 44,
	394, 139, 1912, 43, 568, 2086, 1912, 42, 1667, 139,
	41, 2102, 7, 504, 94, 509, 394, 39, 2050, 1680,
	38, 1911, 6, 93, 5, 106, 103, 139, 1041, 1041,
	567, 105, 102, 2110, 1911, 104, 920, 139, 1911, 2120,
	107, 569, 99, 2125, 100, 2083, 510, 101, 98, 2127,
	2126, 97, 1908, 2128, 139, 2140, 36, 35, 2138, 34,
	139, 1389, 633, 33, 2141, 1908, 633, 1442, 139, 1908,
	2, 1, 880, 880, 880, 2155, 0, 0, 0, 888,
	0, 2053, 2054, 1502, 0, 0, 0, 0, 1045, 139,
	2063, 0, 2064, 139, 351, 2066, 2067, 0, 395, 2070,
	351, 2135, 2163, 2182, 0, 1913, 0, 1913, 2166, 2180,
	2174, 548, 2175, 0, 395, 1912, 2187, 1912, 2084, 567,
	633, 977, 978, 979, 980, 981, 2188, 0, 568, 139,
	139, 989, 2184, 0, 0, 0, 2185, 0, 0, 2191,
	0, 996, 2139, 2146, 2147, 0, 1045, 1911, 2145, 1911,
	0, 0, 0, 2202, 0, 0, 0, 0, 0, 0,
	139, 0, 2216, 0, 139, 2109, 2208, 139, 2111, 0,
	2222, 2217, 0, 0, 394, 0, 351, 0, 1908, 139,
	1908, 0, 139, 0, 0, 1045, 2224, 0, 0, 0,
	2230, 139, 0, 2241, 351, 2233, 569, 2231, 2223, 2252,
	0, 2219, 0, 0, 1502, 0, 2232, 2227, 0, 0,
	0, 0, 2254, 0, 1816, 0, 2218, 568, 0, 0,
	0, 2154, 2261, 0, 139, 0, 2260, 1242, 0, 0,
	623, 2190, 0, 2271, 2269, 2161, 0, 0, 0, 0,
	2275, 0, 0, 2242, 0, 2276, 569, 0, 1245, 0,
	0, 0, 0, 0, 677, 66, 351, 2286, 2288, 2287,
	1134, 0, 2289, 1264, 1913, 0, 0, 0, 0, 0,
	0, 122, 395, 0, 1912, 0, 0, 0, 1076, 1152,
	1075, 1157, 0, 1879, 0, 0, 0, 1164, 0, 0,
	0, 0, 0, 0, 1889, 0, 2194, 2195, 2026, 0,
	1076, 2019, 1075, 569, 0, 0, 1911, 0, 0, 2017,
	396, 66, 0, 2021, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 1639, 1640, 0, 2215, 0, 0,
	0, 633, 2027, 0, 351, 0, 0, 1908, 0, 0,
	0, 0, 0, 0, 0, 111, 2154, 0, 0, 351,
	0, 0, 55, 0, 56, 2020, 0, 0, 633, 1044,
	1076, 0, 1075, 0, 0, 536, 1078, 0, 0, 549,
	0, 0, 0, 1077, 1949, 0, 1950, 1389, 1389, 58,
	0, 1044, 1654, 0, 624, 66, 0, 0, 1078, 0,
	0, 2268, 0, 0, 0, 1077, 0, 0, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	0, 1310, 0, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 2022, 0, 2023, 569, 0, 1645, 1389, 1389,
	1389, 1044, 0, 0, 0, 1343, 0, 0, 1078, 0,
	0, 0, 1076, 0, 1075, 1077, 569, 569, 0, 650,
	0, 0, 0, 396, 2025, 0, 0, 0, 1378, 1379,
	1381, 1381, 1385, 2028, 1396, 1398, 1403, 1406, 1407, 1408,
	0, 0, 811, 811, 0, 0, 0, 0, 1076, 1076,
	1075, 1075, 0, 0, 0, 1655, 0, 1076, 1076, 1075,
	1075, 0, 125, 0, 1485, 0, 1639, 1640, 0, 0,
	0, 0, 116, 0, 1041, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 1490, 811, 1492, 0, 0, 0,
	129, 0, 1076, 1044, 1075, 650, 1041, 0, 0, 0,
	1078, 0, 0, 811, 0, 0, 650, 1077, 0, 0,
	2024, 0, 623, 0, 0, 0, 0, 0, 0, 0,
	623, 623, 0, 0, 623, 0, 128, 109, 1656, 1044,
	1044, 2075, 0, 0, 123, 396, 1078, 1078, 1044, 1044,
	0, 124, 0, 1077, 1077, 1078, 1078, 0, 0, 1560,
	0, 0, 1077, 1077, 919, 111, 1041, 0, 0, 0,
	114, 0, 55, 919, 56, 569, 0, 0, 0, 0,
	396, 0, 0, 1044, 0, 0, 0, 0, 0, 1645,
	1078, 0, 549, 0, 0, 0, 0, 1077, 0, 58,
	1389, 1389, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2130, 1595, 1596, 0, 0, 0, 1650,
	1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647, 1076, 0,
	1075, 0, 0, 880, 0, 0, 0, 1655, 0, 880,
	888, 0, 0, 0, 0, 0, 0, 0, 1041, 1389,
	1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
	1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 0, 1389,
	1389, 1389, 0, 1563, 0, 1664, 1665, 1666, 0, 0,
	0, 0, 0, 0, 1041, 1041, 0, 0, 1576, 0,
	0, 0, 0, 1041, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	1656, 0, 125, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 116, 1077, 0, 1579, 1580, 0, 1041, 0,
	0, 1585, 2200, 0, 0, 0, 0, 0, 0, 2206,
	129, 1639, 1640, 0, 1657, 1658, 1659, 0, 0, 0,
	0, 0, 396, 1661, 1662, 0, 0, 0, 1723, 0,
	0, 0, 1978, 0, 0, 536, 0, 0, 1604, 0,
	0, 2228, 2229, 0, 0, 1611, 128, 0, 1615, 0,
	396, 0, 1736, 0, 123, 0, 0, 0, 0, 0,
	0, 124, 1741, 0, 1629, 0, 0, 0, 0, 1654,
	0, 0, 1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647,
	367, 0, 0, 989, 0, 0, 0, 1765, 0, 1403,
	1403, 1403, 1076, 0, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 623, 66, 0, 0, 0,
	0, 906, 0, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 0, 0, 1645, 0, 1639, 1640, 0, 1657,
	1658, 1659, 0, 0, 1041, 0, 0, 1807, 1808, 0,
	1264, 623, 0, 934, 935, 0, 0, 0, 0, 0,
	1076, 0, 1075, 0, 986, 0, 988, 0, 0, 0,
	0, 1660, 0, 992, 0, 1734, 0, 0, 0, 0,
	1164, 937, 0, 1044, 0, 0, 0, 0, 0, 0,
	1078, 0, 1655, 0, 1654, 0, 0, 1077, 0, 1076,
	0, 1075, 0, 0, 0, 936, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 0, 1875, 1876, 1877, 0,
	0, 0, 0, 0, 0, 0, 1777, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 1078, 1645,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 1656, 942, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 1805, 0,
	1044, 1806, 0, 0, 0, 0, 0, 1078, 0, 1389,
	0, 0, 0, 1811, 1077, 0, 0, 0, 0, 0,
	0, 0, 1820, 0, 0, 0, 0, 1655, 0, 0,
	1824, 0, 0, 1576, 0, 1389, 0, 536, 0, 0,
	536, 536, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 1848, 0, 0, 0, 1850, 1041, 0,
	569, 0, 0, 0, 0, 0, 66, 0, 0, 623,
	569, 1651, 1652, 1653, 0, 0, 1650, 1648, 1649, 1641,
	1642, 1643, 1644, 1646, 1647, 0, 0, 0, 0, 0,
	0, 0, 1883, 1884, 0, 0, 0, 0, 0, 0,
	1656, 1890, 1891, 1892, 0, 0, 0, 624, 1389, 0,
	0, 0, 0, 0, 0, 0, 1041, 953, 0, 0,
	0, 0, 934, 935, 0, 954, 955, 956, 964, 965,
	966, 967, 968, 969, 970, 971, 1916, 66, 0, 66,
	0, 0, 0, 957, 0, 66, 0, 0, 0, 0,
	937, 0, 0, 973, 0, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 1651, 1652, 1653, 1333,
	0, 1650, 1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1979,
	0, 0, 0, 1982, 1983, 942, 0, 0, 1985, 0,
	0, 0, 934, 935, 2065, 1987, 0, 1989, 0, 0,
	2071, 0, 66, 0, 961, 974, 0, 0, 0, 0,
	0, 0, 0, 1996, 0, 0, 0, 0, 0, 0,
	937, 0, 972, 0, 0, 0, 0, 0, 0, 1639,
	1640, 0, 1657, 1658, 1659, 0, 2099, 959, 0, 0,
	0, 1661, 1662, 952, 936, 0, 1639, 1640, 2005, 1657,
	1658, 1659, 0, 0, 0, 0, 0, 0, 1661, 1662,
	0, 0, 2117, 0, 0, 0, 0, 1977, 958, 0,
	0, 0, 934, 935, 0, 0, 2118, 0, 0, 0,
	2037, 0, 0, 0, 0, 0, 0, 1654, 0, 0,
	0, 0, 0, 0, 2137, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 1654, 942, 0, 0, 0, 0,
	0, 569, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 396, 0, 0, 936, 2074, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 2165, 0, 0, 0, 0,
	0, 0, 1645, 0, 0, 0, 66, 2091, 2092, 0,
	0, 0, 0, 0, 934, 935, 2173, 0, 0, 1645,
	0, 0, 0, 952, 66, 0, 0, 66, 0, 0,
	396, 0, 0, 0, 0, 0, 569, 0, 2104, 624,
	0, 0, 937, 0, 0, 942, 0, 624, 624, 0,
	0, 624, 0, 0, 0, 0, 1660, 0, 0, 960,
	1655, 0, 948, 949, 950, 963, 936, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 1655, 0, 0,
	0, 549, 0, 1683, 0, 0, 0, 0, 0, 0,
	2144, 0, 0, 0, 2221, 0, 953, 0, 0, 0,
	0, 122, 0, 952, 0, 0, 0, 0, 0, 1264,
	0, 0, 37, 117, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 108, 0, 942, 0, 0,
	0, 0, 0, 1656, 1333, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 40, 2177, 109, 0, 0,
	1656, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 47, 0, 569,
	0, 49, 0, 0, 0, 111, 953, 0, 120, 0,
	0, 0, 55, 0, 56, 952, 0, 0, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 1651,
	1652, 1653, 0, 0, 1650, 1648, 1649, 1641, 1642, 1643,
	1644, 1646, 1647, 0, 2240, 2240, 1651, 1652, 1653, 0,
	0, 1650, 1648, 1649, 1641, 1642, 1643, 1644, 1646, 1647,
	0, 0, 0, 0, 0, 0, 2256, 0, 953, 0,
	0, 0, 0, 396, 0, 0, 0, 2240, 0, 946,
	938, 939, 940, 941, 943, 944, 0, 0, 0, 396,
	0, 66, 0, 0, 66, 0, 0, 0, 0, 0,
	0, 59, 0, 569, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2240, 0, 0,
	0, 0, 0, 0, 0, 67, 68, 61, 0, 62,
	0, 63, 0, 121, 0, 0, 0, 0, 64, 0,
	0, 0, 125, 0, 0, 66, 0, 0, 66, 74,
	0, 0, 116, 0, 0, 0, 66, 0, 0, 0,
	0, 118, 938, 939, 940, 941, 943, 944, 0, 0,
	129, 0, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 569, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 624, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 685, 686, 683, 684, 675, 0, 0, 0,
	114, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	713, 678, 0, 0, 0, 144, 145, 146, 295, 728,
	297, 729, 147, 730, 731, 0, 148, 301, 302, 149,
	150, 681, 712, 732, 733, 305, 0, 151, 724, 0,
	704, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 705, 706, 708, 0,
	707, 709, 161, 162, 352, 163, 734, 164, 735, 736,
	889, 165, 0, 166, 0, 167, 0, 0, 727, 169,
	0, 170, 0, 0, 0, 669, 171, 172, 173, 714,
	715, 0, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 624, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 66, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 125, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 129, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	656, 752, 0, 0, 288, 0, 0, 0, 123, 289,
	290, 291, 292, 293, 665, 124, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 0, 0, 0,
	0, 0, 0, 0, 671, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2089, 0, 0, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 412, 143,
	413, 414, 415, 416, 294, 417, 418, 419, 420, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 421,
	148, 301, 302, 149, 150, 422, 423, 303, 304, 305,
	424, 151, 306, 425, 398, 426, 152, 153, 154, 66,
	155, 427, 156, 157, 158, 428, 399, 159, 160, 429,
	430, 432, 431, 433, 434, 435, 161, 162, 352, 163,
	307, 164, 308, 309, 436, 165, 437, 166, 438, 167,
	439, 440, 168, 169, 441, 170, 442, 0, 443, 310,
	171, 172, 173, 311, 312, 988, 444, 445, 446, 174,
	175, 313, 314, 315, 0, 176, 447, 177, 448, 449,
	400, 450, 178, 316, 451, 317, 452, 179, 180, 181,
	182, 318, 319, 402, 453, 186, 454, 183, 455, 401,
	184, 320, 185, 321, 322, 323, 324, 325, 456, 326,
	457, 403, 187, 188, 189, 404, 190, 191, 192, 458,
	194, 193, 459, 327, 405, 195, 406, 460, 196, 461,
	462, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 463, 464, 465, 329, 207, 330,
	208, 209, 466, 210, 467, 468, 211, 469, 470, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	471, 219, 333, 220, 334, 221, 472, 222, 223, 224,
	225, 226, 335, 227, 228, 473, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 474, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	475, 253, 337, 252, 254, 255, 476, 256, 245, 246,
	257, 411, 258, 338, 339, 259, 477, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 478, 266, 479, 267,
	268, 269, 270, 271, 272, 273, 480, 342, 343, 344,
	481, 482, 274, 275, 345, 346, 483, 276, 277, 278,
	279, 484, 485, 280, 281, 282, 283, 486, 284, 487,
	347, 285, 286, 287, 348, 349, 488, 489, 288, 490,
	491, 492, 493, 289, 290, 291, 292, 293, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1236, 0, 0, 0,
	0, 0, 0, 0, 1237, 141, 142, 412, 143, 413,
	414, 415, 416, 294, 417, 418, 419, 420, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 421, 148,
	301, 302, 149, 150, 422, 423, 303, 304, 305, 424,
	151, 306, 425, 398, 426, 152, 153, 154, 0, 155,
	427, 156, 157, 158, 428, 399, 159, 160, 429, 430,
	432, 431, 433, 434, 435, 161, 162, 352, 163, 307,
	164, 308, 309, 436, 165, 437, 166, 438, 167, 439,
	440, 168, 169, 441, 170, 442, 0, 443, 310, 171,
	172, 173, 311, 312, 0, 444, 445, 446, 174, 175,
	313, 314, 315, 0, 176, 447, 177, 448, 449, 400,
	450, 178, 316, 451, 317, 452, 179, 180, 181, 182,
	318, 319, 402, 453, 186, 454, 183, 455, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 456, 326, 457,
	403, 187, 188, 189, 404, 190, 191, 192, 458, 194,
	193, 459, 327, 405, 195, 406, 460, 196, 461, 462,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 463, 464, 465, 329, 207, 330, 208,
	209, 466, 210, 467, 468, 211, 469, 470, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 471,
	219, 333, 220, 334, 221, 472, 222, 223, 224, 225,
	226, 335, 227, 228, 473, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 474, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 475,
	253, 337, 252, 254, 255, 476, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 477, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 478, 266, 479, 267, 268,
	269, 270, 271, 272, 273, 480, 342, 343, 344, 481,
	482, 274, 275, 345, 346, 483, 276, 277, 278, 279,
	484, 485, 280, 281, 282, 283, 486, 284, 487, 347,
	285, 286, 287, 348, 349, 488, 489, 288, 490, 491,
	492, 493, 289, 290, 291, 292, 293, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1965, 0, 0, 141, 142,
	412, 143, 413, 414, 415, 416, 294, 417, 418, 419,
	420, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 421, 148, 301, 302, 149, 150, 422, 423, 303,
	304, 305, 424, 151, 306, 425, 398, 426, 152, 153,
	154, 0, 155, 427, 156, 157, 158, 428, 399, 159,
	160, 429, 430, 432, 431, 433, 434, 435, 161, 162,
	352, 163, 307, 164, 308, 309, 436, 165, 437, 166,
	438, 167, 439, 440, 168, 169, 441, 170, 442, 0,
	443, 310, 171, 172, 173, 311, 312, 0, 444, 445,
	446, 174, 175, 313, 314, 315, 0, 176, 447, 177,
	448, 449, 400, 450, 178, 316, 451, 317, 452, 179,
	180, 181, 182, 318, 319, 402, 453, 186, 454, 183,
	455, 401, 184, 320, 185, 321, 322, 323, 324, 325,
	456, 326, 457, 403, 187, 188, 189, 404, 190, 191,
	192, 458, 194, 193, 459, 327, 405, 195, 406, 460,
	196, 461, 462, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 463, 464, 465, 329,
	207, 330, 208, 209, 466, 210, 467, 468, 211, 469,
	470, 212, 331, 408, 213, 409, 332, 214, 215, 216,
	217, 218, 471, 219, 333, 220, 334, 221, 472, 222,
	223, 224, 225, 226, 335, 227, 228, 473, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	474, 241, 410, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 475, 253, 337, 252, 254, 255, 476, 256,
	245, 246, 257, 411, 258, 338, 339, 259, 477, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 478, 266,
	479, 267, 268, 269, 270, 271, 272, 273, 480, 342,
	343, 344, 481, 482, 274, 275, 345, 346, 483, 276,
	277, 278, 279, 484, 485, 280, 281, 282, 283, 486,
	284, 487, 347, 285, 286, 287, 348, 349, 488, 489,
	288, 490, 491, 492, 493, 289, 290, 291, 292, 293,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 915, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 412, 143, 413, 414, 415, 416, 294,
	417, 418, 419, 420, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 421, 148, 301, 302, 149, 150,
	422, 423, 303, 304, 305, 424, 151, 306, 425, 398,
	426, 152, 153, 154, 0, 155, 427, 156, 157, 158,
	428, 399, 159, 160, 429, 430, 432, 431, 433, 434,
	435, 161, 162, 352, 163, 307, 164, 308, 309, 436,
	165, 437, 166, 438, 167, 439, 440, 168, 169, 441,
	170, 442, 0, 443, 310, 171, 172, 173, 311, 312,
	0, 444, 445, 446, 174, 175, 313, 314, 315, 0,
	176, 447, 177, 448, 449, 400, 450, 178, 316, 451,
	317, 452, 179, 180, 181, 182, 318, 319, 402, 453,
	186, 454, 183, 455, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 456, 326, 457, 403, 187, 188, 189,
	404, 190, 191, 192, 458, 194, 193, 459, 327, 405,
	195, 406, 460, 196, 461, 462, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 463,
	464, 465, 329, 207, 330, 208, 209, 466, 210, 467,
	468, 211, 469, 470, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 471, 219, 333, 220, 334,
	221, 472, 222, 223, 224, 225, 226, 335, 227, 228,
	473, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 474, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 475, 253, 337, 252, 254,
	255, 476, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 477, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 478, 266, 479, 267, 268, 269, 270, 271, 272,
	273, 480, 342, 343, 344, 481, 482, 274, 275, 345,
	346, 483, 276, 277, 278, 279, 484, 485, 280, 281,
	282, 283, 486, 284, 487, 347, 285, 286, 287, 348,
	349, 488, 489, 288, 490, 491, 492, 493, 289, 290,
	291, 292, 293, 696, 685, 686, 683, 684, 675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 1359, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 1360, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 0, 692, 0, 0, 174, 175, 737,
	738, 739, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 725, 0, 317, 0, 179, 180, 181, 182, 721,
	723, 402, 0, 186, 0, 183, 0, 401, 184, 740,
	185, 741, 742, 743, 744, 745, 0, 703, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 726, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 664, 0, 693, 722, 207, 746, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 716, 214, 215, 216, 217, 218, 0, 219,
	717, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	747, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 670, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 710, 256, 245, 246, 257, 411,
	258, 748, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 749, 263, 718, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 750, 751, 0, 0,
	274, 275, 719, 720, 691, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 711, 284, 0, 347, 285,
	286, 287, 348, 752, 1358, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 665, 0, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 661, 662, 1361,
	696, 685, 686, 683, 684, 675, 671, 1356, 0, 0,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 713,
	678, 0, 0, 0, 144, 145, 146, 295, 728, 297,
	729, 147, 730, 731, 0, 148, 301, 302, 149, 150,
	681, 712, 732, 733, 305, 0, 151, 724, 0, 704,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 705, 706, 708, 0, 707,
	709, 161, 162, 352, 163, 734, 164, 735, 736, 0,
	165, 0, 166, 0, 167, 0, 0, 727, 169, 0,
	170, 0, 0, 0, 669, 171, 172, 173, 714, 715,
	0, 692, 0, 0, 174, 175, 737, 738, 739, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 725, 0,
	317, 0, 179, 180, 181, 182, 721, 723, 402, 0,
	186, 0, 183, 0, 401, 184, 740, 185, 741, 742,
	743, 744, 745, 0, 703, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 726, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 664,
	0, 693, 722, 207, 746, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 716,
	214, 215, 216, 217, 218, 0, 219, 717, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 747, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 670, 244,
	0, 248, 249, 250, 251, 125, 253, 337, 252, 254,
	255, 710, 256, 245, 246, 257, 411, 258, 748, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 749, 263,
	718, 0, 266, 129, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 750, 751, 0, 0, 274, 275, 719,
	720, 691, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 711, 284, 0, 347, 285, 286, 287, 656,
	752, 0, 0, 288, 0, 0, 0, 123, 289, 290,
	291, 292, 293, 665, 124, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 661, 662, 696, 685, 686, 683,
	684, 675, 0, 671, 0, 0, 0, 0, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 713, 678, 0, 0, 0,
	144, 145, 146, 295, 728, 297, 729, 147, 730, 731,
	1399, 148, 301, 302, 149, 150, 681, 712, 732, 733,
	305, 0, 151, 724, 0, 704, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 705, 706, 708, 0, 707, 709, 161, 162, 352,
	163, 734, 164, 735, 736, 0, 165, 0, 166, 0,
	167, 0, 0, 727, 169, 0, 170, 0, 0, 0,
	669, 171, 172, 173, 714, 715, 0, 692, 0, 0,
	174, 175, 737, 738, 739, 0, 176, 0, 177, 0,
	1404, 400, 0, 178, 725, 0, 317, 0, 179, 180,
	181, 182, 721, 723, 402, 0, 186, 0, 183, 0,
	401, 184, 740, 185, 741, 742, 743, 744, 745, 0,
	703, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 1400, 726, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 664, 0, 693, 722, 207,
	746, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 716, 214, 215, 216, 217,
	218, 0, 219, 717, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 747, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 670, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 710, 256, 245,
	246, 257, 411, 258, 748, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 749, 263, 718, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 750,
	751, 0, 1401, 274, 275, 719, 720, 691, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 711, 284,
	0, 347, 285, 286, 287, 348, 752, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 665,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	661, 662, 696, 685, 686, 683, 684, 675, 0, 671,
	0, 0, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 0, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 0, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 1796, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 881, 696,
	685, 686, 683, 684, 675, 671, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 713, 678,
	0, 0, 0, 144, 145, 146, 295, 728, 297, 729,
	147, 730, 731, 0, 148, 301, 302, 149, 150, 681,
	712, 732, 733, 305, 0, 151, 724, 0, 704, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 705, 706, 708, 0, 707, 709,
	161, 162, 352, 163, 734, 164, 735, 736, 0, 165,
	0, 166, 0, 167, 0, 0, 727, 169, 0, 170,
	0, 0, 0, 669, 171, 172, 173, 714, 715, 0,
	692, 0, 0, 174, 175, 737, 738, 739, 0, 176,
	0, 177, 0, 0, 400, 0, 178, 725, 0, 317,
	0, 179, 180, 181, 182, 721, 723, 402, 0, 186,
	1166, 183, 0, 401, 184, 740, 185, 741, 742, 743,
	744, 745, 0, 703, 0, 403, 187, 188, 189, 404,
	190, 191, 192, 0, 194, 193, 0, 726, 405, 195,
	406, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 664, 0,
	693, 722, 207, 746, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 408, 213, 409, 716, 214,
	215, 216, 217, 218, 0, 219, 717, 220, 334, 221,
	1165, 222, 223, 224, 225, 226, 747, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 410, 242, 243, 670, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	710, 256, 245, 246, 257, 411, 258, 748, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 749, 263, 718,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 750, 751, 0, 0, 274, 275, 719, 720,
	691, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 711, 284, 0, 347, 285, 286, 287, 348, 752,
	0, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 665, 0, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 661, 662, 696, 685, 686, 683, 684,
	675, 0, 671, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 713, 678, 0, 0, 0, 144,
	145, 146, 295, 728, 297, 729, 147, 730, 731, 0,
	148, 301, 302, 149, 150, 681, 712, 732, 733, 305,
	0, 151, 724, 0, 704, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	705, 706, 708, 0, 707, 709, 161, 162, 352, 163,
	734, 164, 735, 736, 0, 165, 0, 166, 0, 167,
	0, 0, 727, 169, 0, 170, 0, 0, 0, 669,
	171, 172, 173, 714, 715, 0, 692, 0, 0, 174,
	175, 737, 738, 739, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 725, 0, 317, 0, 179, 180, 181,
	182, 721, 723, 402, 0, 186, 0, 183, 0, 401,
	184, 740, 185, 741, 742, 743, 744, 745, 0, 703,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 726, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 664, 0, 693, 722, 207, 746,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 716, 214, 215, 216, 217, 218,
	0, 219, 717, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 747, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 670, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 710, 256, 245, 246,
	257, 411, 258, 748, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 749, 263, 718, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 750, 751,
	0, 0, 274, 275, 719, 720, 691, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 711, 284, 0,
	347, 285, 286, 287, 348, 752, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 665, 0,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 661,
	662, 0, 0, 0, 0, 0, 994, 1351, 671, 0,
	0, 0, 0, 674, 696, 685, 686, 683, 684, 675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 713, 678, 0, 0, 0, 144, 145,
	146, 295, 728, 297, 729, 147, 730, 731, 0, 148,
	301, 302, 149, 150, 681, 712, 732, 733, 305, 0,
	151, 724, 0, 704, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 705,
	706, 708, 0, 707, 709, 161, 162, 352, 163, 734,
	164, 735, 736, 0, 165, 0, 166, 0, 167, 0,
	0, 727, 169, 0, 170, 0, 0, 0, 669, 171,
	172, 173, 714, 715, 0, 692, 0, 0, 174, 175,
	737, 738, 739, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 725, 0, 317, 0, 179, 180, 181, 182,
	721, 723, 402, 0, 186, 0, 183, 0, 401, 184,
	740, 185, 741, 742, 743, 744, 745, 0, 703, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 726, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 664, 0, 693, 722, 207, 746, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 716, 214, 215, 216, 217, 218, 0,
	219, 717, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 747, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 670, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 710, 256, 245, 246, 257,
	411, 258, 748, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 749, 263, 718, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 750, 751, 0,
	0, 274, 275, 719, 720, 691, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 711, 284, 0, 347,
	285, 286, 287, 348, 752, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 665, 0, 0,
	0, 0, 0, 663, 0, 0, 0, 0, 661, 662,
	696, 685, 686, 683, 684, 675, 0, 671, 1880, 0,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 713,
	678, 0, 0, 0, 144, 145, 146, 295, 728, 297,
	729, 147, 730, 731, 0, 148, 301, 302, 149, 150,
	681, 712, 732, 733, 305, 0, 151, 724, 0, 704,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 705, 706, 708, 0, 707,
	709, 161, 162, 352, 163, 734, 164, 735, 736, 0,
	165, 0, 166, 0, 167, 0, 0, 727, 169, 0,
	170, 0, 0, 0, 669, 171, 172, 173, 714, 715,
	0, 692, 0, 0, 174, 175, 737, 738, 739, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 725, 0,
	317, 0, 179, 180, 181, 182, 721, 723, 402, 0,
	186, 0, 183, 0, 401, 184, 740, 185, 741, 742,
	743, 744, 745, 0, 703, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 726, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 664,
	0, 693, 722, 207, 746, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 716,
	214, 215, 216, 217, 218, 0, 219, 717, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 747, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 670, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 710, 256, 245, 246, 257, 411, 258, 748, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 749, 263,
	718, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 750, 751, 0, 0, 274, 275, 719,
	720, 691, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 711, 284, 0, 347, 285, 286, 287, 348,
	752, 1827, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 665, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 661, 662, 696, 685, 686, 683,
	684, 675, 0, 671, 0, 0, 0, 0, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 713, 678, 0, 0, 0,
	144, 145, 146, 295, 728, 297, 729, 147, 730, 731,
	0, 148, 301, 302, 149, 150, 681, 712, 732, 733,
	305, 0, 151, 724, 0, 704, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 399, 159, 160,
	0, 705, 706, 708, 0, 707, 709, 161, 162, 352,
	163, 734, 164, 735, 736, 0, 165, 0, 166, 0,
	167, 0, 0, 727, 169, 0, 170, 0, 0, 0,
	669, 171, 172, 173, 714, 715, 0, 692, 0, 0,
	174, 175, 737, 738, 739, 0, 176, 0, 177, 0,
	0, 400, 0, 178, 725, 0, 317, 0, 179, 180,
	181, 182, 721, 723, 402, 0, 186, 0, 183, 0,
	401, 184, 740, 185, 741, 742, 743, 744, 745, 0,
	703, 0, 403, 187, 188, 189, 404, 190, 191, 192,
	0, 194, 193, 0, 726, 405, 195, 406, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	407, 203, 204, 206, 205, 664, 0, 693, 722, 207,
	746, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 408, 213, 409, 716, 214, 215, 216, 217,
	218, 0, 219, 717, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 747, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 410, 242, 243, 670, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 710, 256, 245,
	246, 257, 411, 258, 748, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 749, 263, 718, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 750,
	751, 0, 0, 274, 275, 719, 720, 691, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 711, 284,
	0, 347, 285, 286, 287, 348, 752, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 665,
	0, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	661, 662, 696, 685, 686, 683, 684, 675, 0, 671,
	1817, 0, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 142, 0, 143, 0, 0, 0,
	0, 713, 678, 0, 0, 0, 144, 145, 146, 295,
	728, 297, 729, 147, 730, 731, 0, 148, 301, 302,
	149, 150, 681, 712, 732, 733, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 734, 164, 735,
	736, 889, 165, 0, 166, 0, 167, 0, 0, 727,
	169, 0, 170, 0, 0, 0, 669, 171, 172, 173,
	714, 715, 0, 692, 0, 0, 174, 175, 737, 738,
	739, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 740, 185,
	741, 742, 743, 744, 745, 0, 703, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 664, 0, 693, 722, 207, 746, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 747,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	670, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	748, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	749, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 750, 751, 0, 0, 274,
	275, 719, 720, 691, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 752, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 665, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 661, 662, 696, 685,
	686, 683, 684, 675, 0, 671, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 713, 678, 0,
	0, 0, 144, 145, 146, 295, 728, 297, 729, 147,
	730, 731, 0, 148, 301, 302, 149, 150, 681, 712,
	732, 733, 305, 0, 151, 724, 0, 704, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 705, 706, 708, 0, 707, 709, 161,
	162, 352, 163, 734, 164, 735, 736, 0, 165, 0,
	166, 0, 167, 0, 0, 727, 169, 0, 170, 0,
	0, 0, 669, 171, 172, 173, 714, 715, 0, 692,
	0, 0, 174, 175, 737, 738, 739, 0, 176, 0,
	177, 0, 1404, 400, 0, 178, 725, 0, 317, 0,
	179, 180, 181, 182, 721, 723, 402, 0, 186, 0,
	183, 0, 401, 184, 740, 185, 741, 742, 743, 744,
	745, 0, 703, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 726, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 664, 0, 693,
	722, 207, 746, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 716, 214, 215,
	216, 217, 218, 0, 219, 717, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 747, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 670, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 710,
	256, 245, 246, 257, 411, 258, 748, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 749, 263, 718, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 750, 751, 0, 0, 274, 275, 719, 720, 691,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	711, 284, 0, 347, 285, 286, 287, 348, 752, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 665, 0, 0, 0, 0, 0, 663, 0, 0,
	0, 0, 661, 662, 696, 685, 686, 683, 684, 675,
	0, 671, 0, 0, 0, 0, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 713, 678, 0, 0, 0, 144, 145,
	146, 295, 728, 297, 729, 147, 730, 731, 0, 148,
	301, 302, 149, 150, 681, 712, 732, 733, 305, 0,
	151, 724, 0, 704, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 705,
	706, 708, 0, 707, 709, 161, 162, 352, 163, 734,
	164, 735, 736, 0, 165, 0, 166, 0, 167, 0,
	0, 727, 169, 0, 170, 0, 0, 0, 669, 171,
	172, 173, 714, 715, 0, 692, 0, 0, 174, 175,
	737, 738, 739, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 725, 0, 317, 0, 179, 180, 181, 182,
	721, 723, 402, 0, 186, 0, 183, 0, 401, 184,
	740, 185, 741, 742, 743, 744, 745, 0, 703, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 726, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 664, 0, 693, 722, 207, 746, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 716, 214, 215, 216, 217, 218, 0,
	219, 717, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 747, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 670, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 710, 256, 245, 246, 257,
	411, 258, 748, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 749, 263, 718, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 750, 751, 0,
	0, 274, 275, 719, 720, 691, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 711, 284, 0, 347,
	285, 286, 287, 348, 752, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 665, 0, 0,
	0, 0, 0, 663, 0, 0, 0, 0, 661, 662,
	881, 696, 685, 686, 683, 684, 675, 671, 0, 0,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	713, 678, 0, 0, 0, 144, 145, 146, 295, 728,
	297, 729, 147, 730, 731, 0, 148, 301, 302, 149,
	150, 681, 712, 732, 733, 305, 0, 151, 724, 0,
	704, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 705, 706, 708, 0,
	707, 709, 161, 162, 352, 163, 734, 164, 735, 736,
	0, 165, 0, 166, 0, 167, 0, 0, 727, 169,
	0, 170, 0, 0, 0, 669, 171, 172, 173, 714,
	715, 0, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	664, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 670,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 665, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 661, 662, 696, 685, 686,
	683, 684, 675, 0, 671, 1346, 0, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 142,
	1153, 143, 0, 0, 0, 0, 713, 678, 0, 0,
	0, 144, 145, 146, 295, 728, 297, 729, 147, 730,
	731, 0, 148, 301, 302, 149, 150, 681, 712, 732,
	733, 305, 0, 151, 724, 0, 704, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 705, 706, 708, 0, 707, 709, 161, 162,
	352, 163, 734, 164, 735, 736, 0, 165, 0, 166,
	0, 167, 0, 0, 727, 169, 0, 170, 0, 0,
	0, 669, 171, 172, 173, 714, 715, 0, 692, 0,
	0, 174, 175, 737, 738, 739, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 725, 0, 317, 0, 179,
	180, 181, 182, 721, 723, 402, 0, 186, 0, 183,
	0, 401, 184, 740, 185, 741, 742, 743, 744, 745,
	0, 703, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 726, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 664, 0, 693, 722,
	207, 746, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 716, 214, 215, 216,
	217, 218, 0, 219, 717, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 747, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 670, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 710, 256,
	245, 246, 257, 411, 258, 748, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 749, 263, 718, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	750, 751, 0, 0, 274, 275, 719, 720, 691, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 711,
	284, 0, 347, 285, 286, 287, 348, 752, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	665, 0, 0, 0, 0, 0, 663, 0, 0, 0,
	0, 661, 662, 696, 685, 686, 683, 684, 675, 0,
	671, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 713, 678, 0, 0, 0, 144, 145, 146,
	295, 728, 297, 729, 147, 730, 731, 0, 148, 301,
	302, 149, 150, 681, 712, 732, 733, 305, 0, 151,
	724, 0, 704, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 2239, 0, 705, 706,
	708, 0, 707, 709, 161, 162, 352, 163, 734, 164,
	735, 736, 0, 165, 0, 166, 0, 167, 0, 0,
	727, 169, 0, 170, 0, 0, 0, 669, 171, 172,
	173, 714, 715, 0, 692, 0, 0, 174, 175, 737,
	738, 739, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 725, 0, 317, 0, 179, 180, 181, 182, 721,
	723, 402, 0, 186, 0, 183, 0, 401, 184, 740,
	185, 741, 742, 743, 744, 745, 0, 703, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 726, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 664, 0, 693, 722, 207, 746, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 716, 214, 215, 216, 217, 218, 0, 219,
	717, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	747, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 670, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 710, 256, 245, 246, 257, 411,
	258, 748, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 749, 263, 718, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 750, 751, 0, 0,
	274, 275, 719, 720, 691, 276, 277, 2238, 279, 0,
	0, 280, 281, 282, 283, 711, 284, 0, 347, 285,
	286, 287, 348, 752, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 665, 0, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 661, 662, 696,
	685, 686, 683, 684, 675, 0, 671, 0, 0, 0,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 713, 678,
	0, 0, 0, 144, 145, 146, 295, 728, 297, 729,
	147, 730, 731, 0, 148, 301, 302, 149, 150, 681,
	712, 732, 733, 305, 0, 151, 724, 0, 704, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	399, 159, 160, 0, 705, 706, 708, 0, 707, 709,
	161, 162, 352, 163, 734, 164, 735, 736, 0, 165,
	0, 166, 0, 167, 0, 0, 727, 169, 0, 170,
	0, 0, 0, 669, 171, 172, 173, 714, 715, 0,
	692, 0, 0, 174, 175, 737, 738, 739, 0, 176,
	0, 177, 0, 0, 400, 0, 178, 725, 0, 317,
	0, 179, 180, 181, 182, 721, 723, 402, 0, 186,
	0, 183, 0, 401, 184, 740, 185, 741, 742, 743,
	744, 745, 0, 703, 0, 403, 187, 188, 189, 404,
	190, 191, 192, 0, 194, 193, 0, 726, 405, 195,
	406, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 407, 203, 204, 206, 205, 664, 0,
	693, 722, 207, 746, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 408, 213, 409, 716, 214,
	215, 216, 217, 218, 0, 219, 717, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 747, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 410, 242, 243, 670, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	710, 256, 245, 246, 257, 411, 258, 748, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 749, 263, 718,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 750, 751, 0, 0, 274, 275, 719, 720,
	691, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 711, 284, 0, 347, 285, 286, 287, 348, 752,
	0, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 665, 0, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 661, 662, 696, 685, 686, 683, 684,
	675, 0, 671, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 713, 678, 0, 0, 0, 144,
	145, 146, 2237, 728, 297, 729, 147, 730, 731, 0,
	148, 301, 302, 149, 150, 681, 712, 732, 733, 305,
	0, 151, 724, 0, 704, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 2239, 0,
	705, 706, 708, 0, 707, 709, 161, 162, 352, 163,
	734, 164, 735, 736, 0, 165, 0, 166, 0, 167,
	0, 0, 727, 169, 0, 170, 0, 0, 0, 669,
	171, 172, 173, 714, 715, 0, 692, 0, 0, 174,
	175, 737, 738, 739, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 725, 0, 317, 0, 179, 180, 181,
	182, 721, 723, 402, 0, 186, 0, 183, 0, 401,
	184, 740, 185, 741, 742, 743, 744, 745, 0, 703,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 726, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 664, 0, 693, 722, 207, 746,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 716, 214, 215, 216, 217, 218,
	0, 219, 717, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 747, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 670, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 710, 256, 245, 246,
	257, 411, 258, 748, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 749, 263, 718, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 750, 751,
	0, 0, 274, 275, 719, 720, 691, 276, 277, 2238,
	279, 0, 0, 280, 281, 282, 283, 711, 284, 0,
	347, 285, 286, 287, 348, 752, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 665, 0,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 661,
	662, 696, 685, 686, 683, 684, 675, 0, 671, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	713, 678, 0, 0, 0, 144, 145, 146, 295, 728,
	297, 729, 147, 730, 731, 0, 148, 301, 302, 149,
	150, 681, 712, 732, 733, 305, 0, 151, 724, 0,
	704, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 399, 159, 160, 0, 705, 706, 708, 0,
	707, 709, 161, 162, 352, 163, 734, 164, 735, 736,
	0, 165, 0, 166, 0, 167, 0, 0, 727, 169,
	0, 170, 0, 0, 0, 669, 171, 172, 173, 714,
	715, 0, 692, 0, 0, 174, 175, 737, 738, 739,
	0, 176, 0, 177, 0, 0, 400, 0, 178, 725,
	0, 317, 0, 179, 180, 181, 182, 721, 723, 402,
	0, 186, 0, 183, 0, 401, 184, 740, 185, 741,
	742, 743, 744, 745, 0, 703, 0, 403, 187, 188,
	189, 404, 190, 191, 192, 0, 194, 193, 0, 726,
	405, 195, 406, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 407, 203, 204, 206, 205,
	0, 0, 693, 722, 207, 746, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 408, 213, 409,
	716, 214, 215, 216, 217, 218, 0, 219, 717, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 747, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 410, 242, 243, 1394,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 710, 256, 245, 246, 257, 411, 258, 748,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 749,
	263, 718, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 750, 751, 0, 0, 274, 275,
	719, 720, 691, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 711, 284, 0, 347, 285, 286, 287,
	348, 752, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 696, 685, 686, 683, 684, 675,
	1392, 0, 0, 0, 0, 1390, 1391, 0, 0, 0,
	0, 0, 0, 0, 1393, 141, 142, 0, 143, 674,
	0, 0, 0, 713, 678, 0, 0, 0, 144, 145,
	146, 295, 728, 297, 729, 147, 730, 731, 0, 148,
	301, 302, 149, 150, 0, 712, 732, 733, 305, 0,
	151, 724, 0, 704, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 705,
	706, 708, 0, 707, 709, 161, 162, 352, 163, 734,
	164, 735, 736, 0, 165, 0, 166, 0, 167, 0,
	0, 727, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 714, 715, 0, 692, 0, 0, 174, 175,
	737, 738, 739, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 725, 0, 317, 0, 179, 180, 181, 182,
	721, 723, 402, 0, 186, 0, 183, 0, 401, 184,
	740, 185, 741, 742, 743, 744, 745, 0, 703, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 726, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 693, 722, 207, 746, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 716, 214, 215, 216, 217, 218, 0,
	219, 717, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 747, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 1394, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 710, 256, 245, 246, 257,
	411, 258, 748, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 749, 263, 718, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 750, 751, 0,
	0, 274, 275, 719, 720, 691, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 711, 284, 0, 347,
	285, 286, 287, 348, 752, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 696, 685, 686,
	683, 684, 675, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1393, 141, 142,
	0, 143, 674, 0, 0, 0, 713, 678, 0, 0,
	0, 144, 145, 146, 0, 728, 297, 729, 147, 730,
	731, 0, 148, 301, 302, 149, 150, 681, 712, 732,
	733, 305, 0, 151, 724, 0, 704, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	2239, 0, 705, 706, 708, 0, 707, 709, 161, 162,
	352, 163, 734, 164, 735, 736, 0, 165, 0, 166,
	0, 167, 0, 0, 727, 169, 0, 170, 0, 0,
	0, 669, 171, 172, 173, 714, 715, 0, 692, 0,
	0, 174, 175, 737, 738, 739, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 725, 0, 317, 0, 179,
	180, 181, 182, 721, 723, 0, 0, 186, 0, 183,
	0, 401, 184, 740, 185, 741, 742, 743, 744, 745,
	0, 703, 0, 0, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 726, 405, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 664, 0, 693, 722,
	207, 746, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 716, 214, 215, 216,
	217, 218, 0, 219, 717, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 747, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 670, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 710, 256,
	245, 246, 257, 0, 258, 748, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 749, 263, 718, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	750, 751, 0, 0, 274, 275, 719, 720, 691, 276,
	277, 2238, 279, 0, 0, 280, 281, 282, 283, 711,
	284, 0, 347, 285, 286, 287, 348, 752, 0, 0,
	288, 0, 696, 0, 0, 289, 290, 291, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 662, 141, 142, 0, 143, 0, 0, 0,
	671, 713, 0, 0, 0, 674, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 712, 303, 304, 305, 0, 151, 724,
	0, 704, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 399, 159, 160, 0, 705, 706, 708,
	0, 707, 709, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	714, 715, 0, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 400, 0, 178,
	725, 0, 317, 0, 179, 180, 181, 182, 721, 723,
	402, 0, 186, 0, 183, 0, 401, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 403, 187,
	188, 189, 404, 190, 191, 192, 0, 194, 193, 0,
	726, 405, 195, 406, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 407, 203, 204, 206,
	205, 0, 0, 0, 722, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 408, 213,
	409, 716, 214, 215, 216, 217, 218, 0, 219, 717,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 410, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 710, 256, 245, 246, 257, 411, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 718, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 719, 720, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 711, 284, 0, 347, 285, 286,
	287, 348, 349, 566, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 1910, 0, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 398, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 0, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 0, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 125, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 129, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 0, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 0, 284, 0, 347, 285,
	286, 287, 656, 349, 566, 563, 288, 564, 559, 554,
	123, 289, 290, 291, 292, 293, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 114, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 1116, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 556, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 402, 0, 186, 0, 183, 0, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 327, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 557, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 555, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 566, 563, 0,
	564, 559, 554, 0, 0, 0, 0, 0, 565, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 398, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 399, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 1113, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 556, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 400, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 402, 0, 186, 0, 183,
	0, 401, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 403, 187, 188, 189, 404, 190, 191,
	192, 0, 194, 193, 0, 327, 405, 195, 406, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 407, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 557, 0, 211, 0,
	0, 212, 331, 408, 213, 409, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 410, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 411, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 555, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 0,
	284, 0, 347, 285, 286, 287, 348, 349, 0, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	566, 563, 0, 564, 559, 554, 0, 0, 0, 0,
	0, 565, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 398,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 399, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 787,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 556, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 400, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 402, 0,
	186, 0, 183, 0, 401, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 403, 187, 188, 189,
	404, 190, 191, 192, 0, 194, 193, 0, 327, 405,
	195, 406, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 407, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 557,
	0, 211, 0, 0, 212, 331, 408, 213, 409, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 410, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 411, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 555, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 566, 563, 0, 564, 559, 554, 0,
	0, 0, 0, 0, 565, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 142, 0, 143, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 144, 145, 146,
	295, 296, 297, 298, 147, 299, 300, 0, 148, 301,
	302, 149, 150, 0, 0, 303, 304, 305, 0, 151,
	306, 0, 398, 0, 152, 153, 154, 0, 155, 0,
	156, 157, 158, 0, 399, 159, 160, 0, 0, 0,
	0, 0, 0, 0, 161, 162, 352, 163, 307, 164,
	308, 309, 0, 165, 0, 166, 0, 167, 0, 0,
	168, 169, 0, 170, 0, 0, 0, 310, 171, 172,
	173, 311, 312, 0, 556, 0, 0, 174, 175, 313,
	314, 315, 0, 176, 0, 177, 0, 0, 400, 0,
	178, 316, 0, 317, 0, 179, 180, 181, 182, 318,
	319, 402, 0, 186, 0, 183, 0, 401, 184, 320,
	185, 321, 322, 323, 324, 325, 0, 326, 0, 403,
	187, 188, 189, 404, 190, 191, 192, 0, 194, 193,
	0, 327, 405, 195, 406, 0, 196, 0, 0, 197,
	0, 198, 199, 200, 202, 328, 201, 407, 203, 204,
	206, 205, 0, 0, 0, 329, 207, 330, 208, 209,
	0, 210, 557, 0, 211, 0, 0, 212, 331, 408,
	213, 409, 332, 214, 215, 216, 217, 218, 0, 219,
	333, 220, 334, 221, 0, 222, 223, 224, 225, 226,
	335, 227, 228, 0, 229, 230, 231, 232, 233, 235,
	236, 234, 237, 238, 239, 240, 0, 241, 410, 242,
	243, 336, 244, 0, 248, 249, 250, 251, 0, 253,
	337, 252, 254, 255, 0, 256, 245, 246, 257, 411,
	258, 338, 339, 259, 0, 265, 260, 261, 247, 262,
	264, 340, 263, 341, 0, 266, 0, 267, 268, 269,
	270, 271, 272, 273, 0, 342, 343, 344, 0, 0,
	274, 275, 345, 346, 555, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 138, 284, 0, 347, 285,
	286, 287, 348, 349, 0, 0, 288, 0, 0, 0,
	0, 289, 290, 291, 292, 293, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 565, 560, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 0, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 0, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	0, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 0, 0, 186, 0, 183, 0, 0,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 0, 187, 188, 189, 0, 190, 191, 192, 0,
	194, 193, 0, 327, 0, 195, 0, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 0,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 627, 211, 0, 0, 212,
	331, 0, 213, 0, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	0, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	125, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 0, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 129, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 0, 284, 0,
	347, 285, 286, 287, 656, 349, 138, 0, 288, 0,
	0, 0, 123, 289, 290, 291, 292, 293, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 621, 0, 626, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 125, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 129,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 0, 284,
	0, 347, 285, 286, 287, 656, 349, 138, 0, 288,
	0, 0, 0, 123, 289, 290, 291, 292, 293, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 0, 114,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 0, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 0, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	352, 163, 307, 164, 308, 309, 0, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 0, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 0, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 0, 0, 186, 0, 183,
	0, 0, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 0, 187, 188, 189, 0, 190, 191,
	192, 0, 194, 193, 0, 327, 0, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 0, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 0, 627, 211, 0,
	0, 212, 331, 0, 213, 0, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 0, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 0, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	0, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 0, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 0,
	284, 0, 347, 285, 286, 287, 348, 349, 138, 0,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 621, 0,
	626, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	0, 284, 0, 347, 285, 286, 287, 348, 349, 138,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 142, 0, 143, 0, 0, 0, 0, 294, 0,
	0, 0, 917, 144, 145, 146, 295, 296, 297, 298,
	147, 299, 300, 0, 148, 301, 302, 149, 150, 0,
	0, 303, 304, 305, 0, 151, 306, 0, 0, 0,
	152, 153, 154, 0, 155, 0, 156, 157, 158, 0,
	0, 159, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 162, 352, 163, 307, 164, 308, 309, 0, 165,
	0, 166, 0, 167, 0, 0, 168, 169, 0, 170,
	0, 0, 0, 310, 171, 172, 173, 311, 312, 0,
	0, 0, 0, 174, 175, 313, 314, 315, 0, 176,
	0, 177, 0, 0, 0, 0, 178, 316, 0, 317,
	0, 179, 180, 181, 182, 318, 319, 0, 0, 186,
	0, 183, 0, 0, 184, 320, 185, 321, 322, 323,
	324, 325, 0, 326, 0, 0, 187, 188, 189, 0,
	190, 191, 192, 0, 194, 193, 0, 327, 0, 195,
	0, 0, 196, 0, 0, 197, 0, 198, 199, 200,
	202, 328, 201, 0, 203, 204, 206, 205, 0, 0,
	0, 329, 207, 330, 208, 209, 0, 210, 0, 0,
	211, 0, 0, 212, 331, 0, 213, 0, 332, 214,
	215, 216, 217, 218, 0, 219, 333, 220, 334, 221,
	0, 222, 223, 224, 225, 226, 335, 227, 228, 0,
	229, 230, 231, 232, 233, 235, 236, 234, 237, 238,
	239, 240, 0, 241, 0, 242, 243, 336, 244, 0,
	248, 249, 250, 251, 0, 253, 337, 252, 254, 255,
	0, 256, 245, 246, 257, 0, 258, 338, 339, 259,
	0, 265, 260, 261, 247, 262, 264, 340, 263, 341,
	0, 266, 0, 267, 268, 269, 270, 271, 272, 273,
	0, 342, 343, 344, 0, 0, 274, 275, 345, 346,
	0, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 0, 284, 0, 347, 285, 286, 287, 348, 349,
	138, 0, 288, 0, 0, 0, 0, 289, 290, 291,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 1265, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 138, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 142, 0, 143, 0, 0, 0, 0,
	294, 0, 0, 1842, 0, 144, 145, 146, 295, 296,
	297, 298, 147, 299, 300, 0, 148, 301, 302, 149,
	150, 0, 0, 303, 304, 305, 0, 151, 306, 0,
	0, 0, 152, 153, 154, 0, 155, 0, 156, 157,
	158, 0, 0, 159, 160, 0, 0, 0, 0, 0,
	0, 0, 161, 162, 352, 163, 307, 164, 308, 309,
	0, 165, 0, 166, 0, 167, 0, 0, 168, 169,
	0, 170, 0, 0, 0, 310, 171, 172, 173, 311,
	312, 0, 0, 0, 0, 174, 175, 313, 314, 315,
	0, 176, 0, 177, 0, 0, 0, 0, 178, 316,
	0, 317, 0, 179, 180, 181, 182, 318, 319, 0,
	0, 186, 0, 183, 0, 0, 184, 320, 185, 321,
	322, 323, 324, 325, 0, 326, 0, 0, 187, 188,
	189, 0, 190, 191, 192, 0, 194, 193, 0, 327,
	0, 195, 0, 0, 196, 0, 0, 197, 0, 198,
	199, 200, 202, 328, 201, 0, 203, 204, 206, 205,
	0, 0, 0, 329, 207, 330, 208, 209, 0, 210,
	0, 0, 211, 0, 0, 212, 331, 0, 213, 0,
	332, 214, 215, 216, 217, 218, 0, 219, 333, 220,
	334, 221, 0, 222, 223, 224, 225, 226, 335, 227,
	228, 0, 229, 230, 231, 232, 233, 235, 236, 234,
	237, 238, 239, 240, 0, 241, 0, 242, 243, 336,
	244, 0, 248, 249, 250, 251, 0, 253, 337, 252,
	254, 255, 0, 256, 245, 246, 257, 0, 258, 338,
	339, 259, 0, 265, 260, 261, 247, 262, 264, 340,
	263, 341, 0, 266, 0, 267, 268, 269, 270, 271,
	272, 273, 0, 342, 343, 344, 0, 0, 274, 275,
	345, 346, 0, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 0, 284, 0, 347, 285, 286, 287,
	348, 349, 0, 0, 288, 0, 0, 0, 0, 289,
	290, 291, 292, 293, 696, 685, 686, 683, 684, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 910, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 728, 297, 729, 147, 730, 731, 0, 148,
	301, 302, 149, 150, 0, 0, 732, 733, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 734,
	164, 735, 736, 0, 165, 0, 166, 0, 167, 0,
	0, 727, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 692, 0, 0, 174, 175,
	737, 738, 739, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 402, 0, 186, 0, 183, 0, 401, 184,
	740, 185, 741, 742, 743, 744, 745, 0, 703, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 327, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 693, 329, 207, 746, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 747, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	411, 258, 748, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 749, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 750, 751, 0,
	0, 274, 275, 345, 346, 691, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 0, 284, 0, 347,
	285, 286, 287, 348, 752, 566, 563, 288, 0, 0,
	836, 0, 289, 290, 291, 292, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 142, 0, 143,
	0, 0, 0, 0, 294, 0, 0, 0, 0, 144,
	145, 146, 295, 296, 297, 298, 147, 299, 300, 0,
	148, 301, 302, 149, 150, 0, 0, 303, 304, 305,
	0, 151, 306, 0, 398, 0, 152, 153, 154, 0,
	155, 0, 156, 157, 158, 0, 399, 159, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 162, 352, 163,
	307, 164, 308, 309, 0, 165, 0, 166, 0, 167,
	0, 0, 168, 169, 0, 170, 0, 0, 0, 310,
	171, 172, 173, 311, 312, 0, 0, 0, 0, 174,
	175, 313, 314, 315, 0, 176, 0, 177, 0, 0,
	400, 0, 178, 316, 0, 317, 0, 179, 180, 181,
	182, 318, 319, 402, 0, 186, 0, 183, 0, 401,
	184, 320, 185, 321, 322, 323, 324, 325, 0, 326,
	0, 403, 187, 188, 189, 404, 190, 191, 192, 0,
	194, 193, 0, 327, 405, 195, 406, 0, 196, 0,
	0, 197, 0, 198, 199, 200, 202, 328, 201, 407,
	203, 204, 206, 205, 0, 0, 0, 329, 207, 330,
	208, 209, 0, 210, 0, 0, 211, 0, 0, 212,
	331, 408, 213, 409, 332, 214, 215, 216, 217, 218,
	0, 219, 333, 220, 334, 221, 0, 222, 223, 224,
	225, 226, 335, 227, 228, 0, 229, 230, 231, 232,
	233, 235, 236, 234, 237, 238, 239, 240, 0, 241,
	410, 242, 243, 336, 244, 0, 248, 249, 250, 251,
	0, 253, 337, 252, 254, 255, 0, 256, 245, 246,
	257, 411, 258, 338, 339, 259, 0, 265, 260, 261,
	247, 262, 264, 340, 263, 341, 0, 266, 0, 267,
	268, 269, 270, 271, 272, 273, 0, 342, 343, 344,
	0, 0, 274, 275, 345, 346, 0, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 138, 284, 0,
	347, 285, 286, 287, 348, 349, 0, 0, 288, 0,
	0, 0, 0, 289, 290, 291, 292, 293, 141, 142,
	0, 143, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 144, 145, 146, 295, 296, 297, 298, 147, 299,
	300, 0, 148, 301, 302, 149, 150, 0, 0, 303,
	304, 305, 0, 151, 306, 0, 0, 0, 152, 153,
	154, 0, 155, 0, 156, 157, 158, 0, 0, 159,
	160, 0, 0, 0, 0, 0, 0, 0, 161, 162,
	134, 163, 307, 164, 308, 309, 0, 165, 0, 166,
	0, 167, 0, 0, 168, 169, 0, 170, 0, 0,
	0, 310, 171, 172, 173, 311, 312, 0, 0, 0,
	0, 174, 175, 313, 314, 315, 0, 176, 0, 177,
	0, 0, 0, 0, 178, 316, 0, 317, 0, 179,
	180, 181, 182, 318, 319, 0, 0, 186, 0, 183,
	0, 0, 184, 320, 185, 321, 322, 323, 324, 325,
	0, 326, 0, 0, 187, 188, 189, 0, 190, 191,
	192, 0, 194, 193, 0, 327, 0, 195, 0, 0,
	196, 0, 0, 197, 0, 198, 199, 200, 202, 328,
	201, 0, 203, 204, 206, 205, 0, 0, 0, 329,
	207, 330, 208, 209, 0, 210, 0, 0, 211, 0,
	0, 212, 331, 0, 213, 0, 332, 214, 215, 216,
	217, 218, 0, 219, 333, 220, 334, 221, 0, 222,
	223, 224, 225, 226, 335, 227, 228, 0, 229, 230,
	231, 232, 233, 235, 236, 234, 237, 238, 239, 240,
	0, 241, 0, 242, 243, 336, 244, 0, 248, 249,
	250, 251, 0, 253, 337, 252, 254, 255, 0, 256,
	245, 246, 257, 0, 258, 338, 339, 259, 0, 265,
	260, 261, 247, 262, 264, 340, 263, 341, 0, 266,
	133, 267, 268, 269, 270, 271, 272, 273, 0, 342,
	343, 344, 0, 0, 274, 275, 345, 346, 0, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 0,
	284, 0, 347, 285, 286, 287, 348, 349, 566, 563,
	288, 0, 0, 0, 0, 289, 290, 291, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	142, 0, 143, 137, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 398, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 399,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 400, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 402, 0, 186, 0,
	183, 0, 401, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 403, 187, 188, 189, 404, 190,
	191, 192, 0, 194, 193, 0, 327, 405, 195, 406,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 407, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 408, 213, 409, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 410, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 411, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 566, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 0, 0, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 137, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 398, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 399, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 400,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 402, 0, 186, 0, 183, 0, 401, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	403, 187, 188, 189, 404, 190, 191, 192, 0, 194,
	193, 0, 327, 405, 195, 406, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 407, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	408, 213, 409, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 410,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	411, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 1453, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 1451, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 1450, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 1455,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 0, 0, 186, 1448, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 1454, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 1449, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 1453, 151, 306, 0, 0, 1500, 152,
	153, 154, 0, 155, 1451, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 1455, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 1499, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 1454,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 1503, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 1241, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 627, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 1168, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 873, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 627, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 867, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 627, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 644, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 355, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 354, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 1753, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 1751, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 1746, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 318, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 500, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	1133, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 927, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 0, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 870, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 815, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 813, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 305, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	809, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 201, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 342, 343, 344, 0,
	0, 274, 275, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 807, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 227, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 151, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 804, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 196, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 201, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 336, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 254, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	342, 343, 344, 0, 0, 274, 275, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 800, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 216, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 225, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 244,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 138, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 141, 142, 0, 143, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 144, 145, 146, 295,
	296, 297, 298, 147, 299, 300, 0, 148, 301, 302,
	149, 150, 0, 0, 303, 304, 305, 0, 151, 306,
	0, 0, 0, 152, 153, 154, 0, 155, 0, 156,
	157, 158, 0, 0, 159, 160, 0, 0, 0, 0,
	0, 0, 0, 161, 162, 352, 163, 307, 164, 308,
	309, 0, 165, 0, 166, 0, 167, 0, 0, 168,
	169, 0, 170, 0, 0, 0, 310, 171, 172, 173,
	311, 312, 0, 0, 0, 0, 174, 175, 313, 314,
	315, 0, 176, 0, 177, 0, 0, 0, 0, 178,
	316, 0, 317, 0, 179, 180, 181, 182, 795, 319,
	0, 0, 186, 0, 183, 0, 0, 184, 320, 185,
	321, 322, 323, 324, 325, 0, 326, 0, 0, 187,
	188, 189, 0, 190, 191, 192, 0, 194, 193, 0,
	327, 0, 195, 0, 0, 196, 0, 0, 197, 0,
	198, 199, 200, 202, 328, 201, 0, 203, 204, 206,
	205, 0, 0, 0, 329, 207, 330, 208, 209, 0,
	210, 0, 0, 211, 0, 0, 212, 331, 0, 213,
	0, 332, 214, 215, 216, 217, 218, 0, 219, 333,
	220, 334, 221, 0, 222, 223, 224, 225, 226, 335,
	227, 228, 0, 229, 230, 231, 232, 233, 235, 236,
	234, 237, 238, 239, 240, 0, 241, 0, 242, 243,
	336, 244, 0, 248, 249, 250, 251, 0, 253, 337,
	252, 254, 255, 0, 256, 245, 246, 257, 0, 258,
	338, 339, 259, 0, 265, 260, 261, 247, 262, 264,
	340, 263, 341, 0, 266, 0, 267, 268, 269, 270,
	271, 272, 273, 0, 342, 343, 344, 0, 0, 274,
	275, 345, 346, 0, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 138, 284, 0, 347, 285, 286,
	287, 348, 349, 0, 0, 288, 0, 0, 0, 0,
	289, 290, 291, 292, 293, 141, 142, 0, 143, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 144, 145,
	146, 295, 296, 297, 298, 147, 299, 300, 0, 148,
	301, 302, 149, 150, 0, 0, 303, 304, 771, 0,
	151, 306, 0, 0, 0, 152, 153, 154, 0, 155,
	0, 156, 157, 158, 0, 0, 159, 160, 0, 0,
	0, 0, 0, 0, 0, 161, 162, 352, 163, 307,
	164, 308, 309, 0, 165, 0, 166, 0, 167, 0,
	0, 168, 169, 0, 170, 0, 0, 0, 310, 171,
	172, 173, 311, 312, 0, 0, 0, 0, 174, 175,
	313, 314, 315, 0, 176, 0, 177, 0, 0, 0,
	0, 178, 316, 0, 317, 0, 179, 180, 181, 182,
	318, 319, 0, 0, 186, 0, 183, 0, 0, 184,
	320, 185, 321, 322, 323, 324, 325, 0, 326, 0,
	0, 187, 188, 189, 0, 190, 191, 192, 0, 194,
	193, 0, 327, 0, 195, 0, 0, 196, 0, 0,
	197, 0, 198, 199, 200, 202, 328, 522, 0, 203,
	204, 206, 205, 0, 0, 0, 329, 207, 330, 208,
	209, 0, 210, 0, 0, 211, 0, 0, 212, 331,
	0, 213, 0, 332, 214, 215, 216, 217, 218, 0,
	219, 333, 220, 334, 221, 0, 222, 223, 224, 225,
	226, 335, 227, 228, 0, 229, 230, 231, 232, 233,
	235, 236, 234, 237, 238, 239, 240, 0, 241, 0,
	242, 243, 336, 244, 0, 248, 249, 250, 251, 0,
	253, 337, 252, 254, 255, 0, 256, 245, 246, 257,
	0, 258, 338, 339, 259, 0, 265, 260, 261, 247,
	262, 264, 340, 263, 341, 0, 266, 0, 267, 268,
	269, 270, 271, 272, 273, 0, 518, 343, 344, 0,
	0, 274, 772, 345, 346, 0, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 138, 284, 0, 347,
	285, 286, 287, 348, 349, 0, 0, 288, 0, 0,
	0, 0, 289, 290, 291, 292, 293, 141, 142, 0,
	143, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	144, 145, 146, 295, 296, 297, 298, 147, 299, 300,
	0, 148, 301, 302, 149, 150, 0, 0, 303, 304,
	305, 0, 151, 306, 0, 0, 0, 152, 153, 154,
	0, 155, 0, 156, 157, 158, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 352,
	163, 307, 164, 308, 309, 0, 165, 0, 166, 0,
	167, 0, 0, 168, 169, 0, 170, 0, 0, 0,
	310, 171, 172, 173, 311, 312, 0, 0, 0, 0,
	174, 175, 313, 314, 315, 0, 176, 0, 177, 0,
	0, 0, 0, 178, 316, 0, 317, 0, 179, 180,
	181, 182, 318, 319, 0, 0, 186, 0, 183, 0,
	0, 184, 320, 185, 321, 322, 323, 324, 325, 0,
	326, 0, 0, 187, 188, 189, 0, 190, 191, 192,
	0, 194, 193, 0, 327, 0, 195, 0, 0, 196,
	0, 0, 197, 0, 198, 199, 200, 202, 328, 201,
	0, 203, 204, 206, 205, 0, 0, 0, 329, 207,
	330, 208, 209, 0, 210, 0, 0, 211, 0, 0,
	212, 331, 0, 213, 0, 332, 214, 215, 216, 217,
	218, 0, 219, 333, 220, 334, 221, 0, 222, 223,
	224, 225, 226, 335, 608, 228, 0, 229, 230, 231,
	232, 233, 235, 236, 234, 237, 238, 239, 240, 0,
	241, 0, 242, 243, 336, 244, 0, 248, 249, 250,
	251, 0, 253, 337, 252, 254, 255, 0, 256, 245,
	246, 257, 0, 258, 338, 339, 259, 0, 265, 260,
	261, 247, 262, 264, 340, 263, 341, 0, 266, 0,
	267, 268, 269, 270, 271, 272, 273, 0, 342, 343,
	344, 0, 0, 274, 275, 345, 346, 0, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 138, 284,
	0, 347, 285, 286, 287, 348, 349, 0, 0, 288,
	0, 0, 0, 0, 289, 290, 291, 292, 293, 141,
	142, 0, 143, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 144, 145, 146, 295, 296, 297, 298, 147,
	299, 300, 0, 148, 301, 302, 149, 150, 0, 0,
	303, 304, 305, 0, 512, 306, 0, 0, 0, 152,
	153, 154, 0, 155, 0, 156, 157, 158, 0, 0,
	159, 160, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 352, 163, 307, 164, 308, 309, 0, 165, 0,
	166, 0, 167, 0, 0, 168, 169, 0, 170, 0,
	0, 0, 310, 171, 172, 173, 311, 312, 0, 0,
	0, 0, 174, 175, 313, 314, 315, 0, 176, 0,
	177, 0, 0, 0, 0, 178, 316, 0, 317, 0,
	179, 180, 181, 182, 318, 319, 0, 0, 186, 0,
	183, 0, 0, 184, 320, 185, 321, 322, 323, 324,
	325, 0, 326, 0, 0, 187, 188, 189, 0, 190,
	191, 192, 0, 194, 193, 0, 327, 0, 195, 0,
	0, 511, 0, 0, 197, 0, 198, 199, 200, 202,
	328, 522, 0, 203, 204, 206, 205, 0, 0, 0,
	329, 207, 330, 208, 209, 0, 210, 0, 0, 211,
	0, 0, 212, 331, 0, 213, 0, 332, 214, 215,
	216, 217, 218, 0, 219, 333, 220, 334, 221, 0,
	222, 223, 224, 225, 226, 335, 227, 228, 0, 229,
	230, 231, 232, 233, 235, 236, 234, 237, 238, 239,
	240, 0, 241, 0, 242, 243, 513, 244, 0, 248,
	249, 250, 251, 0, 253, 337, 252, 514, 255, 0,
	256, 245, 246, 257, 0, 258, 338, 339, 259, 0,
	265, 260, 261, 247, 262, 264, 340, 263, 341, 0,
	266, 0, 267, 268, 269, 270, 271, 272, 273, 0,
	518, 343, 344, 0, 0, 274, 516, 345, 346, 0,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	138, 284, 0, 347, 285, 286, 287, 348, 349, 0,
	0, 288, 0, 0, 0, 0, 289, 290, 291, 292,
	293, 141, 142, 0, 143, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 144, 145, 146, 295, 296, 297,
	298, 147, 299, 300, 0, 148, 301, 302, 149, 150,
	0, 0, 303, 304, 305, 0, 151, 306, 0, 0,
	0, 152, 153, 154, 0, 155, 0, 156, 157, 158,
	0, 0, 159, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 352, 163, 307, 164, 308, 309, 0,
	165, 0, 166, 0, 167, 0, 0, 168, 169, 0,
	170, 0, 0, 0, 310, 171, 172, 173, 311, 312,
	0, 0, 0, 0, 174, 175, 313, 314, 315, 0,
	176, 0, 177, 0, 0, 0, 0, 178, 316, 0,
	317, 0, 179, 180, 181, 182, 318, 319, 0, 0,
	186, 0, 183, 0, 0, 184, 320, 185, 321, 322,
	323, 324, 325, 0, 326, 0, 0, 187, 188, 189,
	0, 190, 191, 192, 0, 194, 193, 0, 327, 0,
	195, 0, 0, 196, 0, 0, 197, 0, 198, 199,
	200, 202, 328, 201, 0, 203, 204, 206, 205, 0,
	0, 0, 329, 207, 330, 208, 209, 0, 210, 0,
	0, 211, 0, 0, 212, 331, 0, 213, 0, 332,
	214, 215, 0, 217, 218, 0, 219, 333, 220, 334,
	221, 0, 222, 223, 224, 0, 226, 335, 227, 228,
	0, 229, 230, 231, 232, 233, 235, 236, 234, 237,
	238, 239, 240, 0, 241, 0, 242, 243, 336, 0,
	0, 248, 249, 250, 251, 0, 253, 337, 252, 254,
	255, 0, 256, 245, 246, 257, 0, 258, 338, 339,
	259, 0, 265, 260, 261, 247, 262, 264, 340, 263,
	341, 0, 266, 0, 267, 268, 269, 270, 271, 272,
	273, 0, 342, 343, 344, 0, 0, 274, 275, 345,
	346, 0, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 0, 284, 0, 347, 285, 286, 287, 348,
	349, 0, 0, 288, 0, 0, 0, 0, 289, 290,
	291, 292, 293, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 967, 968, 969, 970, 971, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 937, 934, 935, 973, 954, 955, 956, 964, 965,
	966, 967, 968, 969, 970, 971, 0, 0, 0, 0,
	0, 0, 0, 957, 0, 936, 0, 0, 0, 0,
	937, 951, 0, 973, 0, 0, 0, 0, 934, 935,
	0, 954, 955, 956, 964, 965, 966, 967, 968, 969,
	970, 971, 0, 0, 936, 0, 0, 0, 0, 957,
	951, 0, 0, 0, 0, 0, 937, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 942, 0, 0, 0,
	936, 0, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 974, 0, 0, 959, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 942, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 958,
	961, 974, 0, 952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 958, 934, 935, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 951, 0, 0, 0, 0, 962, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 0, 0, 0, 1682, 0, 0, 0, 0, 960,
	0, 0, 948, 949, 950, 963, 0, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 0, 942, 0,
	0, 0, 0, 1681, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 948, 949,
	950, 963, 0, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 0, 0, 0, 0, 0, 934, 935, 1631,
	954, 955, 956, 964, 965, 966, 967, 968, 969, 970,
	971, 0, 0, 0, 0, 0, 952, 0, 957, 0,
	0, 0, 0, 0, 0, 937, 934, 935, 973, 954,
	955, 956, 964, 965, 966, 967, 968, 969, 970, 971,
	1639, 1640, 0, 1657, 1658, 1659, 0, 957, 0, 936,
	0, 0, 1661, 1662, 937, 951, 0, 973, 0, 0,
	0, 1814, 934, 935, 0, 954, 955, 956, 964, 965,
	966, 967, 968, 969, 970, 971, 0, 0, 936, 0,
	0, 0, 0, 957, 951, 0, 0, 0, 0, 953,
	937, 0, 0, 973, 0, 0, 0, 0, 1654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 1645, 0, 0, 0, 0, 961, 974,
	0, 0, 959, 0, 0, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 942, 972, 0, 0, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	1660, 959, 0, 958, 961, 974, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1655, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1656, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 0, 0, 2212, 0, 0, 0, 0,
	0, 0, 0, 960, 0, 0, 948, 949, 950, 963,
	0, 947, 945, 946, 938, 939, 940, 941, 943, 944,
	1651, 1652, 1653, 0, 2168, 1650, 1648, 1649, 1641, 1642,
	1643, 1644, 1646, 1647, 0, 0, 0, 0, 0, 960,
	0, 0, 948, 949, 950, 963, 0, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 0, 934, 935,
	2129, 954, 955, 956, 964, 965, 966, 967, 968, 969,
	970, 971, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 937, 934, 935, 973,
	954, 955, 956, 964, 965, 966, 967, 968, 969, 970,
	971, 1639, 1640, 0, 1657, 1658, 1659, 0, 957, 0,
	936, 0, 0, 1661, 1662, 937, 951, 0, 973, 0,
	0, 0, 1813, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 967, 968, 969, 970, 971, 0, 0, 936,
	0, 0, 0, 0, 957, 951, 0, 0, 0, 0,
	0, 937, 0, 0, 973, 0, 0, 0, 0, 1654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 0, 0,
	961, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 1645, 0, 0, 0, 0, 961,
	974, 0, 0, 959, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 0, 942, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1660, 959, 0, 958, 961, 974, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1655, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1656, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 960, 0, 0, 948, 949,
	950, 963, 0, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 0, 0, 0, 0, 2103, 0, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 1651, 1652, 1653, 0, 2098, 1650, 1648, 1649, 1641,
	1642, 1643, 1644, 1646, 1647, 0, 0, 0, 0, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 934,
	935, 2094, 954, 955, 956, 964, 965, 966, 967, 968,
	969, 970, 971, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 937, 934, 935,
	973, 954, 955, 956, 964, 965, 966, 967, 968, 969,
	970, 971, 1639, 1640, 0, 1657, 1658, 1659, 0, 957,
	0, 936, 0, 0, 1661, 1662, 937, 951, 0, 973,
	0, 0, 0, 0, 934, 935, 0, 954, 955, 956,
	964, 965, 966, 967, 968, 969, 970, 971, 0, 0,
	936, 0, 0, 0, 0, 957, 951, 0, 0, 0,
	0, 0, 937, 0, 0, 973, 0, 0, 0, 0,
	1654, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 1645, 0, 0, 0, 0,
	961, 974, 0, 0, 959, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 1663, 0, 942, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1660, 959, 0, 958, 961, 974, 0, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1655, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1656, 0, 962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 0, 2040, 0, 0,
	0, 0, 0, 0, 0, 960, 0, 0, 948, 949,
	950, 963, 0, 947, 945, 946, 938, 939, 940, 941,
	943, 944, 1651, 1652, 1653, 0, 2010, 1650, 1648, 1649,
	1641, 1642, 1643, 1644, 1646, 1647, 0, 0, 0, 0,
	0, 960, 0, 0, 948, 949, 950, 963, 0, 947,
	945, 946, 938, 939, 940, 941, 943, 944, 0, 0,
	934, 935, 2009, 954, 955, 956, 964, 965, 966, 967,
	968, 969, 970, 971, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 937, 934,
	935, 973, 954, 955, 956, 964, 965, 966, 967, 968,
	969, 970, 971, 1639, 1640, 0, 1657, 1658, 1659, 0,
	957, 0, 936, 0, 0, 1661, 1662, 937, 951, 0,
	973, 0, 0, 0, 0, 934, 935, 0, 954, 955,
	956, 964, 965, 966, 967, 968, 969, 970, 971, 0,
	0, 936, 0, 0, 0, 0, 957, 951, 0, 0,
	0, 0, 0, 937, 0, 0, 973, 0, 0, 0,
	0, 1654, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 1645, 0, 0, 0,
	0, 961, 974, 0, 0, 959, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 942, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1660, 959, 0, 958, 961, 974, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1655, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 952, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1656, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 960, 0, 0,
	948, 949, 950, 963, 0, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 0, 0, 0, 1929, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 1651, 1652, 1653, 0, 1845, 1650, 1648,
	1649, 1641, 1642, 1643, 1644, 1646, 1647, 0, 0, 0,
	0, 0, 960, 0, 0, 948, 949, 950, 963, 0,
	947, 945, 946, 938, 939, 940, 941, 943, 944, 0,
	0, 934, 935, 1821, 954, 955, 956, 964, 965, 966,
	967, 968, 969, 970, 971, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 937,
	934, 935, 973, 954, 955, 956, 964, 965, 966, 967,
	968, 969, 970, 971, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 936, 0, 0, 0, 0, 937, 951,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 951, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 974, 0, 0, 959, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 958, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 935, 953, 954, 955, 956, 964, 965,
	966, 967, 968, 969, 970, 971, 0, 0, 0, 0,
	962, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 960, 0,
	951, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	948, 949, 950, 963, 0, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 0, 1601, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 2266, 934, 935, 0,
	954, 955, 956, 964, 965, 966, 967, 968, 969, 970,
	971, 0, 0, 0, 961, 974, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 973, 0,
	0, 0, 972, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 967, 968, 969, 970, 971, 959, 0, 936,
	0, 0, 0, 952, 957, 951, 0, 0, 0, 1482,
	0, 937, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 951, 0, 0, 2265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 1673, 0, 0, 1672, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 953, 0, 0, 961,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 942, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 961, 974, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 960,
	0, 0, 948, 949, 950, 963, 0, 947, 945, 946,
	938, 939, 940, 941, 943, 944, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 0, 1216, 0, 0, 0, 0,
	0, 934, 935, 962, 954, 955, 956, 964, 965, 966,
	967, 968, 969, 970, 971, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 1215, 0, 0, 937,
	0, 0, 973, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 936, 0, 0, 0, 0, 0, 951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	967, 968, 969, 970, 971, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 942, 0, 0, 0, 0, 937,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 0, 951,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	0, 962, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 953, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 934,
	935, 962, 954, 955, 956, 964, 965, 966, 967, 968,
	969, 970, 971, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	973, 0, 0, 934, 935, 0, 954, 955, 956, 964,
	965, 966, 967, 968, 969, 970, 971, 0, 0, 0,
	0, 936, 0, 0, 957, 0, 0, 951, 0, 0,
	0, 937, 0, 0, 973, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 936, 0, 0, 0, 934,
	935, 951, 954, 955, 956, 964, 965, 966, 967, 968,
	969, 970, 971, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 942, 0, 1674, 0, 0, 937, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 942, 951, 0, 972,
	0, 1679, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 961, 974, 0, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 959, 0,
	0, 0, 942, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 974, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 962,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 0, 0, 0, 1825, 958, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 953, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 948, 949, 950, 963, 0, 947, 945,
	946, 938, 939, 940, 941, 943, 944, 0, 0, 0,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	967, 968, 969, 970, 971, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 973, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 936, 0, 0, 0, 934, 935, 951,
	954, 955, 956, 964, 965, 966, 967, 968, 969, 970,
	971, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 973, 0,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	967, 968, 969, 970, 971, 0, 0, 0, 0, 936,
	0, 0, 957, 0, 942, 951, 1630, 0, 0, 937,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 0, 951,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	942, 0, 952, 0, 0, 1633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	974, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 942, 0, 0, 972, 0, 0,
	1637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 961, 974, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 959, 0, 0, 0,
	0, 962, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 953, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 934,
	935, 962, 954, 955, 956, 964, 965, 966, 967, 968,
	969, 970, 971, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	973, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 936, 0, 0, 0, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 934,
	935, 0, 954, 955, 956, 964, 965, 966, 967, 968,
	969, 970, 971, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 942, 0, 0, 0, 0, 937, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 951, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 962,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 953, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 0, 0, 0, 0, 934, 935, 962,
	954, 955, 956, 964, 965, 966, 967, 968, 969, 970,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 973, 0,
	0, 934, 935, 0, 954, 955, 956, 964, 965, 966,
	967, 968, 969, 970, 971, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 951, 0, 0, 0, 937,
	0, 0, 973, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 936, 0, 0, 0, 934, 935, 951,
	954, 955, 956, 964, 965, 966, 967, 968, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	942, 0, 0, 0, 0, 937, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 942, 951, 0, 972, 0, 934,
	935, 0, 954, 955, 956, 964, 965, 966, 0, 0,
	0, 0, 959, 961, 974, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 0, 0,
	942, 936, 952, 0, 0, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 962, 952, 0,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 961, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 953, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 948, 949, 950, 963, 0, 947, 945, 946, 938,
	939, 940, 941, 943, 944, 0, 0, 0, 0, 0,
	934, 935, 0, 0, 0, 0, 964, 965, 966, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 962,
	0, 973, 0, 0, 960, 0, 0, 948, 949, 950,
	963, 0, 947, 945, 946, 938, 939, 940, 941, 943,
	944, 0, 936, 0, 0, 0, 0, 0, 951, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 1054,
	1083, 1046, 1074, 1073, 0, 0, 1048, 1047, 0, 0,
	0, 0, 1085, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 948,
	949, 950, 963, 0, 947, 945, 946, 938, 939, 940,
	941, 943, 944, 942, 0, 1079, 0, 1071, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 961, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 1066, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 1054,
	1083, 1046, 1074, 1073, 0, 959, 1048, 1047, 0, 0,
	0, 952, 1085, 1084, 0, 0, 1057, 1056, 1058, 1059,
	1060, 1061, 1062, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 1071, 1070, 0,
	0, 0, 1050, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 0, 1068, 1066, 1067, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	962, 1277, 1275, 1276, 1279, 1278, 1057, 1056, 1058, 1059,
	1060, 1061, 1062, 0, 1082, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1051, 0, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 1063, 1052,
	0, 0, 1050, 0, 0, 0, 0, 0, 1087, 0,
	0, 0, 0, 574, 1072, 0, 0, 0, 1055, 0,
	1049, 0, 0, 1080, 1081, 572, 0, 960, 0, 0,
	0, 0, 0, 963, 0, 947, 945, 946, 938, 939,
	940, 941, 943, 944, 0, 1053, 573, 1065, 0, 0,
	1086, 575, 0, 0, 0, 0, 581, 582, 0, 0,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 507, 576, 0, 0, 1051, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 1052,
	0, 0, 0, 0, 0, 0, 594, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 1080, 1081, 0, 0, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 578, 579, 0, 0, 1053, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	0, 0, 580, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	588, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 593, 0,
	0, 0, 510, 0, 0, 0, 0, 586, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592,
}
var sqlPact = [...]int{

	3523, -1000, 13, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17323, -1000, -1000,
	21390, -1000, -1000, -1000, -1000, -1000, -1000, 21078, 820, 1117,
	-1000, -1000, -1000, -1000, -1000, 21390, 2513, 1447, 5256, 1164,
	21390, 17323, 1138, 1447, 22638, -1000, -1000, 22638, 1770, -1000,
	-1000, -1000, -1000, -1000, 26694, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 569, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 890, 768,
	115, 750, -1000, 700, -50, 14119, 32176, 453, 454, 453,
	453, 444, 774, 26382, 21390, 1531, 11, -1000, 253, 15073,
	3523, 517, 9, 17956, 21390, -1000, 17, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	337, 17, -1000, -1000, 20766, -1000, 1314, 1171, 1169, 19518,
	-1000, -1000, -1000, -1000, -1000, 257, -1000, 12799, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 939, -1000, 10, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10795, 256, 1308, 10795, 935, -1000,
	21390, -1000, -1000, -1000, 1234, -1000, -1000, -1000, -1000, -1000,
	353, 1728, 606, 255, 26070, -1000, 898, -1000, 347, 510,
	-1000, -1000, 13786, 19, 19518, -1000, 10795, 10795, 25758, 21390,
	21390, 1188, 25446, -1000, 700, -1000, -1000, 25134, 24822, 24510,
	24198, 23886, -1000, 1009, 1515, 1515, 1515, 1532, 106, 98,
	115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1694, -1000, -1000, -1000, -1000, 1701, -1000, -1000, -1000, -1000,
	-1000, 1234, 17011, 887, 1520, 1307, -1000, 928, 1304, 1295,
	1292, 1290, 1289, -1000, 669, -1000, 1328, 462, -1000, 1279,
	719, 433, -1000, 1277, 1272, 898, -1000, 898, -1000, -1000,
	-1000, 513, 22638, 20454, 23574, 21390, 20142, 4, 21390, -1000,
	254, 4, 9410, 9410, 9410, -1000, 927, 253, -1000, 8718,
	1296, 1001, -178, 118, 318, -1000, 14431, 16357, -1000, 17011,
	17956, 9, -22, -1000, -1000, -1000, 4923, 591, 15394, 17,
	-1000, -1000, -1000, -1000, -1000, 19518, 21390, 21390, 618, 23262,
	168, -1000, 10795, 6, -1000, -1000, 253, 17323, 1006, 31149,
	-1000, 10795, 10795, 10795, 10795, 10795, 832, 280, -1000, 244,
	243, 5936, -1000, -1000, 1700, -1000, -1000, -1000, 105, -1000,
	-1000, 10795, 17, -1000, -1000, -1000, -1000, 240, 1724, -1000,
	432, -1000, -1000, -1000, 358, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1325, 239, 236, 235, -1000, -1000,
	-1000, -1000, 220, 219, 217, 212, 211, 210, 209, 208,
	206, 205, 204, 202, 200, 199, 198, 752, -1000, 392,
	-1000, -1000, 392, 392, -1000, 187, 187, 188, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 187, -1000, -1000, -1000,
	327, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 196, 1582,
	32006, 17011, 31149, 17323, -1000, -1000, -1000, -1000, 21390, 10795,
	-1000, 1580, 898, -3, -1000, -1000, -1000, -1000, 1080, 1075,
	476, 740, 13453, 13120, 1473, -1000, -1000, -1000, 18, 5256,
	112, -1000, 31149, 31149, 195, 1011, 360, 113, 22950, 360,
	1010, -1000, 1009, 108, 1421, -1000, 108, 1406, 100, 1405,
	-1000, -151, -1000, 1404, -22, 1394, -1000, 949, 1126, 10103,
	1088, 10795, 115, -1000, -1000, 115, 115, 6975, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19830, -1000, -1000,
	604, 21390, 1323, 17323, 21390, 21390, 21390, 21390, 21390, -1000,
	-1000, 295, 1321, 21390, 1060, -1000, -1000, 21390, 21390, 708,
	563, -1000, -3, -1000, 22638, -1000, 926, 1390, 484, 830,
	1384, 724, 715, 1374, 21390, 4, 1575, 21390, 97, -1000,
	30071, -1000, 97, 97, 194, -1000, 5, -1000, 31149, -1000,
	1161, 1158, 15073, 1047, 846, 846, 846, -1000, 191, 268,
	318, 4251, 10795, -1000, 19206, 850, 45, 99, 1296, -1000,
	21390, 116, -1000, 21390, -1000, -1000, -1000, 1267, -10, -1000,
	-1000, 370, 69, 1572, 69, 15715, -1000, 21390, -12, 31149,
	2263, 18270, 512, -1000, 31916, 32006, 5256, 545, 10795, 10795,
	10795, 10795, 10795, 10795, 10795, 10795, 10795, 10795, 10795, 10795,
	10795, 10795, 10795, 10795, 10795, 10795, 10795, 10795, 10795, 10795,
	1094, 10795, 506, 10795, 10795, 10795, 10795, 10795, 10795, 10795,
	10795, 10795, 1597, 831, 179, 930, -1000, 1659, 1659, 1659,
	31497, 31497, 175, 280, -1000, 10795, -1000, 9757, 98, 29391,
	-2, -1000, -1000, -1000, 7321, 385, 31149, 17, 5589, -1000,
	1697, 804, 1338, 1233, 190, 96, 95, 94, 10795, 10795,
	10795, 10795, 10795, 11487, 10795, 10795, 6282, 10795, 10795, 10795,
	10795, 10795, 10795, -1000, 189, -1000, -1000, -1000, -1000, 1696,
	-1000, -1000, 1690, -1000, 540, 524, 1688, -50, -14, -1000,
	1586, -1000, -1000, -1000, -1000, 79, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 188, 752,
	187, 187, 187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	327, -1000, -1000, 392, 392, 392, -1000, -1000, -36, -1000,
	1264, -1000, 344, -18, 448, -3, 898, 855, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1719, -7, -1000, -1000, -7, -1000, -1000, 5256, -1000,
	-1000, 19518, -1000, -1000, 18582, 1569, 1373, -1000, 785, -1000,
	1568, 21390, 912, 1004, -1000, 553, 1372, -1000, -1000, 21390,
	21390, -1000, 21390, -1000, 21390, 21390, 5256, 21390, 21390, -1000,
	-1000, -1000, 31149, -1000, 368, -1000, -1000, 31149, 686, 1174,
	-1000, 1174, -9, -1000, 29813, 1130, 21390, -1000, -1000, -1000,
	-1000, -1000, 21390, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 136, -1000, -1000, -1000, -1000, 21390, 21390, 21390, -1000,
	-57, 754, -1000, 18894, 1508, 1500, 1485, 19518, 1545, -50,
	1256, 1544, -50, 1253, 505, 21390, 503, 502, 19518, -1000,
	186, -20, 370, 9410, 15073, 5256, -1000, 370, 370, 9410,
	8718, -1000, 15073, 15073, 1274, 1154, 15073, -1000, -1000, -1000,
	-1000, 19206, 378, 318, 19206, -1000, 1681, 1092, -31, -1000,
	-1000, 21390, 180, -1000, 318, 93, 1206, 970, -1000, 590,
	1251, 21390, 663, 10795, 854, -1000, 14752, 398, 21390, 663,
	84, -1000, -1000, -1000, 313, 21390, -1000, -1000, 10795, -1000,
	-1000, 21390, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 345, 401, 401, 560, 560, 560, 560, 1680,
	3372, 3454, 3292, 31880, 31880, 31880, 2923, 324, 324, 31880,
	31880, 31880, 31497, 31239, 27595, 10795, 10795, 501, 826, 179,
	27595, 10795, 27595, 27595, 27595, 27595, 31649, 31649, 31649, 31587,
	31587, -1000, 869, -1000, -1000, -1000, -1000, 1250, 178, 11487,
	11487, -1000, -1000, -1000, 5936, 11820, -1000, -1000, -1000, -1000,
	177, 10795, -1000, 29420, -213, -32, -1000, -1000, 10795, -90,
	-115, -1000, -1000, 601, -1000, 10795, -1000, -25, 10795, 10795,
	10795, 92, 91, -1000, 498, -1000, 493, 489, 488, -1000,
	171, 840, 169, 164, 10795, -1000, -1000, -1000, 30891, 27398,
	90, 30857, -111, 88, 85, 30801, -111, 83, 28612, -1000,
	11487, 11487, 11487, 5936, 163, 82, 29777, -111, 30509, 9064,
	9064, 9064, 77, 30453, 10795, -111, 27362, 27333, 3172, -37,
	-41, -42, 1676, -43, 76, 330, 328, 75, -1000, -1000,
	32006, 277, 274, -1000, 1672, 362, 17011, 21390, -1000, 1166,
	-1000, -1000, 672, -1000, 744, -1000, 14119, -1000, -1000, 72,
	-47, -11, 32006, -1000, -1000, -1000, -1000, -1000, 21390, 287,
	21390, 21390, -1000, 162, 1125, 1121, -50, 21390, 1718, -50,
	21390, 1370, 1428, 309, 21390, -1000, 108, 108, -1000, 100,
	-1000, -1000, -22, 686, -1000, 10795, 1660, -1000, -1000, -1000,
	6975, -1000, -1000, -1000, 21390, -160, -30, -1000, -1000, -1000,
	-1000, -1000, 116, 892, 21390, 21390, 21390, -1000, -1000, 1003,
	22326, 1000, 32006, 160, 21390, 21390, 22014, 21702, 21390, 925,
	-50, -1000, 159, -50, -1000, 150, 21390, 687, 21390, 21390,
	684, -50, -1000, 1218, -1000, -135, 1296, -1000, 1218, 1218,
	-48, -1000, -1000, 1274, -1000, 149, 10795, 15073, -1000, 267,
	-1000, -49, -1000, 19206, -1000, 264, -201, -1000, 312, -1000,
	318, 148, 21390, 19206, -1000, 362, 1246, 576, -1000, 589,
	-1000, -1000, 6628, 31149, -1000, 663, 1493, -53, -1000, -1000,
	-1000, 370, 15715, 15073, 8718, -63, 31149, -30, 10795, 27595,
	27595, 10795, 11487, 11487, -1000, 27595, -1000, -1000, -1000, -1000,
	-1000, 1244, 147, 10795, 32006, 28201, 27790, -65, -1000, 8372,
	-28, -1000, 10795, -1000, 29045, -1000, -1000, 270, 1426, -1000,
	10795, 30419, 71, 8026, -1000, 30161, -39, -39, -1000, 1717,
	1035, 766, 703, 639, 1658, -1000, 16036, 372, 862, 29009,
	31916, 32006, -1000, 10795, -1000, -1000, 1242, 10795, -1000, 31916,
	32006, 11487, 11487, 11487, 11487, 11487, 11487, 11487, 11487, 11487,
	11487, 11487, 11487, 11487, 11487, 11487, 11487, 11487, 11487, 11487,
	991, 11487, 11487, 11487, 1648, 1648, 1648, -29, 7680, -1000,
	1318, 1242, 10795, 10795, 32006, 70, 67, 66, -1000, 10795,
	-111, 10795, 10795, 10795, -1000, -1000, -1000, 64, -1000, 1653,
	-1000, -1000, -1000, -1000, -1000, 435, 1647, 63, -1000, 877,
	-1000, -30, -1000, -1000, -1000, -1000, -1000, 1197, -1000, 18582,
	-1000, 146, 21390, 12478, 145, 866, 10795, 143, 142, -1000,
	141, -1000, -1000, 140, 21390, 1111, 309, 17644, -1000, 360,
	-1000, -1000, -1000, 879, 28980, -1000, 1516, 5256, 21390, -1000,
	-1000, -1000, 487, 486, 1368, -1000, 990, -1000, 403, 797,
	-1000, 1367, 981, 1365, 981, -1000, -57, 697, -1000, 10795,
	-1000, 10795, -1000, 483, -1000, -1000, 481, 62, 1212, 1527,
	-1000, 15073, 1212, 1212, -1000, -1000, 21390, 31149, -1000, -178,
	-1000, 1641, -1000, -1000, 1092, -1000, 4590, 19206, 21390, -71,
	-1000, -1000, 17011, 523, -1000, -62, -1000, -1000, 215, -50,
	663, -1000, -67, -1000, 311, 1689, 27595, 3346, 2791, 10795,
	32006, 31531, -75, 10795, 10795, -1000, -76, -1000, 10795, 263,
	31149, -1000, -1000, -1000, 31149, 10795, 1704, 10795, 59, 58,
	52, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 51,
	-1000, -1000, 27006, 10795, 43, -1000, 38, 36, 31149, 1318,
	31149, -1000, -1000, 539, 539, 630, 630, 630, 630, 1648,
	1063, 161, 2516, 2334, 2334, 2334, 811, 479, 479, 2334,
	2334, 2334, 1241, 1069, 139, 2906, 2906, 29023, 10795, -81,
	-1000, -1000, -1000, 31149, 31149, 35, -1000, -1000, -1000, -111,
	238, 28634, 28598, -1000, 33, -1000, 261, 260, -1000, 137,
	-1000, 1199, -1000, 2259, 12478, 134, -93, -1000, 320, 1503,
	10795, -1000, -1000, 131, 21390, -1000, 28569, 12478, 21390, 18582,
	1566, 12478, 904, 1095, 309, 17644, -1000, 553, -1000, -1000,
	-1000, 1516, -1000, 21390, 21390, 21390, 1359, -1000, -1000, 1089,
	1136, 431, 21390, -1000, 21390, -1000, 21390, 21390, 21390, -94,
	-118, 21390, 21390, -1000, 365, 10795, 10795, 1296, 365, 365,
	-122, 318, -1000, -1000, -1000, 1630, -1000, -127, -1000, -72,
	16690, 1434, 21390, 1481, -1000, -1000, 130, 10795, 10795, 31531,
	-128, -1000, 27595, 27595, -1000, 28223, -1000, 31149, -1000, 30161,
	-1000, -1000, -1000, -1000, 790, -1000, 28187, -1000, -1000, -1000,
	-1000, 11487, 1240, 129, 32006, 28158, -1000, -1000, 10795, -1000,
	-1000, -1000, -1000, -1000, 1710, 822, -1000, 21390, -1000, 5256,
	21390, 1227, 983, -1000, -1000, 1093, 128, 11487, 21390, -134,
	12478, 794, 12478, 1516, 17, 5256, 1516, 27812, 5589, -139,
	-1000, -140, -145, 32, -50, -155, 21390, -1000, 309, 17644,
	-1000, 1428, -1000, -1000, -1000, -1000, 21390, 977, -1000, 975,
	10795, -1000, 32006, 981, 981, -1000, 480, 469, 467, 466,
	-1000, -1000, -1000, 21390, 31149, -111, -1000, -1000, -1000, 19206,
	259, -1000, -1000, 127, 17, 538, -161, 21390, -1000, -1000,
	3867, 27595, 27595, -1000, -1000, 31, 862, 1526, -1000, 3329,
	11487, 32006, -162, -1000, 27776, -168, -1000, 303, 21390, 1155,
	-1000, -1000, 21390, 986, -1000, -1000, 10795, 29023, 126, 794,
	-169, 1197, 124, -1000, -1000, -1000, -1000, -1000, -1000, 1503,
	-25, -1000, -1000, 709, 1197, -1000, 794, 123, 17644, -1000,
	1111, -1000, -1000, -1000, 31149, 1501, -1000, -1000, 21390, 21390,
	122, 121, -83, -1000, 1553, -1000, -1000, 10795, 617, -1000,
	370, -1000, -1000, 778, 10795, 3329, -170, -1000, -1000, 1710,
	-1000, -1000, 1709, 120, -1000, -1000, 1351, 27747, 1046, 21390,
	1197, 794, -1000, 21390, 1516, 30, 21390, -1000, 1197, 12478,
	-1000, 1095, 409, 5256, -1000, -1000, 10795, 10795, 21390, 119,
	-39, 15715, -1000, 29, 11141, 11141, -111, -1000, -1000, -1000,
	21390, 1341, -1000, 884, 834, 26, -1000, 1197, -175, -1000,
	-1000, 113, -1000, -181, -1000, -1000, 10795, -1000, -182, -183,
	-1000, -1000, 21, -163, -1000, -1000, -1000, 12153, 899, 649,
	29662, -1000, -188, 21390, -1000, 896, 895, 635, -1000, -1000,
	-1000, -1000, -1000, -1000, 1046, 794, 31149, -1000, -1000, 1704,
	-1000, 1600, -1000, -1000, -1000, -1000, -1000, 859, -1000, -1000,
	1451, -1000, 424, 1018, 1018, 884, 1197, 10449, -1000, -1000,
	-1000, -1000, 1610, -1000, -1000, 1078, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2091, 2090, 1360, 1540, 2083, 2079, 2077, 2076, 2071,
	2068, 2067, 2064, 2062, 2060, 2055, 2052, 2051, 2046, 2045,
	2044, 2043, 2042, 2040, 2037, 2034, 2032, 1503, 2030, 2027,
	2023, 2019, 2017, 2014, 1493, 2013, 1471, 2011, 2000, 1998,
	1997, 1993, 1463, 1454, 1990, 71, 119, 1440, 1989, 1988,
	1430, 1987, 1986, 1983, 1982, 1981, 1980, 76, 1979, 1978,
	1975, 1972, 1970, 1966, 1960, 140, 154, 1958, 1396, 1951,
	1942, 1941, 1940, 1938, 1937, 1931, 1930, 1929, 1928, 1927,
	1925, 1924, 1923, 1922, 1921, 1918, 1917, 158, 1916, 1913,
	1387, 1385, 1912, 1911, 16, 1910, 67, 1904, 40, 159,
	2274, 133, 1903, 1899, 1898, 1896, 36, 74, 81, 1890,
	99, 1888, 1887, 37, 23, 18, 14, 1886, 80, 1884,
	1883, 167, 19, 1879, 1878, 126, 1875, 94, 22, 1357,
	147, 145, 117, 95, 1873, 1872, 1871, 1870, 39, 1869,
	1, 1868, 1867, 1866, 10, 60, 25, 1865, 28, 52,
	1864, 1863, 120, 1862, 70, 96, 1352, 195, 110, 634,
	1861, 73, 13, 78, 1860, 1859, 143, 21, 1858, 24,
	69, 137, 1856, 43, 156, 121, 66, 128, 108, 1855,
	1853, 1851, 88, 1849, 107, 58, 1848, 1847, 44, 1846,
	127, 132, 1845, 1842, 82, 1839, 118, 1838, 1835, 151,
	142, 102, 9, 27, 49, 12, 1363, 1346, 113, 63,
	42, 47, 1834, 1479, 1344, 1067, 31, 93, 55, 45,
	83, 57, 53, 141, 26, 1833, 1828, 109, 1825, 1824,
	1821, 1819, 1817, 91, 1816, 1811, 64, 139, 72, 15,
	46, 79, 30, 51, 148, 111, 150, 97, 1810, 86,
	115, 1807, 105, 1806, 1805, 1113, 129, 1804, 1801, 1800,
	972, 965, 958, 103, 1799, 1798, 879, 877, 1795, 1791,
	54, 1791, 106, 101, 1786, 138, 131, 33, 1785, 114,
	112, 85, 1784, 84, 34, 0, 1693, 98, 1783, 100,
	50, 1781, 1779, 1776, 1775, 20, 3, 8, 5, 6,
	2, 136, 104, 1770, 1769, 122, 89, 35, 1768, 149,
	1767, 1764, 1763, 32, 1762, 11, 1761, 17, 1758, 1757,
	7, 4, 1755, 1754, 123, 1753, 87, 1750, 1586, 1749,
	144, 1748, 1747, 1557, 29, 92,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 7, 8, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 108,
	108, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 105, 105, 110, 110,
	110, 112, 112, 109, 109, 104, 104, 20, 55, 283,
	283, 284, 284, 93, 93, 97, 97, 94, 95, 95,
	96, 96, 26, 26, 26, 22, 22, 23, 24, 27,
	27, 27, 27, 27, 27, 34, 35, 35, 35, 35,
	35, 36, 36, 36, 36, 36, 41, 41, 39, 39,
	38, 38, 37, 37, 40, 40, 158, 158, 157, 157,
	160, 160, 42, 42, 45, 45, 45, 45, 45, 46,
	46, 46, 46, 46, 46, 46, 46, 251, 251, 250,
	44, 225, 225, 47, 183, 183, 48, 48, 48, 48,
	49, 56, 324, 324, 324, 328, 328, 329, 329, 330,
	330, 330, 330, 330, 330, 330, 326, 326, 53, 53,
	92, 60, 60, 60, 60, 60, 60, 62, 64, 61,
	61, 61, 63, 63, 65, 65, 65, 65, 66, 66,
	66, 66, 67, 67, 137, 137, 276, 275, 275, 281,
	281, 281, 135, 135, 135, 135, 135, 136, 136, 136,
	274, 274, 274, 274, 282, 282, 282, 282, 282, 282,
	280, 280, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	80, 80, 87, 87, 87, 87, 87, 87, 69, 74,
	74, 74, 70, 75, 76, 77, 77, 77, 71, 71,
	79, 79, 79, 78, 84, 84, 84, 84, 81, 81,
	81, 82, 82, 85, 85, 85, 72, 73, 86, 83,
	83, 83, 43, 325, 325, 327, 327, 51, 30, 30,
	31, 31, 138, 138, 139, 139, 204, 204, 204, 204,
	140, 140, 111, 111, 111, 203, 293, 293, 294, 294,
	294, 294, 294, 294, 295, 295, 295, 295, 295, 295,
	295, 291, 291, 292, 289, 289, 290, 290, 290, 290,
	331, 331, 202, 202, 144, 144, 298, 298, 298, 298,
	296, 296, 296, 296, 296, 299, 297, 300, 300, 300,
	300, 300, 237, 237, 237, 89, 32, 117, 117, 33,
	29, 29, 187, 187, 148, 148, 242, 242, 242, 128,
	128, 106, 106, 106, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 188, 188, 189, 189, 52,
	54, 59, 88, 88, 88, 21, 21, 25, 25, 58,
	333, 333, 124, 124, 124, 124, 125, 125, 199, 199,
	200, 200, 201, 201, 201, 119, 118, 120, 120, 28,
	28, 113, 113, 114, 114, 115, 115, 116, 116, 334,
	334, 50, 50, 91, 131, 131, 196, 196, 196, 198,
	198, 197, 197, 197, 173, 173, 173, 90, 153, 153,
	162, 162, 163, 163, 248, 164, 164, 57, 57, 100,
	100, 98, 98, 98, 98, 98, 98, 99, 99, 101,
	101, 101, 101, 101, 101, 101, 101, 103, 306, 306,
	306, 309, 309, 305, 307, 307, 308, 308, 332, 332,
	174, 174, 174, 143, 142, 141, 141, 146, 146, 145,
	147, 147, 241, 241, 241, 171, 171, 171, 171, 190,
	190, 191, 191, 192, 192, 193, 193, 193, 194, 194,
	195, 195, 170, 170, 221, 221, 102, 102, 152, 152,
	154, 154, 211, 211, 211, 212, 212, 210, 210, 210,
	210, 243, 243, 243, 243, 243, 243, 243, 322, 322,
	322, 323, 323, 240, 240, 244, 244, 244, 244, 244,
	244, 238, 238, 238, 238, 239, 239, 249, 249, 177,
	177, 177, 177, 175, 175, 176, 176, 245, 245, 245,
	245, 172, 172, 246, 246, 246, 205, 205, 252, 252,
	252, 270, 270, 151, 151, 151, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 254, 254, 254, 254, 256, 256, 256,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 269, 269,
	269, 269, 269, 257, 257, 264, 264, 265, 265, 266,
	267, 258, 258, 259, 259, 260, 261, 268, 268, 268,
	268, 272, 272, 262, 262, 262, 262, 262, 263, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 185, 185, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 215, 215, 215, 215, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 301,
	301, 301, 301, 301, 301, 301, 303, 303, 304, 304,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 310,
	310, 311, 311, 313, 313, 314, 314, 315, 316, 316,
	316, 317, 318, 318, 312, 312, 319, 319, 319, 320,
	320, 321, 321, 321, 321, 321, 227, 227, 227, 228,
	228, 229, 235, 235, 235, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 126, 126, 126, 126, 126, 159, 159, 224, 224,
	222, 222, 222, 226, 226, 178, 178, 271, 271, 271,
	271, 271, 271, 271, 271, 179, 179, 179, 186, 180,
	180, 181, 181, 181, 181, 181, 181, 218, 219, 182,
	182, 182, 220, 220, 230, 234, 234, 233, 232, 232,
	231, 231, 208, 208, 209, 209, 207, 206, 167, 167,
	166, 166, 165, 165, 335, 335, 236, 236, 168, 168,
	169, 161, 161, 247, 247, 247, 247, 155, 155, 133,
	133, 156, 156, 129, 129, 132, 132, 130, 130, 130,
	130, 149, 149, 150, 150, 127, 127, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 273, 273,
	273, 223, 121, 121, 121, 122, 122, 123, 123, 278,
	278, 278, 279, 279, 279, 279, 277, 277, 277, 277,
	277, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 6, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 4, 6, 4, 6,
	4, 6, 3, 5, 3, 5, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 3, 3, 0, 2, 3, 2, 3,
	6, 6, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 1, 1, 1, 1, 1, 3, 4, 5, 3,
	2, 6, 3, 4, 3, 3, 3, 3, 1, 3,
	3, 1, 2, 2, 1, 0, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 1, 1, 1, 1, 1, 2, 3, 4,
	4, 4, 4, 2, 4, 4, 4, 4, 4, 4,
	2, 3, 3, 2, 4, 5, 4, 5, 2, 3,
	3, 4, 2, 4, 3, 3, 4, 4, 2, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 4, 3, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	3, 2, 1, 1, 1, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 6, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 8, 1, 1, 4, 4, 4, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 5, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 3, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -44,
	-55, -54, -56, -59, -57, -52, -53, -60, -68, -88,
	-89, -90, -91, -5, -6, -7, -8, 39, -23, -24,
	72, -28, -29, -30, -31, -32, -33, 94, -308, 98,
	-37, -38, -39, -41, -40, 109, 111, 130, 136, 218,
	224, 244, 246, 248, 255, -98, -100, 242, 243, -61,
	-62, -63, -64, -92, 266, -69, -70, -71, -72, -73,
	-74, -75, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -86, -21, -25, -58, 306, -9, -10, -13,
	-12, -11, -16, -18, -15, -17, -19, -14, 52, 74,
	-306, 102, -101, -99, 357, 315, 269, 40, 278, 66,
	105, 250, 28, 331, 338, 259, -102, -103, 323, 287,
	360, -324, -156, 287, 87, -130, -121, 350, 4, -285,
	-287, 25, 26, 28, 38, 39, 40, 45, 49, 52,
	53, 60, 65, 66, 67, 69, 71, 72, 73, 76,
	77, 85, 86, 88, 90, 94, 96, 98, 101, 102,
	104, 109, 110, 111, 118, 119, 124, 126, 131, 136,
	137, 138, 139, 146, 149, 151, 144, 161, 162, 163,
	165, 166, 167, 170, 169, 174, 177, 180, 182, 183,
	184, 187, 185, 189, 190, 192, 191, 197, 199, 200,
	202, 205, 208, 211, 214, 215, 216, 217, 218, 220,
	222, 224, 226, 227, 228, 229, 230, 232, 233, 235,
	236, 237, 238, 239, 242, 240, 241, 243, 244, 245,
	246, 248, 250, 251, 253, 267, 268, 279, 255, 256,
	257, 258, 262, 260, 263, 264, 266, 269, 271, 274,
	277, 278, 280, 283, 281, 276, 286, 288, 289, 290,
	291, 292, 293, 294, 301, 302, 306, 307, 308, 309,
	312, 313, 314, 315, 317, 320, 321, 322, 327, 332,
	333, 334, 335, 336, 33, 41, 42, 43, 44, 46,
	47, 50, 51, 56, 57, 58, 61, 89, 91, 92,
	108, 112, 113, 120, 121, 122, 132, 134, 140, 141,
	150, 152, 153, 154, 155, 156, 158, 172, 186, 196,
	198, 209, 213, 221, 223, 231, 252, 261, 272, 273,
	282, 284, 296, 297, 298, 303, 304, 319, 323, 324,
	-129, -121, 87, -121, 224, 27, 96, 149, 314, 313,
	27, 220, 260, 289, 291, -121, -46, 357, -45, -4,
	-27, -36, -47, -42, -43, -68, -57, -34, -50, -90,
	-91, -328, 27, -329, -330, 74, 102, 130, 259, 149,
	96, 313, -277, 4, -285, -287, -286, -288, 63, 75,
	129, 148, 142, 160, 164, 173, 175, 188, 210, 212,
	249, 270, 27, 29, 30, 31, 32, 34, 35, 36,
	37, 48, 54, 55, 59, 62, 64, 70, 74, 78,
	79, 81, 80, 82, 83, 84, 93, 95, 97, 99,
	100, 103, 105, 107, 115, 116, 117, 125, 127, 128,
	130, 133, 135, 143, 145, 147, 157, 159, 168, 171,
	176, 178, 179, 193, 194, 195, 201, 203, 204, 206,
	207, 219, 225, 234, 247, 259, 265, 275, 285, 287,
	295, 299, 300, 305, 310, 311, 316, 318, 325, 326,
	328, 329, 330, 331, 162, -121, -324, 162, -328, -125,
	255, -121, -125, -87, 263, 4, 27, 87, 187, 265,
	296, 177, 60, 252, 263, -66, 302, -65, 296, -276,
	-67, -157, 187, -121, -332, 287, 162, 228, 287, 316,
	326, -187, 87, 311, -99, -101, -100, 326, 287, 145,
	87, 316, -145, -146, 310, 157, 107, 207, -98, -100,
	-306, -281, -274, -237, 9, 305, 115, 203, -280, 8,
	349, -273, -279, 5, 7, 348, 4, -285, -287, -286,
	-87, 263, 39, 60, 27, 65, 88, 131, 145, 146,
	166, 70, 71, 227, 177, 163, 301, 167, 264, 288,
	302, 74, 317, 292, 110, -333, 302, 302, -333, -333,
	-124, 302, 299, 287, 145, 87, 326, -309, 232, -305,
	-121, -309, -141, -143, -142, 27, 99, 361, -169, 357,
	-243, 355, -245, -129, -100, -244, 357, 204, -3, 299,
	361, -156, -149, -121, -207, -206, 359, 128, 357, -166,
	-167, -206, -207, -121, 27, 128, 159, 159, -246, -245,
	-129, -183, 357, -251, -250, -279, 323, 203, 361, -213,
	-215, 348, 349, 343, 193, 337, -227, -217, -230, 108,
	252, 357, -129, -216, 362, 9, -303, -100, 34, -228,
	-229, 54, -121, 7, 8, 5, 6, -127, -254, -223,
	-263, 305, 115, 195, -301, -302, 4, -285, -278, -255,
	-265, -259, -262, 158, 63, 79, 80, 83, 81, 84,
	265, 316, 55, 33, 112, 113, 213, 221, 284, 303,
	304, 140, 196, 141, 61, 132, 172, 101, 42, 44,
	46, 47, 56, 57, 89, 91, 92, 120, 121, 122,
	150, 152, 153, 154, 155, 156, 198, 231, 272, 282,
	297, 298, 324, -286, -266, -267, -260, -261, -268, -225,
	357, 128, -213, 203, -121, -87, 336, 2, 267, 357,
	-66, 58, 302, -200, -201, -118, -119, -120, 161, 226,
	230, 336, 299, 342, 128, -281, -137, 93, -160, 359,
	-172, -245, -213, -213, -157, 140, -121, -157, 145, -121,
	140, -145, -146, -158, 140, -157, -158, 140, -133, 140,
	-132, -129, -121, 140, -149, 140, -171, -190, -191, 176,
	117, 201, -174, 27, 99, -174, -174, 49, 358, 358,
	8, 7, 7, -87, -283, -280, 9, 267, 227, 264,
	60, 128, -325, 203, 128, 128, 128, 128, 128, 227,
	264, 125, 301, 128, 161, 226, 279, 287, 326, 128,
	128, -199, -200, -199, 299, -125, -245, 140, -129, -132,
	140, -121, -245, 140, 361, -309, -150, 357, -161, -247,
	-213, 350, -161, -161, 203, -169, -168, -236, -213, 93,
	75, -177, 164, 188, 129, 173, 249, 148, 7, -46,
	-210, 362, 357, 350, -240, 338, -100, -244, -243, -129,
	357, -283, -130, 361, -277, 350, 280, 358, -155, -129,
	-167, -246, -131, -129, -131, 266, -121, 35, -159, -213,
	358, 361, -324, -330, 10, 11, 62, 38, 348, 349,
	350, 351, 123, 352, 353, 346, 347, 345, 340, 341,
	342, 68, 181, 254, 13, 14, 15, 31, 206, 175,
	337, 142, 270, 343, 16, 17, 18, 19, 20, 21,
	22, 23, 160, 41, 143, -126, -134, -213, -213, -213,
	-213, -213, 212, -165, -208, 355, -100, 357, -100, -213,
	-159, 7, -100, -222, 355, -231, -213, -166, 357, 5,
	357, 5, -310, 332, 125, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 223, -272, 327, -272, -272, -256, 357,
	-256, -257, 357, -256, 333, 338, 357, 35, -224, -252,
	-253, -255, -264, -258, -262, -263, 45, 51, 50, 294,
	186, 261, 273, 319, 43, 202, 151, 150, 152, 153,
	154, 155, 156, 272, 42, 231, 121, 122, 120, 101,
	92, 91, 198, 47, 46, -266, -267, -260, -261, 89,
	297, 298, 158, 44, 57, 56, 324, 282, -284, -283,
	-324, -65, -276, -159, 35, -200, 361, 174, -136, 180,
	192, 137, 204, 334, -282, 5, 4, -223, -237, 93,
	177, -263, -275, 93, -281, -275, 93, 77, 359, -277,
	-110, 361, 53, 245, 357, -144, 193, -117, -307, 331,
	-144, 357, -122, 140, -121, -307, 193, -171, -110, 361,
	108, -110, 108, -110, 361, 108, 362, 108, 108, -191,
	-190, -192, -213, 27, -195, 119, 189, -213, -215, -99,
	-99, -99, -147, -241, -213, 225, 145, -157, 27, 268,
	-276, -327, 125, -324, -276, -276, -276, -276, -276, 263,
	-46, 125, -121, 174, -276, -276, 287, 145, 287, -125,
	-108, 240, -107, 26, 28, 102, 321, 108, 276, 293,
	256, 276, 293, 256, 240, 108, 240, 240, 108, -305,
	35, -149, -152, 361, 128, 35, 4, -152, -152, 357,
	361, 358, 164, 164, -243, -177, 164, -175, 210, -175,
	-175, -322, 357, 356, -240, -277, 355, 363, -159, -239,
	-238, 35, -121, 208, 358, -129, -249, 339, -121, 128,
	358, 361, -205, 329, -196, -57, 357, 93, 35, -196,
	-162, -163, -248, -164, -129, 357, -121, 358, 361, -46,
	-250, 299, -270, -252, -269, 236, 237, 235, 239, 238,
	-252, -277, 296, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, 175, 142, 270, 41, 143,
	-213, 299, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, 185, 193, 195, 305, 115, 312, 99, 199, -335,
	285, 37, -220, -100, 357, -235, 32, 275, 27, -227,
	252, 357, -208, -213, -209, -159, 358, 358, 361, -159,
	-226, 356, -222, -234, -233, 328, 358, -159, 325, 27,
	99, 350, 7, -184, 335, 184, 90, 138, 183, -185,
	258, -311, 118, 133, 357, 358, 358, 358, -213, -213,
	-178, -213, -159, -178, -179, -213, -159, -180, -214, -215,
	348, 349, 343, 357, 252, -181, -213, -159, -213, 48,
	171, 300, -182, -213, 128, -159, -213, -213, -213, -159,
	-159, -159, 357, 7, 7, 296, 296, 7, -45, 358,
	361, -151, 34, -184, 357, -249, 361, 128, 358, 302,
	-201, -135, 230, 274, 241, 262, 361, -277, -245, -138,
	-149, -139, -121, -204, -203, -291, -292, -289, 145, 311,
	116, 70, -290, 59, 225, 127, 35, 108, 217, 35,
	203, 193, -113, 290, 108, -157, -158, -158, -132, -133,
	-277, -121, -149, -193, -273, 357, 349, -194, 252, 253,
	361, -106, 36, 97, 165, -129, -326, -121, 263, -46,
	-129, -132, -129, 361, 299, -188, 70, 64, -203, 140,
	64, -289, -121, 311, -188, 70, -188, 70, 70, -245,
	38, -57, 128, 38, -57, 128, 299, -132, 299, 299,
	-245, 357, 358, -205, -247, -154, -243, -277, -205, -205,
	-161, -236, -243, -243, -176, 318, 203, 164, -243, -238,
	358, -323, 7, -240, -239, 7, -212, -211, 126, 191,
	358, -121, 357, -240, 358, -93, 139, 199, 280, 128,
	-129, -173, 247, -213, -173, -198, 203, -155, 323, -121,
	-173, -153, 361, 128, 342, -155, -213, -326, 336, -213,
	-213, 299, -335, 285, -220, -213, 185, 195, 305, 115,
	312, 99, 199, 128, 357, -214, -214, -159, -217, 357,
	-159, 356, 365, 358, -213, 356, 356, 361, -232, -233,
	103, -213, -146, 361, -145, -213, -159, -159, 358, 358,
	299, 299, 299, 299, 357, -316, 211, 357, 357, -213,
	35, 361, 358, 128, 358, 358, -186, 219, 358, 10,
	11, 348, 349, 350, 351, 123, 352, 353, 346, 347,
	345, 340, 341, 342, 68, 181, 254, 13, 14, 15,
	160, 22, 23, 143, -214, -214, -214, -159, 357, 358,
	-218, -219, 128, 125, 35, -182, -182, -182, 358, 128,
	-159, 361, 361, 361, 358, 358, 358, 7, 358, 361,
	358, 336, 336, 358, -252, 355, 355, 7, -96, 331,
	-283, -326, -118, 309, 67, 230, -281, 358, 358, 361,
	-252, -122, 145, 357, -122, -121, 357, 165, 165, -57,
	-157, 5, -57, -129, 108, -114, 104, -334, 342, -121,
	-110, -110, -110, -194, -213, -241, -129, 362, 361, -249,
	-107, -129, -121, -121, 193, -203, 140, -112, 193, -121,
	-121, 140, -121, 140, -121, -121, -108, 240, -57, 357,
	-57, 357, -121, 240, -121, -129, 240, -45, -170, 133,
	-249, 361, -170, -170, 358, -176, 357, -213, -243, 356,
	358, 361, -239, 356, 361, 364, 342, -240, 357, -149,
	-238, -96, 128, 286, 280, -161, 194, -173, 69, 358,
	-205, -163, -154, -236, 358, -213, -213, -214, -214, 128,
	357, -213, -224, 31, 31, 358, -159, 358, 361, -209,
	-213, 358, -222, 105, -213, 295, 358, 325, -146, -146,
	-146, 5, 184, 138, 183, -185, 183, -185, -185, 7,
	-317, -121, 357, 329, -145, 358, -270, -252, -213, -218,
	-213, -270, -252, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, 99, 193, 199, -214, -214, -214, 361, -159,
	358, -219, -218, -213, -213, -252, 358, 358, 358, -159,
	-213, -213, -213, 358, 7, 356, 7, 7, 358, 205,
	-140, 144, -204, -293, 357, -122, -148, -242, -121, -304,
	357, -301, -302, -127, 357, -290, -213, 357, 357, 357,
	-144, 357, -121, -115, 170, -334, -280, -307, 204, 358,
	-106, -277, -121, 299, 299, 108, 193, 320, -105, 102,
	266, -189, 108, -110, 108, -110, 299, -188, 70, -159,
	-159, 299, 299, 358, -221, 135, 49, -243, -221, -221,
	-149, -210, 7, -211, -277, 355, -239, -149, 358, -284,
	296, -197, 357, 203, -57, -173, 342, 31, 31, -213,
	-224, 358, -213, -213, 358, -213, 356, -213, 5, -213,
	358, 358, 358, 358, -318, -121, -213, 358, 358, 358,
	-219, 128, 99, 199, 357, -213, 358, 358, 361, 358,
	358, 358, 356, 356, 357, 143, -294, 70, -295, 62,
	116, 74, 193, 195, 311, 225, 59, 93, 234, -148,
	357, 358, 361, -128, -166, 62, -128, -213, 357, -149,
	358, -148, -149, -138, 35, -148, 203, -116, 169, -334,
	-280, -113, -106, -121, -121, -203, 108, 193, 93, 193,
	93, 86, 307, -121, -121, -129, -121, -121, 358, 358,
	-121, -129, -313, 330, -213, -159, -313, -313, 358, -240,
	7, 358, -216, -127, -121, 100, -149, 70, -169, -100,
	357, -213, -213, 358, 358, -146, -312, 216, 358, -214,
	128, 357, -224, 358, -213, -95, -94, 5, 214, -121,
	-277, -121, 116, 140, 195, 165, 357, -214, -129, 358,
	-148, -202, -331, 73, 283, -242, -106, -277, -106, 358,
	-159, 358, 358, 358, 358, -57, 358, -129, -334, -280,
	-114, -203, 195, 195, -213, -252, -110, -110, 299, 299,
	299, 299, -314, -315, -121, -239, 356, 357, 313, 194,
	358, -121, 358, -146, 49, -214, -224, 358, 358, 361,
	358, -97, 342, -129, -295, -122, 193, -213, -123, 357,
	-202, 358, -140, 357, -128, -146, 234, -140, -202, 357,
	-280, -115, -109, 62, -121, -121, 357, 357, 361, 35,
	-159, 266, -205, -319, 229, 253, -159, 358, -94, 5,
	357, 108, 358, -298, 182, -121, -140, -202, -149, -106,
	358, -129, -140, -148, -116, -104, 318, -277, -159, -159,
	-315, -317, -146, -162, 358, -320, -321, 41, 308, 77,
	-213, -320, -149, 116, -296, -299, -297, 203, 129, 215,
	271, 358, -140, 358, -144, 358, -213, 358, 358, 358,
	-205, -321, 222, 124, 252, 222, 124, 358, -121, -297,
	203, -299, 203, 313, 96, -298, -202, 31, -111, 53,
	245, -300, 190, 245, 53, 266, -300, -296, -140, -321,
	25, 195, 93,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 34, 35, 36, 37, 0, 105, 106,
	0, 109, 110, 111, 112, 113, 114, 0, 0, 0,
	121, 122, 123, 124, 125, 0, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 477, -2, 0, 0, 191,
	192, 193, 194, 195, 0, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 412, 413, 414, 509, 38, 39, 40,
	41, 42, 45, 46, 47, 48, 43, 44, 0, 383,
	506, 0, -2, 518, 0, 0, 0, 421, 0, 421,
	421, 425, 0, 0, 0, 516, 492, 493, 0, 0,
	-2, 0, 172, 0, 1063, 991, 997, 998, 1022, 1023,
	1024, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
	0, 993, 1063, 166, 1122, 168, 0, 0, 0, 0,
	116, 117, 118, 119, 120, 165, 142, 0, 149, 150,
	151, 152, 153, 154, 155, 156, 144, 145, 146, 147,
	148, 0, 175, 176, 177, 179, 180, 181, 182, 183,
	184, 185, 302, 1036, 1037, 1038, 1039, 1040, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 0, 162, 0, 0, 0, 411,
	1149, 427, 409, 188, 0, 262, 263, 264, 265, 266,
	0, -2, 1051, 1237, 1155, 200, 1176, 208, 1243, 0,
	211, 216, -2, 138, 0, 508, 0, 0, 0, 0,
	0, 0, 0, 382, -2, 487, 488, 0, 0, 0,
	0, 0, -2, 0, 512, 512, 512, 0, 0, 488,
	0, 190, 219, 220, 221, 230, 231, 232, 233, 372,
	0, 374, 240, 241, 1018, 0, 1032, 1033, 1034, 1035,
	260, 0, 0, 0, 263, 0, 273, 304, 0, 0,
	0, 0, 0, 280, 0, 283, 0, 0, 288, 292,
	0, 0, 298, 0, 0, 429, 420, 429, 417, 418,
	419, 422, 0, 0, 0, 0, 0, 498, 1128, 501,
	1004, 499, 0, 0, 0, 515, 514, 0, 546, 0,
	497, 507, 560, 597, 574, 565, 0, 0, 2, 0,
	0, 173, 174, 1001, 999, 1000, 0, 0, 0, 994,
	970, 968, 969, 167, 169, 0, 0, 0, 0, 603,
	597, 163, 0, 0, 157, 159, 1249, 0, 0, 307,
	705, 0, 0, 0, 0, 0, 0, 804, 806, 1211,
	1237, 0, 808, 809, 0, 811, 813, 814, 0, 817,
	818, 961, 993, 1007, 1008, 1009, 1010, 0, 0, 1013,
	0, 1015, 1016, 1017, 860, 827, -2, -2, 1005, 633,
	634, 635, 636, -2, 1251, 831, 833, 835, 837, 838,
	839, 840, 0, 1195, 1212, 1213, 1233, 1234, 1242, 1246,
	1247, 1219, 1230, 1220, 1207, 1217, 1228, 1069, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1031, 667, 668, 673, 674, 676, 0,
	0, 0, 410, 0, 426, 189, 267, 196, 0, 0,
	199, 1206, 1176, 202, 430, 432, 433, 434, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 139, 0,
	80, 601, 107, 108, 355, 1219, -2, 355, 1026, 505,
	1219, -2, 0, 80, 1219, 136, 80, 1219, 80, 1219,
	989, 996, 132, 1219, 134, 1219, 483, 527, 528, 0,
	0, 0, 0, 510, 511, 0, 0, 0, 479, 480,
	373, 1020, 1019, 261, 268, 89, 90, 0, 281, 289,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 282,
	290, 507, 0, 0, 0, 294, 295, 0, 0, 0,
	0, 415, 428, 416, 0, 424, 0, 1219, 597, 0,
	1219, 0, 0, 1219, 0, 500, 0, 0, 549, 981,
	985, 986, 549, 549, 0, 547, 0, 978, 976, 977,
	0, 0, 0, 0, 594, 594, 594, 592, 568, 0,
	574, 0, 0, 598, 586, 0, -2, 565, 0, 599,
	0, 588, 992, 0, 966, 967, 102, 0, 0, 987,
	971, 607, 0, 454, 0, 0, 604, 0, 0, 916,
	507, 0, 0, 178, 0, 0, 0, 0, 895, 896,
	897, 898, 899, 900, 903, 904, 901, 902, 905, 906,
	907, 0, 0, 0, 908, 909, 910, 0, 0, 912,
	0, 914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 911, 710, 711, 712,
	734, 735, 0, 805, 972, 965, 807, 0, -2, 916,
	0, 810, 815, 816, 0, 0, 960, -2, 0, 1012,
	0, 702, 862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 670, 681, 678, 677, 654, 0,
	653, 651, 0, 655, 0, 0, 0, 507, 0, 918,
	615, 616, 617, 618, 619, 702, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 664, 0,
	639, 639, 639, 656, 657, 665, 666, 671, 672, 683,
	684, 686, 688, 682, 682, 682, 679, 680, 588, 91,
	0, 197, 0, 0, 0, 203, 0, 0, 435, 227,
	228, 229, 437, 438, 209, 234, 235, 236, 237, 238,
	239, 0, 204, 206, 217, 205, 207, 210, 0, 140,
	375, 0, 78, 79, 313, 0, 0, 376, 0, 504,
	0, 0, 0, 1219, 1025, 442, 0, 486, 126, 0,
	0, 128, 0, 130, 0, 0, 0, 0, 0, 525,
	526, 529, 533, 534, 537, 540, 541, 531, 705, 494,
	495, 496, 519, 520, 393, 0, 0, 269, 270, 271,
	272, 274, 0, 303, 275, 276, 277, 278, 279, 284,
	286, 507, 291, 293, 296, 297, 0, 0, 0, 423,
	49, 406, 59, 0, 406, 406, 0, 0, 0, 0,
	55, 0, 0, 57, 0, 0, 0, 0, 0, 502,
	0, 0, 607, 0, 0, 0, 984, 607, 607, 0,
	0, 980, 0, 0, 0, 0, 0, 589, 593, 590,
	591, 0, 0, 574, 586, 557, 0, 0, 0, 564,
	585, 0, 584, 573, -2, 0, 94, 0, 1002, 0,
	0, 0, 466, 0, 466, 456, 0, 0, 0, 466,
	469, 470, 472, 473, 0, 0, 605, 164, 0, 143,
	158, 0, 706, 611, 612, 658, 659, 660, 661, 662,
	707, 708, 0, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, -2, -2, -2, 726, 727, 728, -2,
	-2, -2, 732, 733, -2, 913, 915, 0, 975, 0,
	-2, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 751, 0, 753, 756, 758, 760, 0, 0, 0,
	0, 974, 770, 952, 0, 0, 892, 893, 894, 755,
	0, 0, 973, 964, 0, 0, -2, 812, 0, 0,
	0, 922, 923, 959, 955, 0, 819, 518, 0, 0,
	0, 0, 0, 1021, 689, 690, 691, 692, 693, 694,
	703, 870, 0, 0, 0, 832, 834, 836, 0, 0,
	0, 916, 926, 0, 0, 916, 937, 0, 0, 773,
	0, 0, 0, 0, 1237, 0, 916, 945, 0, 0,
	0, 0, 0, 916, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 161,
	0, 608, 610, 620, 0, 101, 0, 0, 198, 0,
	431, 436, 0, 224, 0, 226, 0, 141, 602, 0,
	0, 312, 1001, 314, 316, 317, 318, 319, 1026, 0,
	1026, 0, 345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 450, 0, 137, 80, 80, 990, 80,
	995, 133, 135, 0, 535, 0, 0, 532, 538, 539,
	0, 522, 391, 392, 0, 0, 305, 186, 285, 287,
	299, 300, 588, 0, 0, 0, 0, 405, 61, 1219,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 54, 0, 0, 0, 0, 0,
	0, 507, 1003, 543, 982, 588, 550, 983, 543, 543,
	0, 979, 576, 0, 578, 0, 0, 0, 580, 0,
	569, 0, 571, 586, 562, 0, 0, 555, 0, 554,
	574, 582, 0, 0, 600, 101, 0, 0, 103, 0,
	988, 115, 0, 606, 451, 466, 0, 0, 458, 455,
	453, 607, 0, 0, 0, 0, 917, 170, 0, -2,
	-2, 0, 0, 0, 771, -2, 752, 754, 757, 759,
	761, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 962, 965, -2, 917, 920, 921, 0, 0, 956,
	0, 0, 0, 0, 517, 518, 518, 518, 825, 0,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 843, 0, 844, 845, 0, 0, 846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 776, 777, 778, 0, 0, 847,
	943, 944, 0, 0, 0, 0, 0, 0, 852, 0,
	950, 0, 0, 0, 856, 857, 858, 0, 637, 0,
	663, 685, 687, 675, 919, 0, 0, 0, 88, 0,
	92, 171, 201, 222, 223, 225, 218, 321, 354, 0,
	327, 0, 1026, 0, 0, 0, 0, 0, 0, 310,
	355, 377, 379, 0, 0, 446, 450, 0, 449, 505,
	127, 129, 131, 0, 0, 521, 393, 0, 0, 301,
	60, 395, 0, 0, 0, 63, 1219, 71, 0, 408,
	72, 1219, 80, 1219, 80, 73, 50, 406, 51, 0,
	52, 0, 403, 0, 394, 401, 0, 0, 545, 0,
	548, 0, 545, 545, 513, 577, 0, 596, 579, 560,
	570, 0, 567, 558, 0, 559, 0, 586, 0, 0,
	566, 87, 0, 0, 104, 464, 465, 452, 463, 0,
	466, 471, 468, 474, 0, 709, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 953, 0, 887, 0, 0,
	964, -2, 924, 954, 958, 0, 820, 0, 0, 0,
	0, 1014, 695, 696, 697, 698, 699, 700, 701, 0,
	868, 869, 873, 0, 0, 830, 0, 0, 925, 936,
	938, 774, 775, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, -2, -2, -2, 792, 793, 794, -2,
	-2, -2, 0, 0, 0, -2, -2, 939, 0, 0,
	890, 941, 942, 947, 948, 0, 849, 850, 851, 949,
	0, 0, 0, 669, 0, 613, 0, 0, 621, 0,
	308, 0, 315, 325, 0, 0, 0, 384, 390, 390,
	0, 828, 829, 0, 0, 344, 0, 0, 0, 313,
	0, 0, 0, 448, 450, 0, 441, 442, 530, 536,
	523, 393, 187, 0, 0, 0, 0, 81, 65, 0,
	0, 0, 0, 69, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 503, 864, 0, 0, 551, 864, 864,
	0, 574, 572, 556, 552, 0, 563, 0, 583, 93,
	0, 0, 0, 0, 457, 467, 0, 0, 0, -2,
	0, 764, -2, -2, 886, 917, 963, 957, 1011, 518,
	821, 823, 824, 704, 875, 872, 0, 859, 841, 842,
	935, 0, 0, 0, 0, 917, 889, 848, 0, 854,
	855, 638, 614, 609, 0, 0, 326, 0, 329, 0,
	0, 0, 0, 335, 336, 0, 0, 0, 0, 0,
	0, 353, 0, 393, 1006, 0, 393, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 439, 450, 0,
	443, 444, 524, 397, 399, 62, 0, 0, 77, 0,
	0, 407, 0, 80, 80, 396, 0, 0, 0, 0,
	404, 402, 489, 0, 544, 542, 490, 491, 595, 586,
	0, 581, 587, 0, 0, 0, 0, 0, 475, 476,
	0, -2, -2, 765, 888, 0, 518, 0, 861, -2,
	0, 0, 0, 891, 0, 0, 98, 96, 0, 0,
	330, 331, 1026, 0, 334, 337, 0, 339, 1028, 353,
	0, 321, 0, 350, 351, 385, 386, 389, 387, 390,
	518, 343, 348, 0, 321, 311, 353, 0, 0, 445,
	446, 64, 66, 67, 76, 84, 68, 74, 0, 0,
	0, 0, 863, 865, 0, 561, 553, 0, 0, 460,
	607, 462, 822, 878, 0, -2, 0, 800, 853, 0,
	100, 97, 0, 0, 328, 332, 0, 0, 359, 0,
	321, 353, 347, 0, 393, 0, 0, 309, 321, 0,
	447, 448, 86, 0, 398, 400, 0, 0, 0, 0,
	518, 0, 461, 0, 0, 0, 874, 801, 99, 95,
	0, 0, 338, 364, 0, 0, 341, 321, 0, 388,
	820, 355, 380, 0, 440, 70, 0, 83, 0, 0,
	866, 867, 0, 607, 871, 876, 879, -2, 1179, 1060,
	0, 877, 0, 0, 340, 360, 361, 0, 356, 357,
	358, 1027, 342, 352, 359, 353, 85, 56, 58, 0,
	459, 0, 881, 882, 883, 884, 885, 324, 333, 362,
	0, 363, 0, 0, 0, 364, 321, 0, 320, 322,
	323, 365, 0, 368, 369, 0, 366, 349, 381, 880,
	367, 370, 371,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 346, 3, 352, 347, 3,
	357, 358, 350, 348, 361, 349, 359, 351, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 365, 360,
	340, 342, 341, 3, 362, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 355, 3, 356, 353, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 363, 345, 364, 343,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 344, 57683, 354, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:868
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:874
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:880
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:910
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:922
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:953
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:957
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:970
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:984
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql.y:996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1003
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql.y:1008
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1015
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1026
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1036
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1041
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1046
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1051
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1055
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1058
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1068
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:1078
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1081
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1088
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1091
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1107
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1117
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1121
		{
			sqlVAL.union.val = nil
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1127
		{
			sqlVAL.union.val = DropCascade
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1131
		{
			sqlVAL.union.val = DropRestrict
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1135
		{
			sqlVAL.union.val = DropDefault
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1141
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 82:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1145
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1150
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1151
		{
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1154
		{
			return unimplemented(sqllex, "alter using")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1155
		{
		}
	case 87:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:1159
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1165
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1171
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1175
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1181
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1191
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1195
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1201
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1205
		{
			sqlVAL.str = ""
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1211
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1217
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1227
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1230
		{
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1234
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1238
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:1242
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1253
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1260
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1277
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1284
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1287
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1288
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1289
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1290
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1302
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1306
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1312
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1316
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1322
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1330
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1340
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1344
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1350
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1354
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1360
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1370
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1374
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1391
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1395
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1401
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1415
		{ /* SKIP DOC */
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1421
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1435
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1449
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1456
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1467
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1471
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1478
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1484
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1490
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1494
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1501
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1508
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1515
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1519
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1523
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1530
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1533
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1537
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1548
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1552
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1556
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1560
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1564
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1568
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1572
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1580
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1591
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1595
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1602
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1614
		{ /* SKIP DOC */
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1615
		{ /* SKIP DOC */
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1616
		{
			return unimplemented(sqllex, "set local")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1620
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1629
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1635
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1639
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:1644
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1650
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1654
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1660
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1664
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1668
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1672
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1681
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1685
		{
			return unimplemented(sqllex, "set from current")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1692
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1697
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1704
		{
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:1706
		{
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1713
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1725
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1731
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1735
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1739
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1743
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1747
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1753
		{
			sqlVAL.union.val = Low
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1757
		{
			sqlVAL.union.val = Normal
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1761
		{
			sqlVAL.union.val = High
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1767
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1771
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1775
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1782
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1793
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1797
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1801
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1806
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1810
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1839
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1840
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:1851
		{
			sqlVAL.str = "client_encoding"
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1854
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1858
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1864
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1868
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1872
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1878
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1884
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1890
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1896
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1900
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1904
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1910
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1914
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1920
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1924
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1928
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1934
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1940
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1944
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1948
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:1952
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1958
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1962
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1966
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1972
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:1976
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1982
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1987
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:1992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:1999
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2005
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2011
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2017
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2022
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2034
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2040
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2045
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2051
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2055
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2062
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:2070
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2074
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2080
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql.y:2084
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2091
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2097
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2101
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2107
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2113
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2119
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2127
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2134
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2139
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2144
		{
			sqlVAL.union.val = DropDefault
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2150
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2165
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2171
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2175
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2179
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2183
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2187
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2191
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2209
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2213
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2217
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2221
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2225
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2229
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2233
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:2242
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2251
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2264
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2276
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2281
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2287
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2293
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2303
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2313
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2336
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2340
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2346
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2350
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2355
		{
			return unimplemented(sqllex, "match full")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2356
		{
			return unimplemented(sqllex, "match partial")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2357
		{
			return unimplemented(sqllex, "match simple")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2358
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2364
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2365
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2366
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2367
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2368
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2371
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2374
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2377
		{
			return unimplemented(sqllex, "no action")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2380
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2381
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2382
		{
			return unimplemented(sqllex, "action set null")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2383
		{
			return unimplemented(sqllex, "action set default")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2387
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2391
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2395
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2402
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2409
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2415
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2419
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2426
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql.y:2439
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql.y:2450
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2464
		{
			sqlVAL.union.val = true
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2468
		{
			sqlVAL.union.val = false
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2474
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2487
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2490
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2491
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2494
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2495
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2499
		{
			sqlVAL.union.val = Ascending
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2503
		{
			sqlVAL.union.val = Descending
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2507
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2513
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2519
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2523
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2527
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2531
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2535
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql.y:2537
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2541
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2545
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2551
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2555
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2561
		{
			sqlVAL.union.val = true
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2565
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2570
		{
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2571
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2575
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2582
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2589
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2601
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2605
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2611
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2615
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2621
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2630
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2631
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2635
		{
			sqlVAL.str = ""
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2639
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2643
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2647
		{
			sqlVAL.str = ""
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2653
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2657
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2663
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2667
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2673
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2677
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2687
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2691
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2695
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2701
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2707
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2713
		{
			sqlVAL.union.val = ReadOnly
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2717
		{
			sqlVAL.union.val = ReadWrite
		}
	case 439:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2723
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql.y:2733
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2746
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2750
		{
			sqlVAL.str = ""
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2756
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2760
		{
			sqlVAL.str = ""
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2766
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2770
		{
			sqlVAL.str = ""
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2776
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2780
		{
			sqlVAL.str = ""
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2785
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2786
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2790
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:2796
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:2805
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2818
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2822
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2828
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2832
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2836
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2842
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2846
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:2852
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2856
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2858
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2864
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2869
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2873
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 467:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:2880
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2886
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:2887
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2891
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2905
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2917
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:2921
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2965
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2971
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2975
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:2990
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:2994
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:2998
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3002
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3006
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3010
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:3044
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:3057
		{
			sqlVAL.union.val = &SelectClause{
				DistinctOn: sqlDollar[2].union.selExprs(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:3071
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3085
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3094
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3103
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3114
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3131
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3132
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3133
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3136
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3137
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:3140
		{
			return unimplemented(sqllex, "cte")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3143
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3144
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3147
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3148
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3151
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3152
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3156
		{
			sqlVAL.union.val = true
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3160
		{
			sqlVAL.union.val = false
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3164
		{
			sqlVAL.union.val = false
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3170
		{
			sqlVAL.union.val = sqlDollar[4].union.selExprs()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3176
		{
			sqlVAL.union.val = true
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3181
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3182
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3186
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3190
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3196
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3202
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3212
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3216
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3220
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3229
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3238
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3249
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3258
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3264
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3271
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3278
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3291
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3295
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3301
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3302
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3305
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3306
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3328
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3332
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3338
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3342
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3356
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3360
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3372
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3376
		{
			sqlVAL.union.val = &From{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3382
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3386
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3392
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3396
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3404
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3410
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3415
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3438
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3442
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3448
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3452
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:3459
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3478
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:3482
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3486
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3490
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3494
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3514
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3519
		{
			sqlVAL.union.val = nil
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3520
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3521
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3525
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3531
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3539
		{
			sqlVAL.union.val = true
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3543
		{
			sqlVAL.union.val = false
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3563
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3567
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3571
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3575
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3579
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3583
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3589
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3593
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3597
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3601
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3608
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3614
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3618
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3624
		{
			sqlVAL.str = astFullJoin
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3628
		{
			sqlVAL.str = astLeftJoin
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3632
		{
			sqlVAL.str = astRightJoin
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3636
		{
			sqlVAL.str = astInnerJoin
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3642
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3643
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3654
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3658
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3664
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3668
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3672
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3676
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3682
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3699
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3703
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3707
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3713
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3717
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3729
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3742
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3743
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3747
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3756
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3757
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3758
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:3766
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3768
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3772
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3776
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3780
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3784
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3788
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3792
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3796
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3800
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3804
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3808
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3829
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3838
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3852
		{
			sqlVAL.union.val = nil
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3859
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3863
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3867
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3871
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3875
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3879
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3883
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3887
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3891
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3895
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3899
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3903
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3913
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3917
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3926
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:3935
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3944
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3948
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3955
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3959
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3963
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3967
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:3971
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:3977
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:3981
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:3999
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4015
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4031
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4053
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4057
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4061
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4065
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4070
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4071
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4076
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4080
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4084
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4088
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4092
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4097
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4103
		{
			sqlVAL.union.val = year
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4107
		{
			sqlVAL.union.val = month
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4111
		{
			sqlVAL.union.val = day
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4115
		{
			sqlVAL.union.val = hour
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4119
		{
			sqlVAL.union.val = minute
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4123
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4129
		{
			sqlVAL.union.val = month
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4133
		{
			sqlVAL.union.val = hour
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4137
		{
			sqlVAL.union.val = minute
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4141
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4145
		{
			sqlVAL.union.val = minute
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4149
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4157
		{
			sqlVAL.union.val = nil
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4163
		{
			sqlVAL.union.val = second
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4166
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4190
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4194
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4198
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4201
		{
			return unimplemented(sqllex, "at tz")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4210
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4214
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4218
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4238
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4242
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4246
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4250
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4254
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4258
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4274
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4278
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4282
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4298
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4302
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4306
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4310
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4330
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4334
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: TSMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4358
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONLeftContains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4362
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONRightContains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4366
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONExtract, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONExtractText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4374
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4378
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4389
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4391
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4395
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4399
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4403
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4407
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4411
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4415
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4419
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4423
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4427
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4431
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4435
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4439
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4443
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4455
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4483
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4487
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4491
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4495
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4499
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4503
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4507
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4511
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4527
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4531
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4535
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4539
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4543
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4547
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4555
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4559
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4563
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4567
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4571
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4575
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4583
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4587
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:4591
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4595
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONExtract, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4599
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: JSONExtractText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4612
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4620
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4631
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4636
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4650
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4654
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4659
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4663
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4667
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4671
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4683
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4687
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4690
		{
			return unimplemented(sqllex, "variadic")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:4691
		{
			return unimplemented(sqllex, "variadic")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4693
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4697
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4701
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4714
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4730
		{
			return unimplemented(sqllex, "func_application")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4731
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4735
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4737
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4741
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4745
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4749
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4753
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4757
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4760
		{
			return unimplemented(sqllex, "current role")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4761
		{
			return unimplemented(sqllex, "current user")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4762
		{
			return unimplemented(sqllex, "session user")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4763
		{
			return unimplemented(sqllex, "user")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4765
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4769
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4773
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs(), Separator: " FROM "}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4777
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4781
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4785
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4789
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4792
		{
			return unimplemented(sqllex, "treat")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4794
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4798
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4802
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4806
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql.y:4810
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4814
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4818
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4822
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4826
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4830
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4836
		{
			return unimplemented(sqllex, "within group")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4837
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4841
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4845
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4852
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4856
		{
			sqlVAL.union.val = Window(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4862
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4872
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4880
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4884
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4888
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:4895
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4914
		{
			sqlVAL.str = ""
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4920
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4924
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4934
		{
			return unimplemented(sqllex, "frame range")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4935
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:4936
		{
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4939
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4940
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4946
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4947
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4948
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4949
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:4950
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4961
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4965
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4969
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:4975
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:4979
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:4985
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4991
		{
			sqlVAL.union.val = Any
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4995
		{
			sqlVAL.union.val = Some
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:4999
		{
			sqlVAL.union.val = All
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5004
		{
			sqlVAL.union.val = Plus
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5005
		{
			sqlVAL.union.val = Minus
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5006
		{
			sqlVAL.union.val = Mult
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5007
		{
			sqlVAL.union.val = Div
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5008
		{
			sqlVAL.union.val = FloorDiv
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5009
		{
			sqlVAL.union.val = Mod
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5010
		{
			sqlVAL.union.val = Bitand
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5011
		{
			sqlVAL.union.val = Bitor
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5012
		{
			sqlVAL.union.val = Pow
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5013
		{
			sqlVAL.union.val = Bitxor
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5014
		{
			sqlVAL.union.val = LT
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5015
		{
			sqlVAL.union.val = GT
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5016
		{
			sqlVAL.union.val = EQ
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5017
		{
			sqlVAL.union.val = LE
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5018
		{
			sqlVAL.union.val = GE
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5019
		{
			sqlVAL.union.val = NE
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5023
		{
			sqlVAL.union.val = Like
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5024
		{
			sqlVAL.union.val = NotLike
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5025
		{
			sqlVAL.union.val = ILike
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5026
		{
			sqlVAL.union.val = NotILike
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5037
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5047
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5057
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5061
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5065
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5071
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5075
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5081
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5085
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:5108
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5112
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5116
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5122
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5129
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5133
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5150
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5154
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5158
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5162
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5166
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5170
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5176
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5182
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5188
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5192
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5196
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5202
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5206
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:5217
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5224
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:5234
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5244
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5251
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5257
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:5261
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5268
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5274
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5280
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5286
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5290
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5296
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5306
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5315
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5316
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5325
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5331
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5344
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5350
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5360
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5369
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5373
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5377
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5385
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5395
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5405
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5420
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5424
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5430
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5434
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5447
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5451
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5455
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5459
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5465
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5469
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5475
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5478
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5488
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5492
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5499
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5507
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5511
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:5514
		{
			return unimplemented(sqllex, "func const")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5516
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5520
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:5523
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5525
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5529
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:5533
		{
			sqlVAL.union.val = DNull
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5540
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:5544
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5550
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5585
		{
			sqlVAL.str = ""
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:5591
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:5595
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
